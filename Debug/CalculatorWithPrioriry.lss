
CalculatorWithPrioriry.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016c  00800060  00004bc8  00004c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000068  008001cc  008001cc  00004dc8  2**0
                  ALLOC
  3 .stab         00003648  00000000  00000000  00004dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000119c  00000000  00000000  00008410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000095ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000974c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000993c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000bd48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000d0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e298  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000e458  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000e74b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f119  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 22 	call	0x454e	; 0x454e <main>
      8a:	0c 94 e2 25 	jmp	0x4bc4	; 0x4bc4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 25 	jmp	0x4b56	; 0x4b56 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 25 	jmp	0x4b8e	; 0x4b8e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 25 	jmp	0x4b56	; 0x4b56 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 25 	jmp	0x4b8e	; 0x4b8e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 25 	jmp	0x4b66	; 0x4b66 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e7       	ldi	r22, 0x72	; 114
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 cf 25 	jmp	0x4b9e	; 0x4b9e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b7 25 	jmp	0x4b6e	; 0x4b6e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b4 25 	jmp	0x4b68	; 0x4b68 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 d0 25 	jmp	0x4ba0	; 0x4ba0 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 d7 25 	jmp	0x4bae	; 0x4bae <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e6 58       	subi	r30, 0x86	; 134
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_voidInit>:
#include "../../../Library/STD_types.h"
#include "../../../Library/Bit_Math.h"
#include "../Header/DIO_Interface.h"
#include "../Header/DIO_Register.h"

void DIO_voidInit(){
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	6f ef       	ldi	r22, 0xFF	; 255
     e04:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	6f ef       	ldi	r22, 0xFF	; 255
     e0c:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
     e18:	84 e0       	ldi	r24, 0x04	; 4
     e1a:	6f ef       	ldi	r22, 0xFF	; 255
     e1c:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_voidSetPortDir>
}
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinDir){
     e26:	df 93       	push	r29
     e28:	cf 93       	push	r28
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
     e2e:	27 97       	sbiw	r28, 0x07	; 7
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	6a 83       	std	Y+2, r22	; 0x02
     e3e:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	85 30       	cpi	r24, 0x05	; 5
     e44:	08 f0       	brcs	.+2      	; 0xe48 <DIO_voidSetPinDir+0x22>
     e46:	f4 c0       	rjmp	.+488    	; 0x1030 <DIO_voidSetPinDir+0x20a>
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	88 23       	and	r24, r24
     e4c:	09 f4       	brne	.+2      	; 0xe50 <DIO_voidSetPinDir+0x2a>
     e4e:	f0 c0       	rjmp	.+480    	; 0x1030 <DIO_voidSetPinDir+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	88 30       	cpi	r24, 0x08	; 8
     e54:	08 f0       	brcs	.+2      	; 0xe58 <DIO_voidSetPinDir+0x32>
     e56:	ec c0       	rjmp	.+472    	; 0x1030 <DIO_voidSetPinDir+0x20a>
			if(Local_PinDir == Output){
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	09 f0       	breq	.+2      	; 0xe60 <DIO_voidSetPinDir+0x3a>
     e5e:	70 c0       	rjmp	.+224    	; 0xf40 <DIO_voidSetPinDir+0x11a>
				switch(Local_PortName){
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	3f 83       	std	Y+7, r19	; 0x07
     e68:	2e 83       	std	Y+6, r18	; 0x06
     e6a:	8e 81       	ldd	r24, Y+6	; 0x06
     e6c:	9f 81       	ldd	r25, Y+7	; 0x07
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	91 05       	cpc	r25, r1
     e72:	51 f1       	breq	.+84     	; 0xec8 <DIO_voidSetPinDir+0xa2>
     e74:	2e 81       	ldd	r18, Y+6	; 0x06
     e76:	3f 81       	ldd	r19, Y+7	; 0x07
     e78:	23 30       	cpi	r18, 0x03	; 3
     e7a:	31 05       	cpc	r19, r1
     e7c:	34 f4       	brge	.+12     	; 0xe8a <DIO_voidSetPinDir+0x64>
     e7e:	8e 81       	ldd	r24, Y+6	; 0x06
     e80:	9f 81       	ldd	r25, Y+7	; 0x07
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	91 05       	cpc	r25, r1
     e86:	61 f0       	breq	.+24     	; 0xea0 <DIO_voidSetPinDir+0x7a>
     e88:	d3 c0       	rjmp	.+422    	; 0x1030 <DIO_voidSetPinDir+0x20a>
     e8a:	2e 81       	ldd	r18, Y+6	; 0x06
     e8c:	3f 81       	ldd	r19, Y+7	; 0x07
     e8e:	23 30       	cpi	r18, 0x03	; 3
     e90:	31 05       	cpc	r19, r1
     e92:	71 f1       	breq	.+92     	; 0xef0 <DIO_voidSetPinDir+0xca>
     e94:	8e 81       	ldd	r24, Y+6	; 0x06
     e96:	9f 81       	ldd	r25, Y+7	; 0x07
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	91 05       	cpc	r25, r1
     e9c:	e9 f1       	breq	.+122    	; 0xf18 <DIO_voidSetPinDir+0xf2>
     e9e:	c8 c0       	rjmp	.+400    	; 0x1030 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_DDRA,Local_PinNumber);
     ea0:	aa e3       	ldi	r26, 0x3A	; 58
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	ea e3       	ldi	r30, 0x3A	; 58
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <DIO_voidSetPinDir+0x98>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <DIO_voidSetPinDir+0x94>
     ec2:	84 2b       	or	r24, r20
     ec4:	8c 93       	st	X, r24
     ec6:	b4 c0       	rjmp	.+360    	; 0x1030 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_DDRB,Local_PinNumber);
     ec8:	a7 e3       	ldi	r26, 0x37	; 55
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e7 e3       	ldi	r30, 0x37	; 55
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_voidSetPinDir+0xc0>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_voidSetPinDir+0xbc>
     eea:	84 2b       	or	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	a0 c0       	rjmp	.+320    	; 0x1030 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_DDRC,Local_PinNumber);
     ef0:	a4 e3       	ldi	r26, 0x34	; 52
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e4 e3       	ldi	r30, 0x34	; 52
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 2e       	mov	r0, r18
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_voidSetPinDir+0xe8>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	0a 94       	dec	r0
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_voidSetPinDir+0xe4>
     f12:	84 2b       	or	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	8c c0       	rjmp	.+280    	; 0x1030 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_DDRD,Local_PinNumber);
     f18:	a1 e3       	ldi	r26, 0x31	; 49
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e1 e3       	ldi	r30, 0x31	; 49
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_voidSetPinDir+0x110>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_voidSetPinDir+0x10c>
     f3a:	84 2b       	or	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	78 c0       	rjmp	.+240    	; 0x1030 <DIO_voidSetPinDir+0x20a>
					break;
				}
			}
			else if(Local_PinDir == Input){
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	88 23       	and	r24, r24
     f44:	09 f0       	breq	.+2      	; 0xf48 <DIO_voidSetPinDir+0x122>
     f46:	74 c0       	rjmp	.+232    	; 0x1030 <DIO_voidSetPinDir+0x20a>
				switch(Local_PortName){
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	3d 83       	std	Y+5, r19	; 0x05
     f50:	2c 83       	std	Y+4, r18	; 0x04
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	9d 81       	ldd	r25, Y+5	; 0x05
     f56:	82 30       	cpi	r24, 0x02	; 2
     f58:	91 05       	cpc	r25, r1
     f5a:	61 f1       	breq	.+88     	; 0xfb4 <DIO_voidSetPinDir+0x18e>
     f5c:	2c 81       	ldd	r18, Y+4	; 0x04
     f5e:	3d 81       	ldd	r19, Y+5	; 0x05
     f60:	23 30       	cpi	r18, 0x03	; 3
     f62:	31 05       	cpc	r19, r1
     f64:	34 f4       	brge	.+12     	; 0xf72 <DIO_voidSetPinDir+0x14c>
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	9d 81       	ldd	r25, Y+5	; 0x05
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	91 05       	cpc	r25, r1
     f6e:	69 f0       	breq	.+26     	; 0xf8a <DIO_voidSetPinDir+0x164>
     f70:	5f c0       	rjmp	.+190    	; 0x1030 <DIO_voidSetPinDir+0x20a>
     f72:	2c 81       	ldd	r18, Y+4	; 0x04
     f74:	3d 81       	ldd	r19, Y+5	; 0x05
     f76:	23 30       	cpi	r18, 0x03	; 3
     f78:	31 05       	cpc	r19, r1
     f7a:	89 f1       	breq	.+98     	; 0xfde <DIO_voidSetPinDir+0x1b8>
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	84 30       	cpi	r24, 0x04	; 4
     f82:	91 05       	cpc	r25, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <DIO_voidSetPinDir+0x162>
     f86:	40 c0       	rjmp	.+128    	; 0x1008 <DIO_voidSetPinDir+0x1e2>
     f88:	53 c0       	rjmp	.+166    	; 0x1030 <DIO_voidSetPinDir+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_DDRA,Local_PinNumber);
     f8a:	aa e3       	ldi	r26, 0x3A	; 58
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ea e3       	ldi	r30, 0x3A	; 58
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_voidSetPinDir+0x182>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_voidSetPinDir+0x17e>
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	3e c0       	rjmp	.+124    	; 0x1030 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_DDRB,Local_PinNumber);
     fb4:	a7 e3       	ldi	r26, 0x37	; 55
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e7 e3       	ldi	r30, 0x37	; 55
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_voidSetPinDir+0x1ac>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_voidSetPinDir+0x1a8>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	29 c0       	rjmp	.+82     	; 0x1030 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_DDRC,Local_PinNumber);
     fde:	a4 e3       	ldi	r26, 0x34	; 52
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e4 e3       	ldi	r30, 0x34	; 52
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_voidSetPinDir+0x1d6>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_voidSetPinDir+0x1d2>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	14 c0       	rjmp	.+40     	; 0x1030 <DIO_voidSetPinDir+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_DDRD,Local_PinNumber);
    1008:	a1 e3       	ldi	r26, 0x31	; 49
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e1 e3       	ldi	r30, 0x31	; 49
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_voidSetPinDir+0x200>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_voidSetPinDir+0x1fc>
    102a:	80 95       	com	r24
    102c:	84 23       	and	r24, r20
    102e:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    1030:	27 96       	adiw	r28, 0x07	; 7
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Local_PortName,u8 Local_PinNumber,u8 Local_PinValue){
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	27 97       	sbiw	r28, 0x07	; 7
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	6a 83       	std	Y+2, r22	; 0x02
    105a:	4b 83       	std	Y+3, r20	; 0x03
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	85 30       	cpi	r24, 0x05	; 5
    1060:	08 f0       	brcs	.+2      	; 0x1064 <DIO_voidSetPinValue+0x22>
    1062:	f4 c0       	rjmp	.+488    	; 0x124c <DIO_voidSetPinValue+0x20a>
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	88 23       	and	r24, r24
    1068:	09 f4       	brne	.+2      	; 0x106c <DIO_voidSetPinValue+0x2a>
    106a:	f0 c0       	rjmp	.+480    	; 0x124c <DIO_voidSetPinValue+0x20a>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	88 30       	cpi	r24, 0x08	; 8
    1070:	08 f0       	brcs	.+2      	; 0x1074 <DIO_voidSetPinValue+0x32>
    1072:	ec c0       	rjmp	.+472    	; 0x124c <DIO_voidSetPinValue+0x20a>
			if(Local_PinValue == High){
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	09 f0       	breq	.+2      	; 0x107c <DIO_voidSetPinValue+0x3a>
    107a:	70 c0       	rjmp	.+224    	; 0x115c <DIO_voidSetPinValue+0x11a>
				switch(Local_PortName){
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	3f 83       	std	Y+7, r19	; 0x07
    1084:	2e 83       	std	Y+6, r18	; 0x06
    1086:	8e 81       	ldd	r24, Y+6	; 0x06
    1088:	9f 81       	ldd	r25, Y+7	; 0x07
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	91 05       	cpc	r25, r1
    108e:	51 f1       	breq	.+84     	; 0x10e4 <DIO_voidSetPinValue+0xa2>
    1090:	2e 81       	ldd	r18, Y+6	; 0x06
    1092:	3f 81       	ldd	r19, Y+7	; 0x07
    1094:	23 30       	cpi	r18, 0x03	; 3
    1096:	31 05       	cpc	r19, r1
    1098:	34 f4       	brge	.+12     	; 0x10a6 <DIO_voidSetPinValue+0x64>
    109a:	8e 81       	ldd	r24, Y+6	; 0x06
    109c:	9f 81       	ldd	r25, Y+7	; 0x07
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	91 05       	cpc	r25, r1
    10a2:	61 f0       	breq	.+24     	; 0x10bc <DIO_voidSetPinValue+0x7a>
    10a4:	d3 c0       	rjmp	.+422    	; 0x124c <DIO_voidSetPinValue+0x20a>
    10a6:	2e 81       	ldd	r18, Y+6	; 0x06
    10a8:	3f 81       	ldd	r19, Y+7	; 0x07
    10aa:	23 30       	cpi	r18, 0x03	; 3
    10ac:	31 05       	cpc	r19, r1
    10ae:	71 f1       	breq	.+92     	; 0x110c <DIO_voidSetPinValue+0xca>
    10b0:	8e 81       	ldd	r24, Y+6	; 0x06
    10b2:	9f 81       	ldd	r25, Y+7	; 0x07
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	91 05       	cpc	r25, r1
    10b8:	e9 f1       	breq	.+122    	; 0x1134 <DIO_voidSetPinValue+0xf2>
    10ba:	c8 c0       	rjmp	.+400    	; 0x124c <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
    10bc:	ab e3       	ldi	r26, 0x3B	; 59
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_voidSetPinValue+0x98>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_voidSetPinValue+0x94>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	b4 c0       	rjmp	.+360    	; 0x124c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_voidSetPinValue+0xc0>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_voidSetPinValue+0xbc>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	a0 c0       	rjmp	.+320    	; 0x124c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
    110c:	a5 e3       	ldi	r26, 0x35	; 53
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e3       	ldi	r30, 0x35	; 53
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_voidSetPinValue+0xe8>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_voidSetPinValue+0xe4>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	8c c0       	rjmp	.+280    	; 0x124c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
    1134:	a2 e3       	ldi	r26, 0x32	; 50
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e2 e3       	ldi	r30, 0x32	; 50
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_voidSetPinValue+0x110>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_voidSetPinValue+0x10c>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	78 c0       	rjmp	.+240    	; 0x124c <DIO_voidSetPinValue+0x20a>
					break;
				}
			}
			else if(Local_PinValue == Low){
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	88 23       	and	r24, r24
    1160:	09 f0       	breq	.+2      	; 0x1164 <DIO_voidSetPinValue+0x122>
    1162:	74 c0       	rjmp	.+232    	; 0x124c <DIO_voidSetPinValue+0x20a>
				switch(Local_PortName){
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3d 83       	std	Y+5, r19	; 0x05
    116c:	2c 83       	std	Y+4, r18	; 0x04
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	91 05       	cpc	r25, r1
    1176:	61 f1       	breq	.+88     	; 0x11d0 <DIO_voidSetPinValue+0x18e>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	23 30       	cpi	r18, 0x03	; 3
    117e:	31 05       	cpc	r19, r1
    1180:	34 f4       	brge	.+12     	; 0x118e <DIO_voidSetPinValue+0x14c>
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	9d 81       	ldd	r25, Y+5	; 0x05
    1186:	81 30       	cpi	r24, 0x01	; 1
    1188:	91 05       	cpc	r25, r1
    118a:	69 f0       	breq	.+26     	; 0x11a6 <DIO_voidSetPinValue+0x164>
    118c:	5f c0       	rjmp	.+190    	; 0x124c <DIO_voidSetPinValue+0x20a>
    118e:	2c 81       	ldd	r18, Y+4	; 0x04
    1190:	3d 81       	ldd	r19, Y+5	; 0x05
    1192:	23 30       	cpi	r18, 0x03	; 3
    1194:	31 05       	cpc	r19, r1
    1196:	89 f1       	breq	.+98     	; 0x11fa <DIO_voidSetPinValue+0x1b8>
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	9d 81       	ldd	r25, Y+5	; 0x05
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	91 05       	cpc	r25, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <DIO_voidSetPinValue+0x162>
    11a2:	40 c0       	rjmp	.+128    	; 0x1224 <DIO_voidSetPinValue+0x1e2>
    11a4:	53 c0       	rjmp	.+166    	; 0x124c <DIO_voidSetPinValue+0x20a>
				case DIO_PortA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
    11a6:	ab e3       	ldi	r26, 0x3B	; 59
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	eb e3       	ldi	r30, 0x3B	; 59
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_voidSetPinValue+0x182>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_voidSetPinValue+0x17e>
    11c8:	80 95       	com	r24
    11ca:	84 23       	and	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	3e c0       	rjmp	.+124    	; 0x124c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
    11d0:	a8 e3       	ldi	r26, 0x38	; 56
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e8 e3       	ldi	r30, 0x38	; 56
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_voidSetPinValue+0x1ac>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_voidSetPinValue+0x1a8>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	29 c0       	rjmp	.+82     	; 0x124c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
    11fa:	a5 e3       	ldi	r26, 0x35	; 53
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e5 e3       	ldi	r30, 0x35	; 53
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_voidSetPinValue+0x1d6>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_voidSetPinValue+0x1d2>
    121c:	80 95       	com	r24
    121e:	84 23       	and	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	14 c0       	rjmp	.+40     	; 0x124c <DIO_voidSetPinValue+0x20a>
					break;
				case DIO_PortD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
    1224:	a2 e3       	ldi	r26, 0x32	; 50
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e2 e3       	ldi	r30, 0x32	; 50
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_voidSetPinValue+0x200>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_voidSetPinValue+0x1fc>
    1246:	80 95       	com	r24
    1248:	84 23       	and	r24, r20
    124a:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    124c:	27 96       	adiw	r28, 0x07	; 7
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Local_PortName,u8 Local_PinNumber){
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <DIO_u8GetPinValue+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <DIO_u8GetPinValue+0x8>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	85 30       	cpi	r24, 0x05	; 5
    1274:	08 f0       	brcs	.+2      	; 0x1278 <DIO_u8GetPinValue+0x1a>
    1276:	74 c0       	rjmp	.+232    	; 0x1360 <DIO_u8GetPinValue+0x102>
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	88 23       	and	r24, r24
    127c:	09 f4       	brne	.+2      	; 0x1280 <DIO_u8GetPinValue+0x22>
    127e:	70 c0       	rjmp	.+224    	; 0x1360 <DIO_u8GetPinValue+0x102>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	88 30       	cpi	r24, 0x08	; 8
    1284:	08 f0       	brcs	.+2      	; 0x1288 <DIO_u8GetPinValue+0x2a>
    1286:	6c c0       	rjmp	.+216    	; 0x1360 <DIO_u8GetPinValue+0x102>
			switch(Local_PortName){
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3d 83       	std	Y+5, r19	; 0x05
    1290:	2c 83       	std	Y+4, r18	; 0x04
    1292:	4c 81       	ldd	r20, Y+4	; 0x04
    1294:	5d 81       	ldd	r21, Y+5	; 0x05
    1296:	42 30       	cpi	r20, 0x02	; 2
    1298:	51 05       	cpc	r21, r1
    129a:	49 f1       	breq	.+82     	; 0x12ee <DIO_u8GetPinValue+0x90>
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	91 05       	cpc	r25, r1
    12a4:	34 f4       	brge	.+12     	; 0x12b2 <DIO_u8GetPinValue+0x54>
    12a6:	2c 81       	ldd	r18, Y+4	; 0x04
    12a8:	3d 81       	ldd	r19, Y+5	; 0x05
    12aa:	21 30       	cpi	r18, 0x01	; 1
    12ac:	31 05       	cpc	r19, r1
    12ae:	61 f0       	breq	.+24     	; 0x12c8 <DIO_u8GetPinValue+0x6a>
    12b0:	57 c0       	rjmp	.+174    	; 0x1360 <DIO_u8GetPinValue+0x102>
    12b2:	4c 81       	ldd	r20, Y+4	; 0x04
    12b4:	5d 81       	ldd	r21, Y+5	; 0x05
    12b6:	43 30       	cpi	r20, 0x03	; 3
    12b8:	51 05       	cpc	r21, r1
    12ba:	61 f1       	breq	.+88     	; 0x1314 <DIO_u8GetPinValue+0xb6>
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	9d 81       	ldd	r25, Y+5	; 0x05
    12c0:	84 30       	cpi	r24, 0x04	; 4
    12c2:	91 05       	cpc	r25, r1
    12c4:	d1 f1       	breq	.+116    	; 0x133a <DIO_u8GetPinValue+0xdc>
    12c6:	4c c0       	rjmp	.+152    	; 0x1360 <DIO_u8GetPinValue+0x102>
			case DIO_PortA:
				return Get_Bit(DIO_PINA,Local_PinNumber);
    12c8:	e9 e3       	ldi	r30, 0x39	; 57
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	a9 01       	movw	r20, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_u8GetPinValue+0x82>
    12dc:	55 95       	asr	r21
    12de:	47 95       	ror	r20
    12e0:	8a 95       	dec	r24
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_u8GetPinValue+0x7e>
    12e4:	ca 01       	movw	r24, r20
    12e6:	58 2f       	mov	r21, r24
    12e8:	51 70       	andi	r21, 0x01	; 1
    12ea:	5b 83       	std	Y+3, r21	; 0x03
    12ec:	3b c0       	rjmp	.+118    	; 0x1364 <DIO_u8GetPinValue+0x106>
			case DIO_PortB:
				return Get_Bit(DIO_PINB,Local_PinNumber);
    12ee:	e6 e3       	ldi	r30, 0x36	; 54
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a9 01       	movw	r20, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_u8GetPinValue+0xa8>
    1302:	55 95       	asr	r21
    1304:	47 95       	ror	r20
    1306:	8a 95       	dec	r24
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_u8GetPinValue+0xa4>
    130a:	ca 01       	movw	r24, r20
    130c:	58 2f       	mov	r21, r24
    130e:	51 70       	andi	r21, 0x01	; 1
    1310:	5b 83       	std	Y+3, r21	; 0x03
    1312:	28 c0       	rjmp	.+80     	; 0x1364 <DIO_u8GetPinValue+0x106>
			case DIO_PortC:
				return Get_Bit(DIO_PINC,Local_PinNumber);
    1314:	e3 e3       	ldi	r30, 0x33	; 51
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	88 2f       	mov	r24, r24
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a9 01       	movw	r20, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_u8GetPinValue+0xce>
    1328:	55 95       	asr	r21
    132a:	47 95       	ror	r20
    132c:	8a 95       	dec	r24
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_u8GetPinValue+0xca>
    1330:	ca 01       	movw	r24, r20
    1332:	58 2f       	mov	r21, r24
    1334:	51 70       	andi	r21, 0x01	; 1
    1336:	5b 83       	std	Y+3, r21	; 0x03
    1338:	15 c0       	rjmp	.+42     	; 0x1364 <DIO_u8GetPinValue+0x106>
			case DIO_PortD:
				return Get_Bit(DIO_PIND,Local_PinNumber);
    133a:	e0 e3       	ldi	r30, 0x30	; 48
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a9 01       	movw	r20, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_u8GetPinValue+0xf4>
    134e:	55 95       	asr	r21
    1350:	47 95       	ror	r20
    1352:	8a 95       	dec	r24
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_u8GetPinValue+0xf0>
    1356:	ca 01       	movw	r24, r20
    1358:	58 2f       	mov	r21, r24
    135a:	51 70       	andi	r21, 0x01	; 1
    135c:	5b 83       	std	Y+3, r21	; 0x03
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_u8GetPinValue+0x106>
			}
		}
	}
	return -1;
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	8b 83       	std	Y+3, r24	; 0x03
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 Local_PortName,u8 Local_PinNumber){
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_voidTogglePin+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <DIO_voidTogglePin+0x8>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	85 30       	cpi	r24, 0x05	; 5
    138a:	08 f0       	brcs	.+2      	; 0x138e <DIO_voidTogglePin+0x18>
    138c:	77 c0       	rjmp	.+238    	; 0x147c <DIO_voidTogglePin+0x106>
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	88 23       	and	r24, r24
    1392:	09 f4       	brne	.+2      	; 0x1396 <DIO_voidTogglePin+0x20>
    1394:	73 c0       	rjmp	.+230    	; 0x147c <DIO_voidTogglePin+0x106>
		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	88 30       	cpi	r24, 0x08	; 8
    139a:	08 f0       	brcs	.+2      	; 0x139e <DIO_voidTogglePin+0x28>
    139c:	6f c0       	rjmp	.+222    	; 0x147c <DIO_voidTogglePin+0x106>
			switch(Local_PortName){
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3c 83       	std	Y+4, r19	; 0x04
    13a6:	2b 83       	std	Y+3, r18	; 0x03
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	51 f1       	breq	.+84     	; 0x1406 <DIO_voidTogglePin+0x90>
    13b2:	2b 81       	ldd	r18, Y+3	; 0x03
    13b4:	3c 81       	ldd	r19, Y+4	; 0x04
    13b6:	23 30       	cpi	r18, 0x03	; 3
    13b8:	31 05       	cpc	r19, r1
    13ba:	34 f4       	brge	.+12     	; 0x13c8 <DIO_voidTogglePin+0x52>
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	91 05       	cpc	r25, r1
    13c4:	61 f0       	breq	.+24     	; 0x13de <DIO_voidTogglePin+0x68>
    13c6:	5a c0       	rjmp	.+180    	; 0x147c <DIO_voidTogglePin+0x106>
    13c8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ca:	3c 81       	ldd	r19, Y+4	; 0x04
    13cc:	23 30       	cpi	r18, 0x03	; 3
    13ce:	31 05       	cpc	r19, r1
    13d0:	71 f1       	breq	.+92     	; 0x142e <DIO_voidTogglePin+0xb8>
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	84 30       	cpi	r24, 0x04	; 4
    13d8:	91 05       	cpc	r25, r1
    13da:	e9 f1       	breq	.+122    	; 0x1456 <DIO_voidTogglePin+0xe0>
    13dc:	4f c0       	rjmp	.+158    	; 0x147c <DIO_voidTogglePin+0x106>
			case DIO_PortA:
				Toggle_Bit(DIO_PORTA,Local_PinNumber);
    13de:	ab e3       	ldi	r26, 0x3B	; 59
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	eb e3       	ldi	r30, 0x3B	; 59
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_voidTogglePin+0x86>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO_voidTogglePin+0x82>
    1400:	84 27       	eor	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	3b c0       	rjmp	.+118    	; 0x147c <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortB:
				Toggle_Bit(DIO_PORTB,Local_PinNumber);
    1406:	a8 e3       	ldi	r26, 0x38	; 56
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e8 e3       	ldi	r30, 0x38	; 56
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_voidTogglePin+0xae>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_voidTogglePin+0xaa>
    1428:	84 27       	eor	r24, r20
    142a:	8c 93       	st	X, r24
    142c:	27 c0       	rjmp	.+78     	; 0x147c <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
    142e:	a5 e3       	ldi	r26, 0x35	; 53
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e5 e3       	ldi	r30, 0x35	; 53
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_voidTogglePin+0xd6>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_voidTogglePin+0xd2>
    1450:	84 27       	eor	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	13 c0       	rjmp	.+38     	; 0x147c <DIO_voidTogglePin+0x106>
				break;
			case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
    1456:	a2 e3       	ldi	r26, 0x32	; 50
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e2 e3       	ldi	r30, 0x32	; 50
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_voidTogglePin+0xfe>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_voidTogglePin+0xfa>
    1478:	84 27       	eor	r24, r20
    147a:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <DIO_voidSetPortDir>:

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	00 d0       	rcall	.+0      	; 0x1490 <DIO_voidSetPortDir+0x6>
    1490:	00 d0       	rcall	.+0      	; 0x1492 <DIO_voidSetPortDir+0x8>
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	85 30       	cpi	r24, 0x05	; 5
    149e:	b0 f5       	brcc	.+108    	; 0x150c <DIO_voidSetPortDir+0x82>
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	88 23       	and	r24, r24
    14a4:	99 f1       	breq	.+102    	; 0x150c <DIO_voidSetPortDir+0x82>
		switch(Local_PortName){
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3c 83       	std	Y+4, r19	; 0x04
    14ae:	2b 83       	std	Y+3, r18	; 0x03
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	82 30       	cpi	r24, 0x02	; 2
    14b6:	91 05       	cpc	r25, r1
    14b8:	d9 f0       	breq	.+54     	; 0x14f0 <DIO_voidSetPortDir+0x66>
    14ba:	2b 81       	ldd	r18, Y+3	; 0x03
    14bc:	3c 81       	ldd	r19, Y+4	; 0x04
    14be:	23 30       	cpi	r18, 0x03	; 3
    14c0:	31 05       	cpc	r19, r1
    14c2:	34 f4       	brge	.+12     	; 0x14d0 <DIO_voidSetPortDir+0x46>
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <DIO_voidSetPortDir+0x5c>
    14ce:	1e c0       	rjmp	.+60     	; 0x150c <DIO_voidSetPortDir+0x82>
    14d0:	2b 81       	ldd	r18, Y+3	; 0x03
    14d2:	3c 81       	ldd	r19, Y+4	; 0x04
    14d4:	23 30       	cpi	r18, 0x03	; 3
    14d6:	31 05       	cpc	r19, r1
    14d8:	81 f0       	breq	.+32     	; 0x14fa <DIO_voidSetPortDir+0x70>
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	84 30       	cpi	r24, 0x04	; 4
    14e0:	91 05       	cpc	r25, r1
    14e2:	81 f0       	breq	.+32     	; 0x1504 <DIO_voidSetPortDir+0x7a>
    14e4:	13 c0       	rjmp	.+38     	; 0x150c <DIO_voidSetPortDir+0x82>
		case DIO_PortA:
			DIO_DDRA = Local_PortDir;
    14e6:	ea e3       	ldi	r30, 0x3A	; 58
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	80 83       	st	Z, r24
    14ee:	0e c0       	rjmp	.+28     	; 0x150c <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortB:
			DIO_DDRB = Local_PortDir;
    14f0:	e7 e3       	ldi	r30, 0x37	; 55
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	80 83       	st	Z, r24
    14f8:	09 c0       	rjmp	.+18     	; 0x150c <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortC:
			DIO_DDRC = Local_PortDir;
    14fa:	e4 e3       	ldi	r30, 0x34	; 52
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	80 83       	st	Z, r24
    1502:	04 c0       	rjmp	.+8      	; 0x150c <DIO_voidSetPortDir+0x82>
			break;
		case DIO_PortD:
			DIO_DDRD = Local_PortDir;
    1504:	e1 e3       	ldi	r30, 0x31	; 49
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	80 83       	st	Z, r24
			break;
		}
	}
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <DIO_voidSetPortValue+0x6>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <DIO_voidSetPortValue+0x8>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	6a 83       	std	Y+2, r22	; 0x02
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	85 30       	cpi	r24, 0x05	; 5
    152e:	b0 f5       	brcc	.+108    	; 0x159c <DIO_voidSetPortValue+0x82>
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	88 23       	and	r24, r24
    1534:	99 f1       	breq	.+102    	; 0x159c <DIO_voidSetPortValue+0x82>
		switch(Local_PortName){
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3c 83       	std	Y+4, r19	; 0x04
    153e:	2b 83       	std	Y+3, r18	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	91 05       	cpc	r25, r1
    1548:	d9 f0       	breq	.+54     	; 0x1580 <DIO_voidSetPortValue+0x66>
    154a:	2b 81       	ldd	r18, Y+3	; 0x03
    154c:	3c 81       	ldd	r19, Y+4	; 0x04
    154e:	23 30       	cpi	r18, 0x03	; 3
    1550:	31 05       	cpc	r19, r1
    1552:	34 f4       	brge	.+12     	; 0x1560 <DIO_voidSetPortValue+0x46>
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	61 f0       	breq	.+24     	; 0x1576 <DIO_voidSetPortValue+0x5c>
    155e:	1e c0       	rjmp	.+60     	; 0x159c <DIO_voidSetPortValue+0x82>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	23 30       	cpi	r18, 0x03	; 3
    1566:	31 05       	cpc	r19, r1
    1568:	81 f0       	breq	.+32     	; 0x158a <DIO_voidSetPortValue+0x70>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	84 30       	cpi	r24, 0x04	; 4
    1570:	91 05       	cpc	r25, r1
    1572:	81 f0       	breq	.+32     	; 0x1594 <DIO_voidSetPortValue+0x7a>
    1574:	13 c0       	rjmp	.+38     	; 0x159c <DIO_voidSetPortValue+0x82>
		case DIO_PortA:
			DIO_PORTA = Local_PortValue;
    1576:	eb e3       	ldi	r30, 0x3B	; 59
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	80 83       	st	Z, r24
    157e:	0e c0       	rjmp	.+28     	; 0x159c <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortB:
			DIO_PORTB = Local_PortValue;
    1580:	e8 e3       	ldi	r30, 0x38	; 56
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	80 83       	st	Z, r24
    1588:	09 c0       	rjmp	.+18     	; 0x159c <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortC:
			DIO_PORTC = Local_PortValue;
    158a:	e5 e3       	ldi	r30, 0x35	; 53
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	80 83       	st	Z, r24
    1592:	04 c0       	rjmp	.+8      	; 0x159c <DIO_voidSetPortValue+0x82>
			break;
		case DIO_PortD:
			DIO_PORTD = Local_PortValue;
    1594:	e2 e3       	ldi	r30, 0x32	; 50
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	80 83       	st	Z, r24
			break;
		}
	}
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Local_PortName){
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <DIO_u8GetPortValue+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <DIO_u8GetPortValue+0x8>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	85 30       	cpi	r24, 0x05	; 5
    15bc:	b8 f5       	brcc	.+110    	; 0x162c <DIO_u8GetPortValue+0x82>
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	88 23       	and	r24, r24
    15c2:	a1 f1       	breq	.+104    	; 0x162c <DIO_u8GetPortValue+0x82>
		switch(Local_PortName){
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3c 83       	std	Y+4, r19	; 0x04
    15cc:	2b 83       	std	Y+3, r18	; 0x03
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	91 05       	cpc	r25, r1
    15d6:	d9 f0       	breq	.+54     	; 0x160e <DIO_u8GetPortValue+0x64>
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	23 30       	cpi	r18, 0x03	; 3
    15de:	31 05       	cpc	r19, r1
    15e0:	34 f4       	brge	.+12     	; 0x15ee <DIO_u8GetPortValue+0x44>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	91 05       	cpc	r25, r1
    15ea:	61 f0       	breq	.+24     	; 0x1604 <DIO_u8GetPortValue+0x5a>
    15ec:	1f c0       	rjmp	.+62     	; 0x162c <DIO_u8GetPortValue+0x82>
    15ee:	2b 81       	ldd	r18, Y+3	; 0x03
    15f0:	3c 81       	ldd	r19, Y+4	; 0x04
    15f2:	23 30       	cpi	r18, 0x03	; 3
    15f4:	31 05       	cpc	r19, r1
    15f6:	81 f0       	breq	.+32     	; 0x1618 <DIO_u8GetPortValue+0x6e>
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	9c 81       	ldd	r25, Y+4	; 0x04
    15fc:	84 30       	cpi	r24, 0x04	; 4
    15fe:	91 05       	cpc	r25, r1
    1600:	81 f0       	breq	.+32     	; 0x1622 <DIO_u8GetPortValue+0x78>
    1602:	14 c0       	rjmp	.+40     	; 0x162c <DIO_u8GetPortValue+0x82>
		case DIO_PortA:
			return DIO_PORTA;
    1604:	eb e3       	ldi	r30, 0x3B	; 59
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	90 81       	ld	r25, Z
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	11 c0       	rjmp	.+34     	; 0x1630 <DIO_u8GetPortValue+0x86>
		case DIO_PortB:
			return DIO_PORTB;
    160e:	e8 e3       	ldi	r30, 0x38	; 56
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	20 81       	ld	r18, Z
    1614:	2a 83       	std	Y+2, r18	; 0x02
    1616:	0c c0       	rjmp	.+24     	; 0x1630 <DIO_u8GetPortValue+0x86>
		case DIO_PortC:
			return DIO_PORTC;
    1618:	e5 e3       	ldi	r30, 0x35	; 53
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	30 81       	ld	r19, Z
    161e:	3a 83       	std	Y+2, r19	; 0x02
    1620:	07 c0       	rjmp	.+14     	; 0x1630 <DIO_u8GetPortValue+0x86>
		case DIO_PortD:
			return DIO_PORTD;
    1622:	e2 e3       	ldi	r30, 0x32	; 50
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	8a 83       	std	Y+2, r24	; 0x02
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <DIO_u8GetPortValue+0x86>
		}
	}
	return -1;
    162c:	9f ef       	ldi	r25, 0xFF	; 255
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <DIO_voidTogglePort>:

void DIO_voidTogglePort(u8 Local_PortName){
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <DIO_voidTogglePort+0x6>
    1646:	0f 92       	push	r0
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	89 83       	std	Y+1, r24	; 0x01
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	85 30       	cpi	r24, 0x05	; 5
    1652:	08 f0       	brcs	.+2      	; 0x1656 <DIO_voidTogglePort+0x16>
    1654:	43 c0       	rjmp	.+134    	; 0x16dc <DIO_voidTogglePort+0x9c>
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	88 23       	and	r24, r24
    165a:	09 f4       	brne	.+2      	; 0x165e <DIO_voidTogglePort+0x1e>
    165c:	3f c0       	rjmp	.+126    	; 0x16dc <DIO_voidTogglePort+0x9c>
			switch(Local_PortName){
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3b 83       	std	Y+3, r19	; 0x03
    1666:	2a 83       	std	Y+2, r18	; 0x02
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	9b 81       	ldd	r25, Y+3	; 0x03
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	91 05       	cpc	r25, r1
    1670:	f1 f0       	breq	.+60     	; 0x16ae <DIO_voidTogglePort+0x6e>
    1672:	2a 81       	ldd	r18, Y+2	; 0x02
    1674:	3b 81       	ldd	r19, Y+3	; 0x03
    1676:	23 30       	cpi	r18, 0x03	; 3
    1678:	31 05       	cpc	r19, r1
    167a:	34 f4       	brge	.+12     	; 0x1688 <DIO_voidTogglePort+0x48>
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	9b 81       	ldd	r25, Y+3	; 0x03
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	61 f0       	breq	.+24     	; 0x169e <DIO_voidTogglePort+0x5e>
    1686:	2a c0       	rjmp	.+84     	; 0x16dc <DIO_voidTogglePort+0x9c>
    1688:	2a 81       	ldd	r18, Y+2	; 0x02
    168a:	3b 81       	ldd	r19, Y+3	; 0x03
    168c:	23 30       	cpi	r18, 0x03	; 3
    168e:	31 05       	cpc	r19, r1
    1690:	b1 f0       	breq	.+44     	; 0x16be <DIO_voidTogglePort+0x7e>
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	9b 81       	ldd	r25, Y+3	; 0x03
    1696:	84 30       	cpi	r24, 0x04	; 4
    1698:	91 05       	cpc	r25, r1
    169a:	c9 f0       	breq	.+50     	; 0x16ce <DIO_voidTogglePort+0x8e>
    169c:	1f c0       	rjmp	.+62     	; 0x16dc <DIO_voidTogglePort+0x9c>
			case DIO_PortA:
				DIO_PORTA ^= 0xFF;
    169e:	ab e3       	ldi	r26, 0x3B	; 59
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	eb e3       	ldi	r30, 0x3B	; 59
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	80 95       	com	r24
    16aa:	8c 93       	st	X, r24
    16ac:	17 c0       	rjmp	.+46     	; 0x16dc <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortB:
				DIO_PORTB ^= 0xFF;
    16ae:	a8 e3       	ldi	r26, 0x38	; 56
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e8 e3       	ldi	r30, 0x38	; 56
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	80 95       	com	r24
    16ba:	8c 93       	st	X, r24
    16bc:	0f c0       	rjmp	.+30     	; 0x16dc <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortC:
				DIO_PORTC ^= 0xFF;
    16be:	a5 e3       	ldi	r26, 0x35	; 53
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e3       	ldi	r30, 0x35	; 53
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	80 95       	com	r24
    16ca:	8c 93       	st	X, r24
    16cc:	07 c0       	rjmp	.+14     	; 0x16dc <DIO_voidTogglePort+0x9c>
				break;
			case DIO_PortD:
				DIO_PORTD ^= 0xFF;
    16ce:	a2 e3       	ldi	r26, 0x32	; 50
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e2 e3       	ldi	r30, 0x32	; 50
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	80 95       	com	r24
    16da:	8c 93       	st	X, r24
				break;
			}
		}
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <SevSeg_voidSingleInit>:
		0b00111, // 7
		0b10000, // 8
		0b10001  // 9
};

void SevSeg_voidSingleInit(){
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	6f e7       	ldi	r22, 0x7F	; 127
    16f4:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_voidSetPortDir>
}
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <SevSeg_voidDoubleInit>:

void SevSeg_voidDoubleInit(){
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(Sev_PORT,0x7F);
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	6f e7       	ldi	r22, 0x7F	; 127
    170a:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_voidSetPortDir>
	DIO_voidSetPortDir(Sev_PORT2,0x7F);
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	6f e7       	ldi	r22, 0x7F	; 127
    1712:	0e 94 45 0a 	call	0x148a	; 0x148a <DIO_voidSetPortDir>
}
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <SevSeg_voidDisplayNumber>:

void SevSeg_voidDisplayNumber(u8 number){
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	60 97       	sbiw	r28, 0x10	; 16
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	8b 87       	std	Y+11, r24	; 0x0b
	s8 Sev_numbers[] = Sev_Array;
    1732:	ce 01       	movw	r24, r28
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	9d 87       	std	Y+13, r25	; 0x0d
    1738:	8c 87       	std	Y+12, r24	; 0x0c
    173a:	e9 e8       	ldi	r30, 0x89	; 137
    173c:	f1 e0       	ldi	r31, 0x01	; 1
    173e:	ff 87       	std	Y+15, r31	; 0x0f
    1740:	ee 87       	std	Y+14, r30	; 0x0e
    1742:	fa e0       	ldi	r31, 0x0A	; 10
    1744:	f8 8b       	std	Y+16, r31	; 0x10
    1746:	ee 85       	ldd	r30, Y+14	; 0x0e
    1748:	ff 85       	ldd	r31, Y+15	; 0x0f
    174a:	00 80       	ld	r0, Z
    174c:	8e 85       	ldd	r24, Y+14	; 0x0e
    174e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	9f 87       	std	Y+15, r25	; 0x0f
    1754:	8e 87       	std	Y+14, r24	; 0x0e
    1756:	ec 85       	ldd	r30, Y+12	; 0x0c
    1758:	fd 85       	ldd	r31, Y+13	; 0x0d
    175a:	00 82       	st	Z, r0
    175c:	8c 85       	ldd	r24, Y+12	; 0x0c
    175e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1760:	01 96       	adiw	r24, 0x01	; 1
    1762:	9d 87       	std	Y+13, r25	; 0x0d
    1764:	8c 87       	std	Y+12, r24	; 0x0c
    1766:	98 89       	ldd	r25, Y+16	; 0x10
    1768:	91 50       	subi	r25, 0x01	; 1
    176a:	98 8b       	std	Y+16, r25	; 0x10
    176c:	e8 89       	ldd	r30, Y+16	; 0x10
    176e:	ee 23       	and	r30, r30
    1770:	51 f7       	brne	.-44     	; 0x1746 <SevSeg_voidDisplayNumber+0x2a>
	if(number < 10 && number >= 0){
    1772:	8b 85       	ldd	r24, Y+11	; 0x0b
    1774:	8a 30       	cpi	r24, 0x0A	; 10
    1776:	70 f4       	brcc	.+28     	; 0x1794 <SevSeg_voidDisplayNumber+0x78>
		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[number]);
    1778:	8b 85       	ldd	r24, Y+11	; 0x0b
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	fc 01       	movw	r30, r24
    1784:	e2 0f       	add	r30, r18
    1786:	f3 1f       	adc	r31, r19
    1788:	80 81       	ld	r24, Z
    178a:	98 2f       	mov	r25, r24
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	69 2f       	mov	r22, r25
    1790:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
	}
}
    1794:	60 96       	adiw	r28, 0x10	; 16
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <SevSeg_voidSingleAutoCounter>:

void SevSeg_voidSingleAutoCounter(){
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	a1 97       	sbiw	r28, 0x21	; 33
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61

	s8 Sev_numbers[] = Sev_Array;
    17ba:	ce 01       	movw	r24, r28
    17bc:	43 96       	adiw	r24, 0x13	; 19
    17be:	9e 8f       	std	Y+30, r25	; 0x1e
    17c0:	8d 8f       	std	Y+29, r24	; 0x1d
    17c2:	e3 e9       	ldi	r30, 0x93	; 147
    17c4:	f1 e0       	ldi	r31, 0x01	; 1
    17c6:	f8 a3       	std	Y+32, r31	; 0x20
    17c8:	ef 8f       	std	Y+31, r30	; 0x1f
    17ca:	fa e0       	ldi	r31, 0x0A	; 10
    17cc:	f9 a3       	std	Y+33, r31	; 0x21
    17ce:	ef 8d       	ldd	r30, Y+31	; 0x1f
    17d0:	f8 a1       	ldd	r31, Y+32	; 0x20
    17d2:	00 80       	ld	r0, Z
    17d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17d6:	98 a1       	ldd	r25, Y+32	; 0x20
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	98 a3       	std	Y+32, r25	; 0x20
    17dc:	8f 8f       	std	Y+31, r24	; 0x1f
    17de:	ed 8d       	ldd	r30, Y+29	; 0x1d
    17e0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    17e2:	00 82       	st	Z, r0
    17e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	9e 8f       	std	Y+30, r25	; 0x1e
    17ec:	8d 8f       	std	Y+29, r24	; 0x1d
    17ee:	99 a1       	ldd	r25, Y+33	; 0x21
    17f0:	91 50       	subi	r25, 0x01	; 1
    17f2:	99 a3       	std	Y+33, r25	; 0x21
    17f4:	e9 a1       	ldd	r30, Y+33	; 0x21
    17f6:	ee 23       	and	r30, r30
    17f8:	51 f7       	brne	.-44     	; 0x17ce <SevSeg_voidSingleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    17fa:	1f 86       	std	Y+15, r1	; 0x0f
    17fc:	18 8a       	std	Y+16, r1	; 0x10
    17fe:	19 8a       	std	Y+17, r1	; 0x11
    1800:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    1802:	1f 86       	std	Y+15, r1	; 0x0f
    1804:	18 8a       	std	Y+16, r1	; 0x10
    1806:	19 8a       	std	Y+17, r1	; 0x11
    1808:	1a 8a       	std	Y+18, r1	; 0x12
    180a:	8d c0       	rjmp	.+282    	; 0x1926 <SevSeg_voidSingleAutoCounter+0x180>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
    180c:	8f 85       	ldd	r24, Y+15	; 0x0f
    180e:	98 89       	ldd	r25, Y+16	; 0x10
    1810:	a9 89       	ldd	r26, Y+17	; 0x11
    1812:	ba 89       	ldd	r27, Y+18	; 0x12
    1814:	9e 01       	movw	r18, r28
    1816:	2d 5e       	subi	r18, 0xED	; 237
    1818:	3f 4f       	sbci	r19, 0xFF	; 255
    181a:	f9 01       	movw	r30, r18
    181c:	e8 0f       	add	r30, r24
    181e:	f9 1f       	adc	r31, r25
    1820:	80 81       	ld	r24, Z
    1822:	98 2f       	mov	r25, r24
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	69 2f       	mov	r22, r25
    1828:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	a0 e2       	ldi	r26, 0x20	; 32
    1832:	b1 e4       	ldi	r27, 0x41	; 65
    1834:	8b 87       	std	Y+11, r24	; 0x0b
    1836:	9c 87       	std	Y+12, r25	; 0x0c
    1838:	ad 87       	std	Y+13, r26	; 0x0d
    183a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183c:	6b 85       	ldd	r22, Y+11	; 0x0b
    183e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1840:	8d 85       	ldd	r24, Y+13	; 0x0d
    1842:	9e 85       	ldd	r25, Y+14	; 0x0e
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	4a e7       	ldi	r20, 0x7A	; 122
    184a:	55 e4       	ldi	r21, 0x45	; 69
    184c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1850:	dc 01       	movw	r26, r24
    1852:	cb 01       	movw	r24, r22
    1854:	8f 83       	std	Y+7, r24	; 0x07
    1856:	98 87       	std	Y+8, r25	; 0x08
    1858:	a9 87       	std	Y+9, r26	; 0x09
    185a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    185c:	6f 81       	ldd	r22, Y+7	; 0x07
    185e:	78 85       	ldd	r23, Y+8	; 0x08
    1860:	89 85       	ldd	r24, Y+9	; 0x09
    1862:	9a 85       	ldd	r25, Y+10	; 0x0a
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e8       	ldi	r20, 0x80	; 128
    186a:	5f e3       	ldi	r21, 0x3F	; 63
    186c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1870:	88 23       	and	r24, r24
    1872:	2c f4       	brge	.+10     	; 0x187e <SevSeg_voidSingleAutoCounter+0xd8>
		__ticks = 1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	3f c0       	rjmp	.+126    	; 0x18fc <SevSeg_voidSingleAutoCounter+0x156>
	else if (__tmp > 65535)
    187e:	6f 81       	ldd	r22, Y+7	; 0x07
    1880:	78 85       	ldd	r23, Y+8	; 0x08
    1882:	89 85       	ldd	r24, Y+9	; 0x09
    1884:	9a 85       	ldd	r25, Y+10	; 0x0a
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	3f ef       	ldi	r19, 0xFF	; 255
    188a:	4f e7       	ldi	r20, 0x7F	; 127
    188c:	57 e4       	ldi	r21, 0x47	; 71
    188e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1892:	18 16       	cp	r1, r24
    1894:	4c f5       	brge	.+82     	; 0x18e8 <SevSeg_voidSingleAutoCounter+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1896:	6b 85       	ldd	r22, Y+11	; 0x0b
    1898:	7c 85       	ldd	r23, Y+12	; 0x0c
    189a:	8d 85       	ldd	r24, Y+13	; 0x0d
    189c:	9e 85       	ldd	r25, Y+14	; 0x0e
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	40 e2       	ldi	r20, 0x20	; 32
    18a4:	51 e4       	ldi	r21, 0x41	; 65
    18a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	9e 83       	std	Y+6, r25	; 0x06
    18bc:	8d 83       	std	Y+5, r24	; 0x05
    18be:	0f c0       	rjmp	.+30     	; 0x18de <SevSeg_voidSingleAutoCounter+0x138>
    18c0:	80 e9       	ldi	r24, 0x90	; 144
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <SevSeg_voidSingleAutoCounter+0x126>
    18d0:	9c 83       	std	Y+4, r25	; 0x04
    18d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d4:	8d 81       	ldd	r24, Y+5	; 0x05
    18d6:	9e 81       	ldd	r25, Y+6	; 0x06
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	9e 83       	std	Y+6, r25	; 0x06
    18dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18de:	8d 81       	ldd	r24, Y+5	; 0x05
    18e0:	9e 81       	ldd	r25, Y+6	; 0x06
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	69 f7       	brne	.-38     	; 0x18c0 <SevSeg_voidSingleAutoCounter+0x11a>
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <SevSeg_voidSingleAutoCounter+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ea:	78 85       	ldd	r23, Y+8	; 0x08
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	9e 83       	std	Y+6, r25	; 0x06
    18fa:	8d 83       	std	Y+5, r24	; 0x05
    18fc:	8d 81       	ldd	r24, Y+5	; 0x05
    18fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <SevSeg_voidSingleAutoCounter+0x162>
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
void SevSeg_voidSingleAutoCounter(){

	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;

	for(Local_Counter1 =0;Local_Counter1 <10; Local_Counter1++){
    1910:	8f 85       	ldd	r24, Y+15	; 0x0f
    1912:	98 89       	ldd	r25, Y+16	; 0x10
    1914:	a9 89       	ldd	r26, Y+17	; 0x11
    1916:	ba 89       	ldd	r27, Y+18	; 0x12
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	a1 1d       	adc	r26, r1
    191c:	b1 1d       	adc	r27, r1
    191e:	8f 87       	std	Y+15, r24	; 0x0f
    1920:	98 8b       	std	Y+16, r25	; 0x10
    1922:	a9 8b       	std	Y+17, r26	; 0x11
    1924:	ba 8b       	std	Y+18, r27	; 0x12
    1926:	8f 85       	ldd	r24, Y+15	; 0x0f
    1928:	98 89       	ldd	r25, Y+16	; 0x10
    192a:	a9 89       	ldd	r26, Y+17	; 0x11
    192c:	ba 89       	ldd	r27, Y+18	; 0x12
    192e:	8a 30       	cpi	r24, 0x0A	; 10
    1930:	91 05       	cpc	r25, r1
    1932:	a1 05       	cpc	r26, r1
    1934:	b1 05       	cpc	r27, r1
    1936:	0c f4       	brge	.+2      	; 0x193a <SevSeg_voidSingleAutoCounter+0x194>
    1938:	69 cf       	rjmp	.-302    	; 0x180c <SevSeg_voidSingleAutoCounter+0x66>

		DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter1]);
		_delay_ms(Sev_DELAY);
	}

}
    193a:	a1 96       	adiw	r28, 0x21	; 33
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	08 95       	ret

0000194c <SevSeg_voidDoubleAutoCounter>:

void SevSeg_voidDoubleAutoCounter(){
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	a5 97       	sbiw	r28, 0x25	; 37
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
	s8 Sev_numbers[] = Sev_Array;
    1960:	ce 01       	movw	r24, r28
    1962:	47 96       	adiw	r24, 0x17	; 23
    1964:	9a a3       	std	Y+34, r25	; 0x22
    1966:	89 a3       	std	Y+33, r24	; 0x21
    1968:	ed e9       	ldi	r30, 0x9D	; 157
    196a:	f1 e0       	ldi	r31, 0x01	; 1
    196c:	fc a3       	std	Y+36, r31	; 0x24
    196e:	eb a3       	std	Y+35, r30	; 0x23
    1970:	fa e0       	ldi	r31, 0x0A	; 10
    1972:	fd a3       	std	Y+37, r31	; 0x25
    1974:	eb a1       	ldd	r30, Y+35	; 0x23
    1976:	fc a1       	ldd	r31, Y+36	; 0x24
    1978:	00 80       	ld	r0, Z
    197a:	8b a1       	ldd	r24, Y+35	; 0x23
    197c:	9c a1       	ldd	r25, Y+36	; 0x24
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	9c a3       	std	Y+36, r25	; 0x24
    1982:	8b a3       	std	Y+35, r24	; 0x23
    1984:	e9 a1       	ldd	r30, Y+33	; 0x21
    1986:	fa a1       	ldd	r31, Y+34	; 0x22
    1988:	00 82       	st	Z, r0
    198a:	89 a1       	ldd	r24, Y+33	; 0x21
    198c:	9a a1       	ldd	r25, Y+34	; 0x22
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	9a a3       	std	Y+34, r25	; 0x22
    1992:	89 a3       	std	Y+33, r24	; 0x21
    1994:	9d a1       	ldd	r25, Y+37	; 0x25
    1996:	91 50       	subi	r25, 0x01	; 1
    1998:	9d a3       	std	Y+37, r25	; 0x25
    199a:	ed a1       	ldd	r30, Y+37	; 0x25
    199c:	ee 23       	and	r30, r30
    199e:	51 f7       	brne	.-44     	; 0x1974 <SevSeg_voidDoubleAutoCounter+0x28>
	s32 Local_Counter1 = 0;
    19a0:	1b 8a       	std	Y+19, r1	; 0x13
    19a2:	1c 8a       	std	Y+20, r1	; 0x14
    19a4:	1d 8a       	std	Y+21, r1	; 0x15
    19a6:	1e 8a       	std	Y+22, r1	; 0x16
	s32 Local_Counter2 = 0;
    19a8:	1f 86       	std	Y+15, r1	; 0x0f
    19aa:	18 8a       	std	Y+16, r1	; 0x10
    19ac:	19 8a       	std	Y+17, r1	; 0x11
    19ae:	1a 8a       	std	Y+18, r1	; 0x12

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    19b0:	1b 8a       	std	Y+19, r1	; 0x13
    19b2:	1c 8a       	std	Y+20, r1	; 0x14
    19b4:	1d 8a       	std	Y+21, r1	; 0x15
    19b6:	1e 8a       	std	Y+22, r1	; 0x16
    19b8:	b7 c0       	rjmp	.+366    	; 0x1b28 <SevSeg_voidDoubleAutoCounter+0x1dc>

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    19ba:	8b 89       	ldd	r24, Y+19	; 0x13
    19bc:	9c 89       	ldd	r25, Y+20	; 0x14
    19be:	ad 89       	ldd	r26, Y+21	; 0x15
    19c0:	be 89       	ldd	r27, Y+22	; 0x16
    19c2:	9e 01       	movw	r18, r28
    19c4:	29 5e       	subi	r18, 0xE9	; 233
    19c6:	3f 4f       	sbci	r19, 0xFF	; 255
    19c8:	f9 01       	movw	r30, r18
    19ca:	e8 0f       	add	r30, r24
    19cc:	f9 1f       	adc	r31, r25
    19ce:	80 81       	ld	r24, Z
    19d0:	98 2f       	mov	r25, r24
    19d2:	84 e0       	ldi	r24, 0x04	; 4
    19d4:	69 2f       	mov	r22, r25
    19d6:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    19da:	1f 86       	std	Y+15, r1	; 0x0f
    19dc:	18 8a       	std	Y+16, r1	; 0x10
    19de:	19 8a       	std	Y+17, r1	; 0x11
    19e0:	1a 8a       	std	Y+18, r1	; 0x12
    19e2:	8d c0       	rjmp	.+282    	; 0x1afe <SevSeg_voidDoubleAutoCounter+0x1b2>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    19e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e6:	98 89       	ldd	r25, Y+16	; 0x10
    19e8:	a9 89       	ldd	r26, Y+17	; 0x11
    19ea:	ba 89       	ldd	r27, Y+18	; 0x12
    19ec:	9e 01       	movw	r18, r28
    19ee:	29 5e       	subi	r18, 0xE9	; 233
    19f0:	3f 4f       	sbci	r19, 0xFF	; 255
    19f2:	f9 01       	movw	r30, r18
    19f4:	e8 0f       	add	r30, r24
    19f6:	f9 1f       	adc	r31, r25
    19f8:	80 81       	ld	r24, Z
    19fa:	98 2f       	mov	r25, r24
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	69 2f       	mov	r22, r25
    1a00:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a0 e2       	ldi	r26, 0x20	; 32
    1a0a:	b1 e4       	ldi	r27, 0x41	; 65
    1a0c:	8b 87       	std	Y+11, r24	; 0x0b
    1a0e:	9c 87       	std	Y+12, r25	; 0x0c
    1a10:	ad 87       	std	Y+13, r26	; 0x0d
    1a12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	4a e7       	ldi	r20, 0x7A	; 122
    1a22:	55 e4       	ldi	r21, 0x45	; 69
    1a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	8f 83       	std	Y+7, r24	; 0x07
    1a2e:	98 87       	std	Y+8, r25	; 0x08
    1a30:	a9 87       	std	Y+9, r26	; 0x09
    1a32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a34:	6f 81       	ldd	r22, Y+7	; 0x07
    1a36:	78 85       	ldd	r23, Y+8	; 0x08
    1a38:	89 85       	ldd	r24, Y+9	; 0x09
    1a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	40 e8       	ldi	r20, 0x80	; 128
    1a42:	5f e3       	ldi	r21, 0x3F	; 63
    1a44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a48:	88 23       	and	r24, r24
    1a4a:	2c f4       	brge	.+10     	; 0x1a56 <SevSeg_voidDoubleAutoCounter+0x10a>
		__ticks = 1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	9e 83       	std	Y+6, r25	; 0x06
    1a52:	8d 83       	std	Y+5, r24	; 0x05
    1a54:	3f c0       	rjmp	.+126    	; 0x1ad4 <SevSeg_voidDoubleAutoCounter+0x188>
	else if (__tmp > 65535)
    1a56:	6f 81       	ldd	r22, Y+7	; 0x07
    1a58:	78 85       	ldd	r23, Y+8	; 0x08
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	3f ef       	ldi	r19, 0xFF	; 255
    1a62:	4f e7       	ldi	r20, 0x7F	; 127
    1a64:	57 e4       	ldi	r21, 0x47	; 71
    1a66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a6a:	18 16       	cp	r1, r24
    1a6c:	4c f5       	brge	.+82     	; 0x1ac0 <SevSeg_voidDoubleAutoCounter+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e2       	ldi	r20, 0x20	; 32
    1a7c:	51 e4       	ldi	r21, 0x41	; 65
    1a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    1a96:	0f c0       	rjmp	.+30     	; 0x1ab6 <SevSeg_voidDoubleAutoCounter+0x16a>
    1a98:	80 e9       	ldi	r24, 0x90	; 144
    1a9a:	91 e0       	ldi	r25, 0x01	; 1
    1a9c:	9c 83       	std	Y+4, r25	; 0x04
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <SevSeg_voidDoubleAutoCounter+0x158>
    1aa8:	9c 83       	std	Y+4, r25	; 0x04
    1aaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	69 f7       	brne	.-38     	; 0x1a98 <SevSeg_voidDoubleAutoCounter+0x14c>
    1abe:	14 c0       	rjmp	.+40     	; 0x1ae8 <SevSeg_voidDoubleAutoCounter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	9a 83       	std	Y+2, r25	; 0x02
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <SevSeg_voidDoubleAutoCounter+0x194>
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){

		DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

		for(Local_Counter2 =0;Local_Counter2 <10; Local_Counter2++){
    1ae8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aea:	98 89       	ldd	r25, Y+16	; 0x10
    1aec:	a9 89       	ldd	r26, Y+17	; 0x11
    1aee:	ba 89       	ldd	r27, Y+18	; 0x12
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	a1 1d       	adc	r26, r1
    1af4:	b1 1d       	adc	r27, r1
    1af6:	8f 87       	std	Y+15, r24	; 0x0f
    1af8:	98 8b       	std	Y+16, r25	; 0x10
    1afa:	a9 8b       	std	Y+17, r26	; 0x11
    1afc:	ba 8b       	std	Y+18, r27	; 0x12
    1afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b00:	98 89       	ldd	r25, Y+16	; 0x10
    1b02:	a9 89       	ldd	r26, Y+17	; 0x11
    1b04:	ba 89       	ldd	r27, Y+18	; 0x12
    1b06:	8a 30       	cpi	r24, 0x0A	; 10
    1b08:	91 05       	cpc	r25, r1
    1b0a:	a1 05       	cpc	r26, r1
    1b0c:	b1 05       	cpc	r27, r1
    1b0e:	0c f4       	brge	.+2      	; 0x1b12 <SevSeg_voidDoubleAutoCounter+0x1c6>
    1b10:	69 cf       	rjmp	.-302    	; 0x19e4 <SevSeg_voidDoubleAutoCounter+0x98>
void SevSeg_voidDoubleAutoCounter(){
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter1 = 0;
	s32 Local_Counter2 = 0;

	for(Local_Counter1 =0; Local_Counter1 < 10; Local_Counter1++){
    1b12:	8b 89       	ldd	r24, Y+19	; 0x13
    1b14:	9c 89       	ldd	r25, Y+20	; 0x14
    1b16:	ad 89       	ldd	r26, Y+21	; 0x15
    1b18:	be 89       	ldd	r27, Y+22	; 0x16
    1b1a:	01 96       	adiw	r24, 0x01	; 1
    1b1c:	a1 1d       	adc	r26, r1
    1b1e:	b1 1d       	adc	r27, r1
    1b20:	8b 8b       	std	Y+19, r24	; 0x13
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	ad 8b       	std	Y+21, r26	; 0x15
    1b26:	be 8b       	std	Y+22, r27	; 0x16
    1b28:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2c:	ad 89       	ldd	r26, Y+21	; 0x15
    1b2e:	be 89       	ldd	r27, Y+22	; 0x16
    1b30:	8a 30       	cpi	r24, 0x0A	; 10
    1b32:	91 05       	cpc	r25, r1
    1b34:	a1 05       	cpc	r26, r1
    1b36:	b1 05       	cpc	r27, r1
    1b38:	0c f4       	brge	.+2      	; 0x1b3c <SevSeg_voidDoubleAutoCounter+0x1f0>
    1b3a:	3f cf       	rjmp	.-386    	; 0x19ba <SevSeg_voidDoubleAutoCounter+0x6e>

			DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
			_delay_ms(Sev_DELAY);
		}
	}
}
    1b3c:	a5 96       	adiw	r28, 0x25	; 37
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <SevSeg_voidSingleRangeCounter>:

void SevSeg_voidSingleRangeCounter(s8 start, s8 end){
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	e1 97       	sbiw	r28, 0x31	; 49
    1b58:	0f b6       	in	r0, 0x3f	; 63
    1b5a:	f8 94       	cli
    1b5c:	de bf       	out	0x3e, r29	; 62
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	cd bf       	out	0x3d, r28	; 61
    1b62:	8b a7       	std	Y+43, r24	; 0x2b
    1b64:	6c a7       	std	Y+44, r22	; 0x2c
	s8 Sev_numbers[] = Sev_Array;
    1b66:	ce 01       	movw	r24, r28
    1b68:	81 96       	adiw	r24, 0x21	; 33
    1b6a:	9e a7       	std	Y+46, r25	; 0x2e
    1b6c:	8d a7       	std	Y+45, r24	; 0x2d
    1b6e:	e7 ea       	ldi	r30, 0xA7	; 167
    1b70:	f1 e0       	ldi	r31, 0x01	; 1
    1b72:	f8 ab       	std	Y+48, r31	; 0x30
    1b74:	ef a7       	std	Y+47, r30	; 0x2f
    1b76:	fa e0       	ldi	r31, 0x0A	; 10
    1b78:	f9 ab       	std	Y+49, r31	; 0x31
    1b7a:	ef a5       	ldd	r30, Y+47	; 0x2f
    1b7c:	f8 a9       	ldd	r31, Y+48	; 0x30
    1b7e:	00 80       	ld	r0, Z
    1b80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b82:	98 a9       	ldd	r25, Y+48	; 0x30
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	98 ab       	std	Y+48, r25	; 0x30
    1b88:	8f a7       	std	Y+47, r24	; 0x2f
    1b8a:	ed a5       	ldd	r30, Y+45	; 0x2d
    1b8c:	fe a5       	ldd	r31, Y+46	; 0x2e
    1b8e:	00 82       	st	Z, r0
    1b90:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b92:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b94:	01 96       	adiw	r24, 0x01	; 1
    1b96:	9e a7       	std	Y+46, r25	; 0x2e
    1b98:	8d a7       	std	Y+45, r24	; 0x2d
    1b9a:	99 a9       	ldd	r25, Y+49	; 0x31
    1b9c:	91 50       	subi	r25, 0x01	; 1
    1b9e:	99 ab       	std	Y+49, r25	; 0x31
    1ba0:	e9 a9       	ldd	r30, Y+49	; 0x31
    1ba2:	ee 23       	and	r30, r30
    1ba4:	51 f7       	brne	.-44     	; 0x1b7a <SevSeg_voidSingleRangeCounter+0x2c>
	s32 Local_Counter2 = 0;
    1ba6:	1d 8e       	std	Y+29, r1	; 0x1d
    1ba8:	1e 8e       	std	Y+30, r1	; 0x1e
    1baa:	1f 8e       	std	Y+31, r1	; 0x1f
    1bac:	18 a2       	std	Y+32, r1	; 0x20
	if(start >= 0 && start < 10 && end < 10 && end >= 0){
    1bae:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb0:	88 23       	and	r24, r24
    1bb2:	0c f4       	brge	.+2      	; 0x1bb6 <SevSeg_voidSingleRangeCounter+0x68>
    1bb4:	64 c1       	rjmp	.+712    	; 0x1e7e <SevSeg_voidSingleRangeCounter+0x330>
    1bb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb8:	8a 30       	cpi	r24, 0x0A	; 10
    1bba:	0c f0       	brlt	.+2      	; 0x1bbe <SevSeg_voidSingleRangeCounter+0x70>
    1bbc:	60 c1       	rjmp	.+704    	; 0x1e7e <SevSeg_voidSingleRangeCounter+0x330>
    1bbe:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bc0:	8a 30       	cpi	r24, 0x0A	; 10
    1bc2:	0c f0       	brlt	.+2      	; 0x1bc6 <SevSeg_voidSingleRangeCounter+0x78>
    1bc4:	5c c1       	rjmp	.+696    	; 0x1e7e <SevSeg_voidSingleRangeCounter+0x330>
    1bc6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bc8:	88 23       	and	r24, r24
    1bca:	0c f4       	brge	.+2      	; 0x1bce <SevSeg_voidSingleRangeCounter+0x80>
    1bcc:	58 c1       	rjmp	.+688    	; 0x1e7e <SevSeg_voidSingleRangeCounter+0x330>

		if(start < end){
    1bce:	9b a5       	ldd	r25, Y+43	; 0x2b
    1bd0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bd2:	98 17       	cp	r25, r24
    1bd4:	0c f0       	brlt	.+2      	; 0x1bd8 <SevSeg_voidSingleRangeCounter+0x8a>
    1bd6:	aa c0       	rjmp	.+340    	; 0x1d2c <SevSeg_voidSingleRangeCounter+0x1de>
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    1bd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bda:	99 27       	eor	r25, r25
    1bdc:	87 fd       	sbrc	r24, 7
    1bde:	90 95       	com	r25
    1be0:	a9 2f       	mov	r26, r25
    1be2:	b9 2f       	mov	r27, r25
    1be4:	8d 8f       	std	Y+29, r24	; 0x1d
    1be6:	9e 8f       	std	Y+30, r25	; 0x1e
    1be8:	af 8f       	std	Y+31, r26	; 0x1f
    1bea:	b8 a3       	std	Y+32, r27	; 0x20
    1bec:	8d c0       	rjmp	.+282    	; 0x1d08 <SevSeg_voidSingleRangeCounter+0x1ba>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1bee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bf0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bf2:	af 8d       	ldd	r26, Y+31	; 0x1f
    1bf4:	b8 a1       	ldd	r27, Y+32	; 0x20
    1bf6:	9e 01       	movw	r18, r28
    1bf8:	2f 5d       	subi	r18, 0xDF	; 223
    1bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfc:	f9 01       	movw	r30, r18
    1bfe:	e8 0f       	add	r30, r24
    1c00:	f9 1f       	adc	r31, r25
    1c02:	80 81       	ld	r24, Z
    1c04:	98 2f       	mov	r25, r24
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	69 2f       	mov	r22, r25
    1c0a:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e2       	ldi	r26, 0x20	; 32
    1c14:	b1 e4       	ldi	r27, 0x41	; 65
    1c16:	89 8f       	std	Y+25, r24	; 0x19
    1c18:	9a 8f       	std	Y+26, r25	; 0x1a
    1c1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a e7       	ldi	r20, 0x7A	; 122
    1c2c:	55 e4       	ldi	r21, 0x45	; 69
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	8d 8b       	std	Y+21, r24	; 0x15
    1c38:	9e 8b       	std	Y+22, r25	; 0x16
    1c3a:	af 8b       	std	Y+23, r26	; 0x17
    1c3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c40:	7e 89       	ldd	r23, Y+22	; 0x16
    1c42:	8f 89       	ldd	r24, Y+23	; 0x17
    1c44:	98 8d       	ldd	r25, Y+24	; 0x18
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <SevSeg_voidSingleRangeCounter+0x112>
		__ticks = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9c 8b       	std	Y+20, r25	; 0x14
    1c5c:	8b 8b       	std	Y+19, r24	; 0x13
    1c5e:	3f c0       	rjmp	.+126    	; 0x1cde <SevSeg_voidSingleRangeCounter+0x190>
	else if (__tmp > 65535)
    1c60:	6d 89       	ldd	r22, Y+21	; 0x15
    1c62:	7e 89       	ldd	r23, Y+22	; 0x16
    1c64:	8f 89       	ldd	r24, Y+23	; 0x17
    1c66:	98 8d       	ldd	r25, Y+24	; 0x18
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	3f ef       	ldi	r19, 0xFF	; 255
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	57 e4       	ldi	r21, 0x47	; 71
    1c70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c74:	18 16       	cp	r1, r24
    1c76:	4c f5       	brge	.+82     	; 0x1cca <SevSeg_voidSingleRangeCounter+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c78:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e2       	ldi	r20, 0x20	; 32
    1c86:	51 e4       	ldi	r21, 0x41	; 65
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9c 8b       	std	Y+20, r25	; 0x14
    1c9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <SevSeg_voidSingleRangeCounter+0x172>
    1ca2:	80 e9       	ldi	r24, 0x90	; 144
    1ca4:	91 e0       	ldi	r25, 0x01	; 1
    1ca6:	9a 8b       	std	Y+18, r25	; 0x12
    1ca8:	89 8b       	std	Y+17, r24	; 0x11
    1caa:	89 89       	ldd	r24, Y+17	; 0x11
    1cac:	9a 89       	ldd	r25, Y+18	; 0x12
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <SevSeg_voidSingleRangeCounter+0x160>
    1cb2:	9a 8b       	std	Y+18, r25	; 0x12
    1cb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	9c 8b       	std	Y+20, r25	; 0x14
    1cbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <SevSeg_voidSingleRangeCounter+0x154>
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <SevSeg_voidSingleRangeCounter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cce:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9c 8b       	std	Y+20, r25	; 0x14
    1cdc:	8b 8b       	std	Y+19, r24	; 0x13
    1cde:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce2:	98 8b       	std	Y+16, r25	; 0x10
    1ce4:	8f 87       	std	Y+15, r24	; 0x0f
    1ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce8:	98 89       	ldd	r25, Y+16	; 0x10
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <SevSeg_voidSingleRangeCounter+0x19c>
    1cee:	98 8b       	std	Y+16, r25	; 0x10
    1cf0:	8f 87       	std	Y+15, r24	; 0x0f
	s8 Sev_numbers[] = Sev_Array;
	s32 Local_Counter2 = 0;
	if(start >= 0 && start < 10 && end < 10 && end >= 0){

		if(start < end){
			for(Local_Counter2 = start; Local_Counter2 <end; Local_Counter2++){
    1cf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cf6:	af 8d       	ldd	r26, Y+31	; 0x1f
    1cf8:	b8 a1       	ldd	r27, Y+32	; 0x20
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	a1 1d       	adc	r26, r1
    1cfe:	b1 1d       	adc	r27, r1
    1d00:	8d 8f       	std	Y+29, r24	; 0x1d
    1d02:	9e 8f       	std	Y+30, r25	; 0x1e
    1d04:	af 8f       	std	Y+31, r26	; 0x1f
    1d06:	b8 a3       	std	Y+32, r27	; 0x20
    1d08:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	33 27       	eor	r19, r19
    1d0e:	27 fd       	sbrc	r18, 7
    1d10:	30 95       	com	r19
    1d12:	43 2f       	mov	r20, r19
    1d14:	53 2f       	mov	r21, r19
    1d16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d1a:	af 8d       	ldd	r26, Y+31	; 0x1f
    1d1c:	b8 a1       	ldd	r27, Y+32	; 0x20
    1d1e:	82 17       	cp	r24, r18
    1d20:	93 07       	cpc	r25, r19
    1d22:	a4 07       	cpc	r26, r20
    1d24:	b5 07       	cpc	r27, r21
    1d26:	0c f4       	brge	.+2      	; 0x1d2a <SevSeg_voidSingleRangeCounter+0x1dc>
    1d28:	62 cf       	rjmp	.-316    	; 0x1bee <SevSeg_voidSingleRangeCounter+0xa0>
    1d2a:	a9 c0       	rjmp	.+338    	; 0x1e7e <SevSeg_voidSingleRangeCounter+0x330>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    1d2c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d2e:	99 27       	eor	r25, r25
    1d30:	87 fd       	sbrc	r24, 7
    1d32:	90 95       	com	r25
    1d34:	a9 2f       	mov	r26, r25
    1d36:	b9 2f       	mov	r27, r25
    1d38:	8d 8f       	std	Y+29, r24	; 0x1d
    1d3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3c:	af 8f       	std	Y+31, r26	; 0x1f
    1d3e:	b8 a3       	std	Y+32, r27	; 0x20
    1d40:	8d c0       	rjmp	.+282    	; 0x1e5c <SevSeg_voidSingleRangeCounter+0x30e>

				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1d42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d46:	af 8d       	ldd	r26, Y+31	; 0x1f
    1d48:	b8 a1       	ldd	r27, Y+32	; 0x20
    1d4a:	9e 01       	movw	r18, r28
    1d4c:	2f 5d       	subi	r18, 0xDF	; 223
    1d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d50:	f9 01       	movw	r30, r18
    1d52:	e8 0f       	add	r30, r24
    1d54:	f9 1f       	adc	r31, r25
    1d56:	80 81       	ld	r24, Z
    1d58:	98 2f       	mov	r25, r24
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	69 2f       	mov	r22, r25
    1d5e:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a0 e2       	ldi	r26, 0x20	; 32
    1d68:	b1 e4       	ldi	r27, 0x41	; 65
    1d6a:	8b 87       	std	Y+11, r24	; 0x0b
    1d6c:	9c 87       	std	Y+12, r25	; 0x0c
    1d6e:	ad 87       	std	Y+13, r26	; 0x0d
    1d70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a e7       	ldi	r20, 0x7A	; 122
    1d80:	55 e4       	ldi	r21, 0x45	; 69
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8f 83       	std	Y+7, r24	; 0x07
    1d8c:	98 87       	std	Y+8, r25	; 0x08
    1d8e:	a9 87       	std	Y+9, r26	; 0x09
    1d90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d92:	6f 81       	ldd	r22, Y+7	; 0x07
    1d94:	78 85       	ldd	r23, Y+8	; 0x08
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <SevSeg_voidSingleRangeCounter+0x266>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9e 83       	std	Y+6, r25	; 0x06
    1db0:	8d 83       	std	Y+5, r24	; 0x05
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <SevSeg_voidSingleRangeCounter+0x2e4>
	else if (__tmp > 65535)
    1db4:	6f 81       	ldd	r22, Y+7	; 0x07
    1db6:	78 85       	ldd	r23, Y+8	; 0x08
    1db8:	89 85       	ldd	r24, Y+9	; 0x09
    1dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <SevSeg_voidSingleRangeCounter+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <SevSeg_voidSingleRangeCounter+0x2c6>
    1df6:	80 e9       	ldi	r24, 0x90	; 144
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	9c 83       	std	Y+4, r25	; 0x04
    1dfc:	8b 83       	std	Y+3, r24	; 0x03
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <SevSeg_voidSingleRangeCounter+0x2b4>
    1e06:	9c 83       	std	Y+4, r25	; 0x04
    1e08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9e 83       	std	Y+6, r25	; 0x06
    1e12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <SevSeg_voidSingleRangeCounter+0x2a8>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <SevSeg_voidSingleRangeCounter+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e20:	78 85       	ldd	r23, Y+8	; 0x08
    1e22:	89 85       	ldd	r24, Y+9	; 0x09
    1e24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
    1e32:	8d 81       	ldd	r24, Y+5	; 0x05
    1e34:	9e 81       	ldd	r25, Y+6	; 0x06
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <SevSeg_voidSingleRangeCounter+0x2f0>
    1e42:	9a 83       	std	Y+2, r25	; 0x02
    1e44:	89 83       	std	Y+1, r24	; 0x01
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
		else{
			for(Local_Counter2 = start; Local_Counter2 >= end; Local_Counter2--){
    1e46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e4a:	af 8d       	ldd	r26, Y+31	; 0x1f
    1e4c:	b8 a1       	ldd	r27, Y+32	; 0x20
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	a1 09       	sbc	r26, r1
    1e52:	b1 09       	sbc	r27, r1
    1e54:	8d 8f       	std	Y+29, r24	; 0x1d
    1e56:	9e 8f       	std	Y+30, r25	; 0x1e
    1e58:	af 8f       	std	Y+31, r26	; 0x1f
    1e5a:	b8 a3       	std	Y+32, r27	; 0x20
    1e5c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e5e:	28 2f       	mov	r18, r24
    1e60:	33 27       	eor	r19, r19
    1e62:	27 fd       	sbrc	r18, 7
    1e64:	30 95       	com	r19
    1e66:	43 2f       	mov	r20, r19
    1e68:	53 2f       	mov	r21, r19
    1e6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e6e:	af 8d       	ldd	r26, Y+31	; 0x1f
    1e70:	b8 a1       	ldd	r27, Y+32	; 0x20
    1e72:	82 17       	cp	r24, r18
    1e74:	93 07       	cpc	r25, r19
    1e76:	a4 07       	cpc	r26, r20
    1e78:	b5 07       	cpc	r27, r21
    1e7a:	0c f0       	brlt	.+2      	; 0x1e7e <SevSeg_voidSingleRangeCounter+0x330>
    1e7c:	62 cf       	rjmp	.-316    	; 0x1d42 <SevSeg_voidSingleRangeCounter+0x1f4>
				DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
				_delay_ms(Sev_DELAY);
			}
		}
	}
}
    1e7e:	e1 96       	adiw	r28, 0x31	; 49
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <SevSeg_voidDoubleRangeCounter>:

void SevSeg_voidDoubleRangeCounter(s8 start,s8 end){
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	e9 97       	sbiw	r28, 0x39	; 57
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	8b ab       	std	Y+51, r24	; 0x33
    1ea6:	6c ab       	std	Y+52, r22	; 0x34
	s8 Sev_numbers[] = Sev_Array;
    1ea8:	ce 01       	movw	r24, r28
    1eaa:	89 96       	adiw	r24, 0x29	; 41
    1eac:	9e ab       	std	Y+54, r25	; 0x36
    1eae:	8d ab       	std	Y+53, r24	; 0x35
    1eb0:	e1 eb       	ldi	r30, 0xB1	; 177
    1eb2:	f1 e0       	ldi	r31, 0x01	; 1
    1eb4:	f8 af       	std	Y+56, r31	; 0x38
    1eb6:	ef ab       	std	Y+55, r30	; 0x37
    1eb8:	fa e0       	ldi	r31, 0x0A	; 10
    1eba:	f9 af       	std	Y+57, r31	; 0x39
    1ebc:	ef a9       	ldd	r30, Y+55	; 0x37
    1ebe:	f8 ad       	ldd	r31, Y+56	; 0x38
    1ec0:	00 80       	ld	r0, Z
    1ec2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ec4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	98 af       	std	Y+56, r25	; 0x38
    1eca:	8f ab       	std	Y+55, r24	; 0x37
    1ecc:	ed a9       	ldd	r30, Y+53	; 0x35
    1ece:	fe a9       	ldd	r31, Y+54	; 0x36
    1ed0:	00 82       	st	Z, r0
    1ed2:	8d a9       	ldd	r24, Y+53	; 0x35
    1ed4:	9e a9       	ldd	r25, Y+54	; 0x36
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	9e ab       	std	Y+54, r25	; 0x36
    1eda:	8d ab       	std	Y+53, r24	; 0x35
    1edc:	99 ad       	ldd	r25, Y+57	; 0x39
    1ede:	91 50       	subi	r25, 0x01	; 1
    1ee0:	99 af       	std	Y+57, r25	; 0x39
    1ee2:	e9 ad       	ldd	r30, Y+57	; 0x39
    1ee4:	ee 23       	and	r30, r30
    1ee6:	51 f7       	brne	.-44     	; 0x1ebc <SevSeg_voidDoubleRangeCounter+0x2c>

	s8 Local_SevSegTwoStart = start / 10;
    1ee8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eea:	9a e0       	ldi	r25, 0x0A	; 10
    1eec:	69 2f       	mov	r22, r25
    1eee:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    1ef2:	88 a7       	std	Y+40, r24	; 0x28
	s8 Local_SevSegOneStart = start % 10;
    1ef4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef6:	9a e0       	ldi	r25, 0x0A	; 10
    1ef8:	69 2f       	mov	r22, r25
    1efa:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    1efe:	89 2f       	mov	r24, r25
    1f00:	8f a3       	std	Y+39, r24	; 0x27

	s8 Local_SevSegTwoEnd = end / 10;
    1f02:	8c a9       	ldd	r24, Y+52	; 0x34
    1f04:	9a e0       	ldi	r25, 0x0A	; 10
    1f06:	69 2f       	mov	r22, r25
    1f08:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    1f0c:	8e a3       	std	Y+38, r24	; 0x26
	s8 Local_SevSegOneEnd = end % 10;
    1f0e:	8c a9       	ldd	r24, Y+52	; 0x34
    1f10:	9a e0       	ldi	r25, 0x0A	; 10
    1f12:	69 2f       	mov	r22, r25
    1f14:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    1f18:	89 2f       	mov	r24, r25
    1f1a:	8d a3       	std	Y+37, r24	; 0x25

	s32 Local_Counter1 = 0;
    1f1c:	19 a2       	std	Y+33, r1	; 0x21
    1f1e:	1a a2       	std	Y+34, r1	; 0x22
    1f20:	1b a2       	std	Y+35, r1	; 0x23
    1f22:	1c a2       	std	Y+36, r1	; 0x24
	s32 Local_Counter2 = 0;
    1f24:	1d 8e       	std	Y+29, r1	; 0x1d
    1f26:	1e 8e       	std	Y+30, r1	; 0x1e
    1f28:	1f 8e       	std	Y+31, r1	; 0x1f
    1f2a:	18 a2       	std	Y+32, r1	; 0x20

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    1f2c:	88 a5       	ldd	r24, Y+40	; 0x28
    1f2e:	88 23       	and	r24, r24
    1f30:	0c f4       	brge	.+2      	; 0x1f34 <SevSeg_voidDoubleRangeCounter+0xa4>
    1f32:	05 c2       	rjmp	.+1034   	; 0x233e <SevSeg_voidDoubleRangeCounter+0x4ae>
    1f34:	88 a5       	ldd	r24, Y+40	; 0x28
    1f36:	8a 30       	cpi	r24, 0x0A	; 10
    1f38:	0c f0       	brlt	.+2      	; 0x1f3c <SevSeg_voidDoubleRangeCounter+0xac>
    1f3a:	01 c2       	rjmp	.+1026   	; 0x233e <SevSeg_voidDoubleRangeCounter+0x4ae>
    1f3c:	8e a1       	ldd	r24, Y+38	; 0x26
    1f3e:	8a 30       	cpi	r24, 0x0A	; 10
    1f40:	0c f0       	brlt	.+2      	; 0x1f44 <SevSeg_voidDoubleRangeCounter+0xb4>
    1f42:	fd c1       	rjmp	.+1018   	; 0x233e <SevSeg_voidDoubleRangeCounter+0x4ae>
    1f44:	8e a1       	ldd	r24, Y+38	; 0x26
    1f46:	88 23       	and	r24, r24
    1f48:	0c f4       	brge	.+2      	; 0x1f4c <SevSeg_voidDoubleRangeCounter+0xbc>
    1f4a:	f9 c1       	rjmp	.+1010   	; 0x233e <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
    1f4c:	9b a9       	ldd	r25, Y+51	; 0x33
    1f4e:	8c a9       	ldd	r24, Y+52	; 0x34
    1f50:	98 17       	cp	r25, r24
    1f52:	0c f0       	brlt	.+2      	; 0x1f56 <SevSeg_voidDoubleRangeCounter+0xc6>
    1f54:	fc c0       	rjmp	.+504    	; 0x214e <SevSeg_voidDoubleRangeCounter+0x2be>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    1f56:	88 a5       	ldd	r24, Y+40	; 0x28
    1f58:	99 27       	eor	r25, r25
    1f5a:	87 fd       	sbrc	r24, 7
    1f5c:	90 95       	com	r25
    1f5e:	a9 2f       	mov	r26, r25
    1f60:	b9 2f       	mov	r27, r25
    1f62:	89 a3       	std	Y+33, r24	; 0x21
    1f64:	9a a3       	std	Y+34, r25	; 0x22
    1f66:	ab a3       	std	Y+35, r26	; 0x23
    1f68:	bc a3       	std	Y+36, r27	; 0x24
    1f6a:	df c0       	rjmp	.+446    	; 0x212a <SevSeg_voidDoubleRangeCounter+0x29a>
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    1f6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f70:	ab a1       	ldd	r26, Y+35	; 0x23
    1f72:	bc a1       	ldd	r27, Y+36	; 0x24
    1f74:	9e 01       	movw	r18, r28
    1f76:	27 5d       	subi	r18, 0xD7	; 215
    1f78:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7a:	f9 01       	movw	r30, r18
    1f7c:	e8 0f       	add	r30, r24
    1f7e:	f9 1f       	adc	r31, r25
    1f80:	80 81       	ld	r24, Z
    1f82:	98 2f       	mov	r25, r24
    1f84:	84 e0       	ldi	r24, 0x04	; 4
    1f86:	69 2f       	mov	r22, r25
    1f88:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    1f8c:	8f a1       	ldd	r24, Y+39	; 0x27
    1f8e:	99 27       	eor	r25, r25
    1f90:	87 fd       	sbrc	r24, 7
    1f92:	90 95       	com	r25
    1f94:	a9 2f       	mov	r26, r25
    1f96:	b9 2f       	mov	r27, r25
    1f98:	8d 8f       	std	Y+29, r24	; 0x1d
    1f9a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9c:	af 8f       	std	Y+31, r26	; 0x1f
    1f9e:	b8 a3       	std	Y+32, r27	; 0x20
    1fa0:	ae c0       	rjmp	.+348    	; 0x20fe <SevSeg_voidDoubleRangeCounter+0x26e>
					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    1fa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fa6:	af 8d       	ldd	r26, Y+31	; 0x1f
    1fa8:	b8 a1       	ldd	r27, Y+32	; 0x20
    1faa:	9e 01       	movw	r18, r28
    1fac:	27 5d       	subi	r18, 0xD7	; 215
    1fae:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	e8 0f       	add	r30, r24
    1fb4:	f9 1f       	adc	r31, r25
    1fb6:	80 81       	ld	r24, Z
    1fb8:	98 2f       	mov	r25, r24
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	69 2f       	mov	r22, r25
    1fbe:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	a0 e2       	ldi	r26, 0x20	; 32
    1fc8:	b1 e4       	ldi	r27, 0x41	; 65
    1fca:	89 8f       	std	Y+25, r24	; 0x19
    1fcc:	9a 8f       	std	Y+26, r25	; 0x1a
    1fce:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	4a e7       	ldi	r20, 0x7A	; 122
    1fe0:	55 e4       	ldi	r21, 0x45	; 69
    1fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	8d 8b       	std	Y+21, r24	; 0x15
    1fec:	9e 8b       	std	Y+22, r25	; 0x16
    1fee:	af 8b       	std	Y+23, r26	; 0x17
    1ff0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff8:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	40 e8       	ldi	r20, 0x80	; 128
    2000:	5f e3       	ldi	r21, 0x3F	; 63
    2002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2006:	88 23       	and	r24, r24
    2008:	2c f4       	brge	.+10     	; 0x2014 <SevSeg_voidDoubleRangeCounter+0x184>
		__ticks = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9c 8b       	std	Y+20, r25	; 0x14
    2010:	8b 8b       	std	Y+19, r24	; 0x13
    2012:	3f c0       	rjmp	.+126    	; 0x2092 <SevSeg_voidDoubleRangeCounter+0x202>
	else if (__tmp > 65535)
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	3f ef       	ldi	r19, 0xFF	; 255
    2020:	4f e7       	ldi	r20, 0x7F	; 127
    2022:	57 e4       	ldi	r21, 0x47	; 71
    2024:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2028:	18 16       	cp	r1, r24
    202a:	4c f5       	brge	.+82     	; 0x207e <SevSeg_voidDoubleRangeCounter+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	69 8d       	ldd	r22, Y+25	; 0x19
    202e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2032:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	9c 8b       	std	Y+20, r25	; 0x14
    2052:	8b 8b       	std	Y+19, r24	; 0x13
    2054:	0f c0       	rjmp	.+30     	; 0x2074 <SevSeg_voidDoubleRangeCounter+0x1e4>
    2056:	80 e9       	ldi	r24, 0x90	; 144
    2058:	91 e0       	ldi	r25, 0x01	; 1
    205a:	9a 8b       	std	Y+18, r25	; 0x12
    205c:	89 8b       	std	Y+17, r24	; 0x11
    205e:	89 89       	ldd	r24, Y+17	; 0x11
    2060:	9a 89       	ldd	r25, Y+18	; 0x12
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <SevSeg_voidDoubleRangeCounter+0x1d2>
    2066:	9a 8b       	std	Y+18, r25	; 0x12
    2068:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9c 8b       	std	Y+20, r25	; 0x14
    2072:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	69 f7       	brne	.-38     	; 0x2056 <SevSeg_voidDoubleRangeCounter+0x1c6>
    207c:	14 c0       	rjmp	.+40     	; 0x20a6 <SevSeg_voidDoubleRangeCounter+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207e:	6d 89       	ldd	r22, Y+21	; 0x15
    2080:	7e 89       	ldd	r23, Y+22	; 0x16
    2082:	8f 89       	ldd	r24, Y+23	; 0x17
    2084:	98 8d       	ldd	r25, Y+24	; 0x18
    2086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	9c 8b       	std	Y+20, r25	; 0x14
    2090:	8b 8b       	std	Y+19, r24	; 0x13
    2092:	8b 89       	ldd	r24, Y+19	; 0x13
    2094:	9c 89       	ldd	r25, Y+20	; 0x14
    2096:	98 8b       	std	Y+16, r25	; 0x10
    2098:	8f 87       	std	Y+15, r24	; 0x0f
    209a:	8f 85       	ldd	r24, Y+15	; 0x0f
    209c:	98 89       	ldd	r25, Y+16	; 0x10
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <SevSeg_voidDoubleRangeCounter+0x20e>
    20a2:	98 8b       	std	Y+16, r25	; 0x10
    20a4:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    20a6:	8d a1       	ldd	r24, Y+37	; 0x25
    20a8:	28 2f       	mov	r18, r24
    20aa:	33 27       	eor	r19, r19
    20ac:	27 fd       	sbrc	r18, 7
    20ae:	30 95       	com	r19
    20b0:	43 2f       	mov	r20, r19
    20b2:	53 2f       	mov	r21, r19
    20b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20b8:	af 8d       	ldd	r26, Y+31	; 0x1f
    20ba:	b8 a1       	ldd	r27, Y+32	; 0x20
    20bc:	28 17       	cp	r18, r24
    20be:	39 07       	cpc	r19, r25
    20c0:	4a 07       	cpc	r20, r26
    20c2:	5b 07       	cpc	r21, r27
    20c4:	89 f4       	brne	.+34     	; 0x20e8 <SevSeg_voidDoubleRangeCounter+0x258>
    20c6:	8e a1       	ldd	r24, Y+38	; 0x26
    20c8:	28 2f       	mov	r18, r24
    20ca:	33 27       	eor	r19, r19
    20cc:	27 fd       	sbrc	r18, 7
    20ce:	30 95       	com	r19
    20d0:	43 2f       	mov	r20, r19
    20d2:	53 2f       	mov	r21, r19
    20d4:	89 a1       	ldd	r24, Y+33	; 0x21
    20d6:	9a a1       	ldd	r25, Y+34	; 0x22
    20d8:	ab a1       	ldd	r26, Y+35	; 0x23
    20da:	bc a1       	ldd	r27, Y+36	; 0x24
    20dc:	28 17       	cp	r18, r24
    20de:	39 07       	cpc	r19, r25
    20e0:	4a 07       	cpc	r20, r26
    20e2:	5b 07       	cpc	r21, r27
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <SevSeg_voidDoubleRangeCounter+0x258>
    20e6:	2b c1       	rjmp	.+598    	; 0x233e <SevSeg_voidDoubleRangeCounter+0x4ae>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    20e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20ec:	af 8d       	ldd	r26, Y+31	; 0x1f
    20ee:	b8 a1       	ldd	r27, Y+32	; 0x20
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	a1 1d       	adc	r26, r1
    20f4:	b1 1d       	adc	r27, r1
    20f6:	8d 8f       	std	Y+29, r24	; 0x1d
    20f8:	9e 8f       	std	Y+30, r25	; 0x1e
    20fa:	af 8f       	std	Y+31, r26	; 0x1f
    20fc:	b8 a3       	std	Y+32, r27	; 0x20
    20fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2100:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2102:	af 8d       	ldd	r26, Y+31	; 0x1f
    2104:	b8 a1       	ldd	r27, Y+32	; 0x20
    2106:	8a 30       	cpi	r24, 0x0A	; 10
    2108:	91 05       	cpc	r25, r1
    210a:	a1 05       	cpc	r26, r1
    210c:	b1 05       	cpc	r27, r1
    210e:	0c f4       	brge	.+2      	; 0x2112 <SevSeg_voidDoubleRangeCounter+0x282>
    2110:	48 cf       	rjmp	.-368    	; 0x1fa2 <SevSeg_voidDoubleRangeCounter+0x112>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    2112:	1f a2       	std	Y+39, r1	; 0x27
	s32 Local_Counter2 = 0;

	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2114:	89 a1       	ldd	r24, Y+33	; 0x21
    2116:	9a a1       	ldd	r25, Y+34	; 0x22
    2118:	ab a1       	ldd	r26, Y+35	; 0x23
    211a:	bc a1       	ldd	r27, Y+36	; 0x24
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	a1 1d       	adc	r26, r1
    2120:	b1 1d       	adc	r27, r1
    2122:	89 a3       	std	Y+33, r24	; 0x21
    2124:	9a a3       	std	Y+34, r25	; 0x22
    2126:	ab a3       	std	Y+35, r26	; 0x23
    2128:	bc a3       	std	Y+36, r27	; 0x24
    212a:	8e a1       	ldd	r24, Y+38	; 0x26
    212c:	28 2f       	mov	r18, r24
    212e:	33 27       	eor	r19, r19
    2130:	27 fd       	sbrc	r18, 7
    2132:	30 95       	com	r19
    2134:	43 2f       	mov	r20, r19
    2136:	53 2f       	mov	r21, r19
    2138:	89 a1       	ldd	r24, Y+33	; 0x21
    213a:	9a a1       	ldd	r25, Y+34	; 0x22
    213c:	ab a1       	ldd	r26, Y+35	; 0x23
    213e:	bc a1       	ldd	r27, Y+36	; 0x24
    2140:	28 17       	cp	r18, r24
    2142:	39 07       	cpc	r19, r25
    2144:	4a 07       	cpc	r20, r26
    2146:	5b 07       	cpc	r21, r27
    2148:	0c f0       	brlt	.+2      	; 0x214c <SevSeg_voidDoubleRangeCounter+0x2bc>
    214a:	10 cf       	rjmp	.-480    	; 0x1f6c <SevSeg_voidDoubleRangeCounter+0xdc>
    214c:	f8 c0       	rjmp	.+496    	; 0x233e <SevSeg_voidDoubleRangeCounter+0x4ae>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    214e:	88 a5       	ldd	r24, Y+40	; 0x28
    2150:	99 27       	eor	r25, r25
    2152:	87 fd       	sbrc	r24, 7
    2154:	90 95       	com	r25
    2156:	a9 2f       	mov	r26, r25
    2158:	b9 2f       	mov	r27, r25
    215a:	89 a3       	std	Y+33, r24	; 0x21
    215c:	9a a3       	std	Y+34, r25	; 0x22
    215e:	ab a3       	std	Y+35, r26	; 0x23
    2160:	bc a3       	std	Y+36, r27	; 0x24
    2162:	dc c0       	rjmp	.+440    	; 0x231c <SevSeg_voidDoubleRangeCounter+0x48c>

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);
    2164:	89 a1       	ldd	r24, Y+33	; 0x21
    2166:	9a a1       	ldd	r25, Y+34	; 0x22
    2168:	ab a1       	ldd	r26, Y+35	; 0x23
    216a:	bc a1       	ldd	r27, Y+36	; 0x24
    216c:	9e 01       	movw	r18, r28
    216e:	27 5d       	subi	r18, 0xD7	; 215
    2170:	3f 4f       	sbci	r19, 0xFF	; 255
    2172:	f9 01       	movw	r30, r18
    2174:	e8 0f       	add	r30, r24
    2176:	f9 1f       	adc	r31, r25
    2178:	80 81       	ld	r24, Z
    217a:	98 2f       	mov	r25, r24
    217c:	84 e0       	ldi	r24, 0x04	; 4
    217e:	69 2f       	mov	r22, r25
    2180:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2184:	8f a1       	ldd	r24, Y+39	; 0x27
    2186:	99 27       	eor	r25, r25
    2188:	87 fd       	sbrc	r24, 7
    218a:	90 95       	com	r25
    218c:	a9 2f       	mov	r26, r25
    218e:	b9 2f       	mov	r27, r25
    2190:	8d 8f       	std	Y+29, r24	; 0x1d
    2192:	9e 8f       	std	Y+30, r25	; 0x1e
    2194:	af 8f       	std	Y+31, r26	; 0x1f
    2196:	b8 a3       	std	Y+32, r27	; 0x20
    2198:	ad c0       	rjmp	.+346    	; 0x22f4 <SevSeg_voidDoubleRangeCounter+0x464>

					DIO_voidSetPortValue(Sev_PORT,Sev_numbers[Local_Counter2]);
    219a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    219c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    219e:	af 8d       	ldd	r26, Y+31	; 0x1f
    21a0:	b8 a1       	ldd	r27, Y+32	; 0x20
    21a2:	9e 01       	movw	r18, r28
    21a4:	27 5d       	subi	r18, 0xD7	; 215
    21a6:	3f 4f       	sbci	r19, 0xFF	; 255
    21a8:	f9 01       	movw	r30, r18
    21aa:	e8 0f       	add	r30, r24
    21ac:	f9 1f       	adc	r31, r25
    21ae:	80 81       	ld	r24, Z
    21b0:	98 2f       	mov	r25, r24
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	69 2f       	mov	r22, r25
    21b6:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a0 e2       	ldi	r26, 0x20	; 32
    21c0:	b1 e4       	ldi	r27, 0x41	; 65
    21c2:	8b 87       	std	Y+11, r24	; 0x0b
    21c4:	9c 87       	std	Y+12, r25	; 0x0c
    21c6:	ad 87       	std	Y+13, r26	; 0x0d
    21c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    21cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a e7       	ldi	r20, 0x7A	; 122
    21d8:	55 e4       	ldi	r21, 0x45	; 69
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	8f 83       	std	Y+7, r24	; 0x07
    21e4:	98 87       	std	Y+8, r25	; 0x08
    21e6:	a9 87       	std	Y+9, r26	; 0x09
    21e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	2c f4       	brge	.+10     	; 0x220c <SevSeg_voidDoubleRangeCounter+0x37c>
		__ticks = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9e 83       	std	Y+6, r25	; 0x06
    2208:	8d 83       	std	Y+5, r24	; 0x05
    220a:	3f c0       	rjmp	.+126    	; 0x228a <SevSeg_voidDoubleRangeCounter+0x3fa>
	else if (__tmp > 65535)
    220c:	6f 81       	ldd	r22, Y+7	; 0x07
    220e:	78 85       	ldd	r23, Y+8	; 0x08
    2210:	89 85       	ldd	r24, Y+9	; 0x09
    2212:	9a 85       	ldd	r25, Y+10	; 0x0a
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	57 e4       	ldi	r21, 0x47	; 71
    221c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2220:	18 16       	cp	r1, r24
    2222:	4c f5       	brge	.+82     	; 0x2276 <SevSeg_voidDoubleRangeCounter+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2224:	6b 85       	ldd	r22, Y+11	; 0x0b
    2226:	7c 85       	ldd	r23, Y+12	; 0x0c
    2228:	8d 85       	ldd	r24, Y+13	; 0x0d
    222a:	9e 85       	ldd	r25, Y+14	; 0x0e
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	51 e4       	ldi	r21, 0x41	; 65
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	8d 83       	std	Y+5, r24	; 0x05
    224c:	0f c0       	rjmp	.+30     	; 0x226c <SevSeg_voidDoubleRangeCounter+0x3dc>
    224e:	80 e9       	ldi	r24, 0x90	; 144
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	9c 83       	std	Y+4, r25	; 0x04
    2254:	8b 83       	std	Y+3, r24	; 0x03
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	9c 81       	ldd	r25, Y+4	; 0x04
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <SevSeg_voidDoubleRangeCounter+0x3ca>
    225e:	9c 83       	std	Y+4, r25	; 0x04
    2260:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	69 f7       	brne	.-38     	; 0x224e <SevSeg_voidDoubleRangeCounter+0x3be>
    2274:	14 c0       	rjmp	.+40     	; 0x229e <SevSeg_voidDoubleRangeCounter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2276:	6f 81       	ldd	r22, Y+7	; 0x07
    2278:	78 85       	ldd	r23, Y+8	; 0x08
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	9a 85       	ldd	r25, Y+10	; 0x0a
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9e 83       	std	Y+6, r25	; 0x06
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <SevSeg_voidDoubleRangeCounter+0x406>
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    229e:	8d a1       	ldd	r24, Y+37	; 0x25
    22a0:	28 2f       	mov	r18, r24
    22a2:	33 27       	eor	r19, r19
    22a4:	27 fd       	sbrc	r18, 7
    22a6:	30 95       	com	r19
    22a8:	43 2f       	mov	r20, r19
    22aa:	53 2f       	mov	r21, r19
    22ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22b0:	af 8d       	ldd	r26, Y+31	; 0x1f
    22b2:	b8 a1       	ldd	r27, Y+32	; 0x20
    22b4:	28 17       	cp	r18, r24
    22b6:	39 07       	cpc	r19, r25
    22b8:	4a 07       	cpc	r20, r26
    22ba:	5b 07       	cpc	r21, r27
    22bc:	81 f4       	brne	.+32     	; 0x22de <SevSeg_voidDoubleRangeCounter+0x44e>
    22be:	8e a1       	ldd	r24, Y+38	; 0x26
    22c0:	28 2f       	mov	r18, r24
    22c2:	33 27       	eor	r19, r19
    22c4:	27 fd       	sbrc	r18, 7
    22c6:	30 95       	com	r19
    22c8:	43 2f       	mov	r20, r19
    22ca:	53 2f       	mov	r21, r19
    22cc:	89 a1       	ldd	r24, Y+33	; 0x21
    22ce:	9a a1       	ldd	r25, Y+34	; 0x22
    22d0:	ab a1       	ldd	r26, Y+35	; 0x23
    22d2:	bc a1       	ldd	r27, Y+36	; 0x24
    22d4:	28 17       	cp	r18, r24
    22d6:	39 07       	cpc	r19, r25
    22d8:	4a 07       	cpc	r20, r26
    22da:	5b 07       	cpc	r21, r27
    22dc:	81 f1       	breq	.+96     	; 0x233e <SevSeg_voidDoubleRangeCounter+0x4ae>
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				DIO_voidSetPortValue(Sev_PORT2,Sev_numbers[Local_Counter1]);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    22de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22e2:	af 8d       	ldd	r26, Y+31	; 0x1f
    22e4:	b8 a1       	ldd	r27, Y+32	; 0x20
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	a1 09       	sbc	r26, r1
    22ea:	b1 09       	sbc	r27, r1
    22ec:	8d 8f       	std	Y+29, r24	; 0x1d
    22ee:	9e 8f       	std	Y+30, r25	; 0x1e
    22f0:	af 8f       	std	Y+31, r26	; 0x1f
    22f2:	b8 a3       	std	Y+32, r27	; 0x20
    22f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f8:	af 8d       	ldd	r26, Y+31	; 0x1f
    22fa:	b8 a1       	ldd	r27, Y+32	; 0x20
    22fc:	bb 23       	and	r27, r27
    22fe:	0c f0       	brlt	.+2      	; 0x2302 <SevSeg_voidDoubleRangeCounter+0x472>
    2300:	4c cf       	rjmp	.-360    	; 0x219a <SevSeg_voidDoubleRangeCounter+0x30a>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 9;
    2302:	89 e0       	ldi	r24, 0x09	; 9
    2304:	8f a3       	std	Y+39, r24	; 0x27

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2306:	89 a1       	ldd	r24, Y+33	; 0x21
    2308:	9a a1       	ldd	r25, Y+34	; 0x22
    230a:	ab a1       	ldd	r26, Y+35	; 0x23
    230c:	bc a1       	ldd	r27, Y+36	; 0x24
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	a1 09       	sbc	r26, r1
    2312:	b1 09       	sbc	r27, r1
    2314:	89 a3       	std	Y+33, r24	; 0x21
    2316:	9a a3       	std	Y+34, r25	; 0x22
    2318:	ab a3       	std	Y+35, r26	; 0x23
    231a:	bc a3       	std	Y+36, r27	; 0x24
    231c:	8e a1       	ldd	r24, Y+38	; 0x26
    231e:	28 2f       	mov	r18, r24
    2320:	33 27       	eor	r19, r19
    2322:	27 fd       	sbrc	r18, 7
    2324:	30 95       	com	r19
    2326:	43 2f       	mov	r20, r19
    2328:	53 2f       	mov	r21, r19
    232a:	89 a1       	ldd	r24, Y+33	; 0x21
    232c:	9a a1       	ldd	r25, Y+34	; 0x22
    232e:	ab a1       	ldd	r26, Y+35	; 0x23
    2330:	bc a1       	ldd	r27, Y+36	; 0x24
    2332:	82 17       	cp	r24, r18
    2334:	93 07       	cpc	r25, r19
    2336:	a4 07       	cpc	r26, r20
    2338:	b5 07       	cpc	r27, r21
    233a:	0c f0       	brlt	.+2      	; 0x233e <SevSeg_voidDoubleRangeCounter+0x4ae>
    233c:	13 cf       	rjmp	.-474    	; 0x2164 <SevSeg_voidDoubleRangeCounter+0x2d4>

				Local_SevSegOneStart = 9;
			}
		}
	}
}
    233e:	e9 96       	adiw	r28, 0x39	; 57
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <SevSeg_voidBCDDisplay>:

void SevSeg_voidBCDDisplay(u8 port, u8 number){
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <SevSeg_voidBCDDisplay+0x6>
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPortValue(port, number);
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	6a 81       	ldd	r22, Y+2	; 0x02
    2362:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <SevSeg_voidBCDDoubleDisplay>:

void SevSeg_voidBCDDoubleDisplay(s8 start,s8 end){
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	ab 97       	sbiw	r28, 0x2b	; 43
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	8a a7       	std	Y+42, r24	; 0x2a
    2386:	6b a7       	std	Y+43, r22	; 0x2b
	s8 Local_SevSegTwoStart = start / 10;
    2388:	8a a5       	ldd	r24, Y+42	; 0x2a
    238a:	9a e0       	ldi	r25, 0x0A	; 10
    238c:	69 2f       	mov	r22, r25
    238e:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    2392:	89 a7       	std	Y+41, r24	; 0x29
	s8 Local_SevSegOneStart = start % 10;
    2394:	8a a5       	ldd	r24, Y+42	; 0x2a
    2396:	9a e0       	ldi	r25, 0x0A	; 10
    2398:	69 2f       	mov	r22, r25
    239a:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    239e:	89 2f       	mov	r24, r25
    23a0:	88 a7       	std	Y+40, r24	; 0x28

	s8 Local_SevSegTwoEnd = end / 10;
    23a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23a4:	9a e0       	ldi	r25, 0x0A	; 10
    23a6:	69 2f       	mov	r22, r25
    23a8:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    23ac:	8f a3       	std	Y+39, r24	; 0x27
	s8 Local_SevSegOneEnd = end % 10;
    23ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b0:	9a e0       	ldi	r25, 0x0A	; 10
    23b2:	69 2f       	mov	r22, r25
    23b4:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    23b8:	89 2f       	mov	r24, r25
    23ba:	8e a3       	std	Y+38, r24	; 0x26

	s32 Local_Counter1 = 0;
    23bc:	1a a2       	std	Y+34, r1	; 0x22
    23be:	1b a2       	std	Y+35, r1	; 0x23
    23c0:	1c a2       	std	Y+36, r1	; 0x24
    23c2:	1d a2       	std	Y+37, r1	; 0x25
	s32 Local_Counter2 = 0;
    23c4:	1e 8e       	std	Y+30, r1	; 0x1e
    23c6:	1f 8e       	std	Y+31, r1	; 0x1f
    23c8:	18 a2       	std	Y+32, r1	; 0x20
    23ca:	19 a2       	std	Y+33, r1	; 0x21
	u8 num = 0;
    23cc:	1d 8e       	std	Y+29, r1	; 0x1d
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    23ce:	89 a5       	ldd	r24, Y+41	; 0x29
    23d0:	88 23       	and	r24, r24
    23d2:	0c f4       	brge	.+2      	; 0x23d6 <SevSeg_voidBCDDoubleDisplay+0x66>
    23d4:	11 c2       	rjmp	.+1058   	; 0x27f8 <SevSeg_voidBCDDoubleDisplay+0x488>
    23d6:	89 a5       	ldd	r24, Y+41	; 0x29
    23d8:	8a 30       	cpi	r24, 0x0A	; 10
    23da:	0c f0       	brlt	.+2      	; 0x23de <SevSeg_voidBCDDoubleDisplay+0x6e>
    23dc:	0d c2       	rjmp	.+1050   	; 0x27f8 <SevSeg_voidBCDDoubleDisplay+0x488>
    23de:	8f a1       	ldd	r24, Y+39	; 0x27
    23e0:	8a 30       	cpi	r24, 0x0A	; 10
    23e2:	0c f0       	brlt	.+2      	; 0x23e6 <SevSeg_voidBCDDoubleDisplay+0x76>
    23e4:	09 c2       	rjmp	.+1042   	; 0x27f8 <SevSeg_voidBCDDoubleDisplay+0x488>
    23e6:	8f a1       	ldd	r24, Y+39	; 0x27
    23e8:	88 23       	and	r24, r24
    23ea:	0c f4       	brge	.+2      	; 0x23ee <SevSeg_voidBCDDoubleDisplay+0x7e>
    23ec:	05 c2       	rjmp	.+1034   	; 0x27f8 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
    23ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f2:	98 17       	cp	r25, r24
    23f4:	0c f0       	brlt	.+2      	; 0x23f8 <SevSeg_voidBCDDoubleDisplay+0x88>
    23f6:	02 c1       	rjmp	.+516    	; 0x25fc <SevSeg_voidBCDDoubleDisplay+0x28c>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    23f8:	89 a5       	ldd	r24, Y+41	; 0x29
    23fa:	99 27       	eor	r25, r25
    23fc:	87 fd       	sbrc	r24, 7
    23fe:	90 95       	com	r25
    2400:	a9 2f       	mov	r26, r25
    2402:	b9 2f       	mov	r27, r25
    2404:	8a a3       	std	Y+34, r24	; 0x22
    2406:	9b a3       	std	Y+35, r25	; 0x23
    2408:	ac a3       	std	Y+36, r26	; 0x24
    240a:	bd a3       	std	Y+37, r27	; 0x25
    240c:	e5 c0       	rjmp	.+458    	; 0x25d8 <SevSeg_voidBCDDoubleDisplay+0x268>
				num &= 0x0F;
    240e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2410:	8f 70       	andi	r24, 0x0F	; 15
    2412:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2414:	8a a1       	ldd	r24, Y+34	; 0x22
    2416:	9b a1       	ldd	r25, Y+35	; 0x23
    2418:	ac a1       	ldd	r26, Y+36	; 0x24
    241a:	bd a1       	ldd	r27, Y+37	; 0x25
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	aa 1f       	adc	r26, r26
    2422:	bb 1f       	adc	r27, r27
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	aa 1f       	adc	r26, r26
    242a:	bb 1f       	adc	r27, r27
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	aa 1f       	adc	r26, r26
    2432:	bb 1f       	adc	r27, r27
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	aa 1f       	adc	r26, r26
    243a:	bb 1f       	adc	r27, r27
    243c:	98 2f       	mov	r25, r24
    243e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2440:	89 2b       	or	r24, r25
    2442:	8d 8f       	std	Y+29, r24	; 0x1d
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2444:	88 a5       	ldd	r24, Y+40	; 0x28
    2446:	99 27       	eor	r25, r25
    2448:	87 fd       	sbrc	r24, 7
    244a:	90 95       	com	r25
    244c:	a9 2f       	mov	r26, r25
    244e:	b9 2f       	mov	r27, r25
    2450:	8e 8f       	std	Y+30, r24	; 0x1e
    2452:	9f 8f       	std	Y+31, r25	; 0x1f
    2454:	a8 a3       	std	Y+32, r26	; 0x20
    2456:	b9 a3       	std	Y+33, r27	; 0x21
    2458:	a9 c0       	rjmp	.+338    	; 0x25ac <SevSeg_voidBCDDoubleDisplay+0x23c>
					num &= 0xF0;
    245a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    245c:	80 7f       	andi	r24, 0xF0	; 240
    245e:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    2460:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2462:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2464:	89 2b       	or	r24, r25
    2466:	8d 8f       	std	Y+29, r24	; 0x1d
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	a0 e2       	ldi	r26, 0x20	; 32
    246e:	b1 e4       	ldi	r27, 0x41	; 65
    2470:	89 8f       	std	Y+25, r24	; 0x19
    2472:	9a 8f       	std	Y+26, r25	; 0x1a
    2474:	ab 8f       	std	Y+27, r26	; 0x1b
    2476:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2478:	69 8d       	ldd	r22, Y+25	; 0x19
    247a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    247c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	4a e7       	ldi	r20, 0x7A	; 122
    2486:	55 e4       	ldi	r21, 0x45	; 69
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	8d 8b       	std	Y+21, r24	; 0x15
    2492:	9e 8b       	std	Y+22, r25	; 0x16
    2494:	af 8b       	std	Y+23, r26	; 0x17
    2496:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2498:	6d 89       	ldd	r22, Y+21	; 0x15
    249a:	7e 89       	ldd	r23, Y+22	; 0x16
    249c:	8f 89       	ldd	r24, Y+23	; 0x17
    249e:	98 8d       	ldd	r25, Y+24	; 0x18
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e8       	ldi	r20, 0x80	; 128
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ac:	88 23       	and	r24, r24
    24ae:	2c f4       	brge	.+10     	; 0x24ba <SevSeg_voidBCDDoubleDisplay+0x14a>
		__ticks = 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9c 8b       	std	Y+20, r25	; 0x14
    24b6:	8b 8b       	std	Y+19, r24	; 0x13
    24b8:	3f c0       	rjmp	.+126    	; 0x2538 <SevSeg_voidBCDDoubleDisplay+0x1c8>
	else if (__tmp > 65535)
    24ba:	6d 89       	ldd	r22, Y+21	; 0x15
    24bc:	7e 89       	ldd	r23, Y+22	; 0x16
    24be:	8f 89       	ldd	r24, Y+23	; 0x17
    24c0:	98 8d       	ldd	r25, Y+24	; 0x18
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	3f ef       	ldi	r19, 0xFF	; 255
    24c6:	4f e7       	ldi	r20, 0x7F	; 127
    24c8:	57 e4       	ldi	r21, 0x47	; 71
    24ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ce:	18 16       	cp	r1, r24
    24d0:	4c f5       	brge	.+82     	; 0x2524 <SevSeg_voidBCDDoubleDisplay+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d2:	69 8d       	ldd	r22, Y+25	; 0x19
    24d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e2       	ldi	r20, 0x20	; 32
    24e0:	51 e4       	ldi	r21, 0x41	; 65
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	bc 01       	movw	r22, r24
    24ec:	cd 01       	movw	r24, r26
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9c 8b       	std	Y+20, r25	; 0x14
    24f8:	8b 8b       	std	Y+19, r24	; 0x13
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <SevSeg_voidBCDDoubleDisplay+0x1aa>
    24fc:	80 e9       	ldi	r24, 0x90	; 144
    24fe:	91 e0       	ldi	r25, 0x01	; 1
    2500:	9a 8b       	std	Y+18, r25	; 0x12
    2502:	89 8b       	std	Y+17, r24	; 0x11
    2504:	89 89       	ldd	r24, Y+17	; 0x11
    2506:	9a 89       	ldd	r25, Y+18	; 0x12
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <SevSeg_voidBCDDoubleDisplay+0x198>
    250c:	9a 8b       	std	Y+18, r25	; 0x12
    250e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2510:	8b 89       	ldd	r24, Y+19	; 0x13
    2512:	9c 89       	ldd	r25, Y+20	; 0x14
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	9c 8b       	std	Y+20, r25	; 0x14
    2518:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251a:	8b 89       	ldd	r24, Y+19	; 0x13
    251c:	9c 89       	ldd	r25, Y+20	; 0x14
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	69 f7       	brne	.-38     	; 0x24fc <SevSeg_voidBCDDoubleDisplay+0x18c>
    2522:	14 c0       	rjmp	.+40     	; 0x254c <SevSeg_voidBCDDoubleDisplay+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2524:	6d 89       	ldd	r22, Y+21	; 0x15
    2526:	7e 89       	ldd	r23, Y+22	; 0x16
    2528:	8f 89       	ldd	r24, Y+23	; 0x17
    252a:	98 8d       	ldd	r25, Y+24	; 0x18
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9c 8b       	std	Y+20, r25	; 0x14
    2536:	8b 8b       	std	Y+19, r24	; 0x13
    2538:	8b 89       	ldd	r24, Y+19	; 0x13
    253a:	9c 89       	ldd	r25, Y+20	; 0x14
    253c:	98 8b       	std	Y+16, r25	; 0x10
    253e:	8f 87       	std	Y+15, r24	; 0x0f
    2540:	8f 85       	ldd	r24, Y+15	; 0x0f
    2542:	98 89       	ldd	r25, Y+16	; 0x10
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <SevSeg_voidBCDDoubleDisplay+0x1d4>
    2548:	98 8b       	std	Y+16, r25	; 0x10
    254a:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2550:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2554:	8e a1       	ldd	r24, Y+38	; 0x26
    2556:	28 2f       	mov	r18, r24
    2558:	33 27       	eor	r19, r19
    255a:	27 fd       	sbrc	r18, 7
    255c:	30 95       	com	r19
    255e:	43 2f       	mov	r20, r19
    2560:	53 2f       	mov	r21, r19
    2562:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2564:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2566:	a8 a1       	ldd	r26, Y+32	; 0x20
    2568:	b9 a1       	ldd	r27, Y+33	; 0x21
    256a:	28 17       	cp	r18, r24
    256c:	39 07       	cpc	r19, r25
    256e:	4a 07       	cpc	r20, r26
    2570:	5b 07       	cpc	r21, r27
    2572:	89 f4       	brne	.+34     	; 0x2596 <SevSeg_voidBCDDoubleDisplay+0x226>
    2574:	8f a1       	ldd	r24, Y+39	; 0x27
    2576:	28 2f       	mov	r18, r24
    2578:	33 27       	eor	r19, r19
    257a:	27 fd       	sbrc	r18, 7
    257c:	30 95       	com	r19
    257e:	43 2f       	mov	r20, r19
    2580:	53 2f       	mov	r21, r19
    2582:	8a a1       	ldd	r24, Y+34	; 0x22
    2584:	9b a1       	ldd	r25, Y+35	; 0x23
    2586:	ac a1       	ldd	r26, Y+36	; 0x24
    2588:	bd a1       	ldd	r27, Y+37	; 0x25
    258a:	28 17       	cp	r18, r24
    258c:	39 07       	cpc	r19, r25
    258e:	4a 07       	cpc	r20, r26
    2590:	5b 07       	cpc	r21, r27
    2592:	09 f4       	brne	.+2      	; 0x2596 <SevSeg_voidBCDDoubleDisplay+0x226>
    2594:	31 c1       	rjmp	.+610    	; 0x27f8 <SevSeg_voidBCDDoubleDisplay+0x488>

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				num &= 0x0F;
				num |= (Local_Counter1 << 4);
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2596:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2598:	9f 8d       	ldd	r25, Y+31	; 0x1f
    259a:	a8 a1       	ldd	r26, Y+32	; 0x20
    259c:	b9 a1       	ldd	r27, Y+33	; 0x21
    259e:	01 96       	adiw	r24, 0x01	; 1
    25a0:	a1 1d       	adc	r26, r1
    25a2:	b1 1d       	adc	r27, r1
    25a4:	8e 8f       	std	Y+30, r24	; 0x1e
    25a6:	9f 8f       	std	Y+31, r25	; 0x1f
    25a8:	a8 a3       	std	Y+32, r26	; 0x20
    25aa:	b9 a3       	std	Y+33, r27	; 0x21
    25ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25b0:	a8 a1       	ldd	r26, Y+32	; 0x20
    25b2:	b9 a1       	ldd	r27, Y+33	; 0x21
    25b4:	8a 30       	cpi	r24, 0x0A	; 10
    25b6:	91 05       	cpc	r25, r1
    25b8:	a1 05       	cpc	r26, r1
    25ba:	b1 05       	cpc	r27, r1
    25bc:	0c f4       	brge	.+2      	; 0x25c0 <SevSeg_voidBCDDoubleDisplay+0x250>
    25be:	4d cf       	rjmp	.-358    	; 0x245a <SevSeg_voidBCDDoubleDisplay+0xea>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    25c0:	18 a6       	std	Y+40, r1	; 0x28
	s32 Local_Counter2 = 0;
	u8 num = 0;
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    25c2:	8a a1       	ldd	r24, Y+34	; 0x22
    25c4:	9b a1       	ldd	r25, Y+35	; 0x23
    25c6:	ac a1       	ldd	r26, Y+36	; 0x24
    25c8:	bd a1       	ldd	r27, Y+37	; 0x25
    25ca:	01 96       	adiw	r24, 0x01	; 1
    25cc:	a1 1d       	adc	r26, r1
    25ce:	b1 1d       	adc	r27, r1
    25d0:	8a a3       	std	Y+34, r24	; 0x22
    25d2:	9b a3       	std	Y+35, r25	; 0x23
    25d4:	ac a3       	std	Y+36, r26	; 0x24
    25d6:	bd a3       	std	Y+37, r27	; 0x25
    25d8:	8f a1       	ldd	r24, Y+39	; 0x27
    25da:	28 2f       	mov	r18, r24
    25dc:	33 27       	eor	r19, r19
    25de:	27 fd       	sbrc	r18, 7
    25e0:	30 95       	com	r19
    25e2:	43 2f       	mov	r20, r19
    25e4:	53 2f       	mov	r21, r19
    25e6:	8a a1       	ldd	r24, Y+34	; 0x22
    25e8:	9b a1       	ldd	r25, Y+35	; 0x23
    25ea:	ac a1       	ldd	r26, Y+36	; 0x24
    25ec:	bd a1       	ldd	r27, Y+37	; 0x25
    25ee:	28 17       	cp	r18, r24
    25f0:	39 07       	cpc	r19, r25
    25f2:	4a 07       	cpc	r20, r26
    25f4:	5b 07       	cpc	r21, r27
    25f6:	0c f0       	brlt	.+2      	; 0x25fa <SevSeg_voidBCDDoubleDisplay+0x28a>
    25f8:	0a cf       	rjmp	.-492    	; 0x240e <SevSeg_voidBCDDoubleDisplay+0x9e>
    25fa:	fe c0       	rjmp	.+508    	; 0x27f8 <SevSeg_voidBCDDoubleDisplay+0x488>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    25fc:	89 a5       	ldd	r24, Y+41	; 0x29
    25fe:	99 27       	eor	r25, r25
    2600:	87 fd       	sbrc	r24, 7
    2602:	90 95       	com	r25
    2604:	a9 2f       	mov	r26, r25
    2606:	b9 2f       	mov	r27, r25
    2608:	8a a3       	std	Y+34, r24	; 0x22
    260a:	9b a3       	std	Y+35, r25	; 0x23
    260c:	ac a3       	std	Y+36, r26	; 0x24
    260e:	bd a3       	std	Y+37, r27	; 0x25
    2610:	e2 c0       	rjmp	.+452    	; 0x27d6 <SevSeg_voidBCDDoubleDisplay+0x466>

				num &= 0x0F;
    2612:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2614:	8f 70       	andi	r24, 0x0F	; 15
    2616:	8d 8f       	std	Y+29, r24	; 0x1d
				num |= (Local_Counter1 << 4);
    2618:	8a a1       	ldd	r24, Y+34	; 0x22
    261a:	9b a1       	ldd	r25, Y+35	; 0x23
    261c:	ac a1       	ldd	r26, Y+36	; 0x24
    261e:	bd a1       	ldd	r27, Y+37	; 0x25
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	aa 1f       	adc	r26, r26
    2626:	bb 1f       	adc	r27, r27
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	aa 1f       	adc	r26, r26
    262e:	bb 1f       	adc	r27, r27
    2630:	88 0f       	add	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	aa 1f       	adc	r26, r26
    2636:	bb 1f       	adc	r27, r27
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	aa 1f       	adc	r26, r26
    263e:	bb 1f       	adc	r27, r27
    2640:	98 2f       	mov	r25, r24
    2642:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2644:	89 2b       	or	r24, r25
    2646:	8d 8f       	std	Y+29, r24	; 0x1d

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2648:	88 a5       	ldd	r24, Y+40	; 0x28
    264a:	99 27       	eor	r25, r25
    264c:	87 fd       	sbrc	r24, 7
    264e:	90 95       	com	r25
    2650:	a9 2f       	mov	r26, r25
    2652:	b9 2f       	mov	r27, r25
    2654:	8e 8f       	std	Y+30, r24	; 0x1e
    2656:	9f 8f       	std	Y+31, r25	; 0x1f
    2658:	a8 a3       	std	Y+32, r26	; 0x20
    265a:	b9 a3       	std	Y+33, r27	; 0x21
    265c:	a8 c0       	rjmp	.+336    	; 0x27ae <SevSeg_voidBCDDoubleDisplay+0x43e>
					num &= 0xF0;
    265e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2660:	80 7f       	andi	r24, 0xF0	; 240
    2662:	8d 8f       	std	Y+29, r24	; 0x1d
					num |= Local_Counter2;
    2664:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2666:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2668:	89 2b       	or	r24, r25
    266a:	8d 8f       	std	Y+29, r24	; 0x1d
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	a0 e2       	ldi	r26, 0x20	; 32
    2672:	b1 e4       	ldi	r27, 0x41	; 65
    2674:	8b 87       	std	Y+11, r24	; 0x0b
    2676:	9c 87       	std	Y+12, r25	; 0x0c
    2678:	ad 87       	std	Y+13, r26	; 0x0d
    267a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267c:	6b 85       	ldd	r22, Y+11	; 0x0b
    267e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2680:	8d 85       	ldd	r24, Y+13	; 0x0d
    2682:	9e 85       	ldd	r25, Y+14	; 0x0e
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	4a e7       	ldi	r20, 0x7A	; 122
    268a:	55 e4       	ldi	r21, 0x45	; 69
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	8f 83       	std	Y+7, r24	; 0x07
    2696:	98 87       	std	Y+8, r25	; 0x08
    2698:	a9 87       	std	Y+9, r26	; 0x09
    269a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269c:	6f 81       	ldd	r22, Y+7	; 0x07
    269e:	78 85       	ldd	r23, Y+8	; 0x08
    26a0:	89 85       	ldd	r24, Y+9	; 0x09
    26a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e8       	ldi	r20, 0x80	; 128
    26aa:	5f e3       	ldi	r21, 0x3F	; 63
    26ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26b0:	88 23       	and	r24, r24
    26b2:	2c f4       	brge	.+10     	; 0x26be <SevSeg_voidBCDDoubleDisplay+0x34e>
		__ticks = 1;
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	9e 83       	std	Y+6, r25	; 0x06
    26ba:	8d 83       	std	Y+5, r24	; 0x05
    26bc:	3f c0       	rjmp	.+126    	; 0x273c <SevSeg_voidBCDDoubleDisplay+0x3cc>
	else if (__tmp > 65535)
    26be:	6f 81       	ldd	r22, Y+7	; 0x07
    26c0:	78 85       	ldd	r23, Y+8	; 0x08
    26c2:	89 85       	ldd	r24, Y+9	; 0x09
    26c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	3f ef       	ldi	r19, 0xFF	; 255
    26ca:	4f e7       	ldi	r20, 0x7F	; 127
    26cc:	57 e4       	ldi	r21, 0x47	; 71
    26ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d2:	18 16       	cp	r1, r24
    26d4:	4c f5       	brge	.+82     	; 0x2728 <SevSeg_voidBCDDoubleDisplay+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26da:	8d 85       	ldd	r24, Y+13	; 0x0d
    26dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e2       	ldi	r20, 0x20	; 32
    26e4:	51 e4       	ldi	r21, 0x41	; 65
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	bc 01       	movw	r22, r24
    26f0:	cd 01       	movw	r24, r26
    26f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	9e 83       	std	Y+6, r25	; 0x06
    26fc:	8d 83       	std	Y+5, r24	; 0x05
    26fe:	0f c0       	rjmp	.+30     	; 0x271e <SevSeg_voidBCDDoubleDisplay+0x3ae>
    2700:	80 e9       	ldi	r24, 0x90	; 144
    2702:	91 e0       	ldi	r25, 0x01	; 1
    2704:	9c 83       	std	Y+4, r25	; 0x04
    2706:	8b 83       	std	Y+3, r24	; 0x03
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <SevSeg_voidBCDDoubleDisplay+0x39c>
    2710:	9c 83       	std	Y+4, r25	; 0x04
    2712:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2714:	8d 81       	ldd	r24, Y+5	; 0x05
    2716:	9e 81       	ldd	r25, Y+6	; 0x06
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271e:	8d 81       	ldd	r24, Y+5	; 0x05
    2720:	9e 81       	ldd	r25, Y+6	; 0x06
    2722:	00 97       	sbiw	r24, 0x00	; 0
    2724:	69 f7       	brne	.-38     	; 0x2700 <SevSeg_voidBCDDoubleDisplay+0x390>
    2726:	14 c0       	rjmp	.+40     	; 0x2750 <SevSeg_voidBCDDoubleDisplay+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2728:	6f 81       	ldd	r22, Y+7	; 0x07
    272a:	78 85       	ldd	r23, Y+8	; 0x08
    272c:	89 85       	ldd	r24, Y+9	; 0x09
    272e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	9e 81       	ldd	r25, Y+6	; 0x06
    2740:	9a 83       	std	Y+2, r25	; 0x02
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	9a 81       	ldd	r25, Y+2	; 0x02
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	f1 f7       	brne	.-4      	; 0x2748 <SevSeg_voidBCDDoubleDisplay+0x3d8>
    274c:	9a 83       	std	Y+2, r25	; 0x02
    274e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    2750:	82 e0       	ldi	r24, 0x02	; 2
    2752:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2754:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2758:	8e a1       	ldd	r24, Y+38	; 0x26
    275a:	28 2f       	mov	r18, r24
    275c:	33 27       	eor	r19, r19
    275e:	27 fd       	sbrc	r18, 7
    2760:	30 95       	com	r19
    2762:	43 2f       	mov	r20, r19
    2764:	53 2f       	mov	r21, r19
    2766:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2768:	9f 8d       	ldd	r25, Y+31	; 0x1f
    276a:	a8 a1       	ldd	r26, Y+32	; 0x20
    276c:	b9 a1       	ldd	r27, Y+33	; 0x21
    276e:	28 17       	cp	r18, r24
    2770:	39 07       	cpc	r19, r25
    2772:	4a 07       	cpc	r20, r26
    2774:	5b 07       	cpc	r21, r27
    2776:	81 f4       	brne	.+32     	; 0x2798 <SevSeg_voidBCDDoubleDisplay+0x428>
    2778:	8f a1       	ldd	r24, Y+39	; 0x27
    277a:	28 2f       	mov	r18, r24
    277c:	33 27       	eor	r19, r19
    277e:	27 fd       	sbrc	r18, 7
    2780:	30 95       	com	r19
    2782:	43 2f       	mov	r20, r19
    2784:	53 2f       	mov	r21, r19
    2786:	8a a1       	ldd	r24, Y+34	; 0x22
    2788:	9b a1       	ldd	r25, Y+35	; 0x23
    278a:	ac a1       	ldd	r26, Y+36	; 0x24
    278c:	bd a1       	ldd	r27, Y+37	; 0x25
    278e:	28 17       	cp	r18, r24
    2790:	39 07       	cpc	r19, r25
    2792:	4a 07       	cpc	r20, r26
    2794:	5b 07       	cpc	r21, r27
    2796:	81 f1       	breq	.+96     	; 0x27f8 <SevSeg_voidBCDDoubleDisplay+0x488>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2798:	8e 8d       	ldd	r24, Y+30	; 0x1e
    279a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    279c:	a8 a1       	ldd	r26, Y+32	; 0x20
    279e:	b9 a1       	ldd	r27, Y+33	; 0x21
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	a1 09       	sbc	r26, r1
    27a4:	b1 09       	sbc	r27, r1
    27a6:	8e 8f       	std	Y+30, r24	; 0x1e
    27a8:	9f 8f       	std	Y+31, r25	; 0x1f
    27aa:	a8 a3       	std	Y+32, r26	; 0x20
    27ac:	b9 a3       	std	Y+33, r27	; 0x21
    27ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27b2:	a8 a1       	ldd	r26, Y+32	; 0x20
    27b4:	b9 a1       	ldd	r27, Y+33	; 0x21
    27b6:	bb 23       	and	r27, r27
    27b8:	0c f0       	brlt	.+2      	; 0x27bc <SevSeg_voidBCDDoubleDisplay+0x44c>
    27ba:	51 cf       	rjmp	.-350    	; 0x265e <SevSeg_voidBCDDoubleDisplay+0x2ee>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    27bc:	89 e0       	ldi	r24, 0x09	; 9
    27be:	88 a7       	std	Y+40, r24	; 0x28

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    27c0:	8a a1       	ldd	r24, Y+34	; 0x22
    27c2:	9b a1       	ldd	r25, Y+35	; 0x23
    27c4:	ac a1       	ldd	r26, Y+36	; 0x24
    27c6:	bd a1       	ldd	r27, Y+37	; 0x25
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	a1 09       	sbc	r26, r1
    27cc:	b1 09       	sbc	r27, r1
    27ce:	8a a3       	std	Y+34, r24	; 0x22
    27d0:	9b a3       	std	Y+35, r25	; 0x23
    27d2:	ac a3       	std	Y+36, r26	; 0x24
    27d4:	bd a3       	std	Y+37, r27	; 0x25
    27d6:	8f a1       	ldd	r24, Y+39	; 0x27
    27d8:	28 2f       	mov	r18, r24
    27da:	33 27       	eor	r19, r19
    27dc:	27 fd       	sbrc	r18, 7
    27de:	30 95       	com	r19
    27e0:	43 2f       	mov	r20, r19
    27e2:	53 2f       	mov	r21, r19
    27e4:	8a a1       	ldd	r24, Y+34	; 0x22
    27e6:	9b a1       	ldd	r25, Y+35	; 0x23
    27e8:	ac a1       	ldd	r26, Y+36	; 0x24
    27ea:	bd a1       	ldd	r27, Y+37	; 0x25
    27ec:	82 17       	cp	r24, r18
    27ee:	93 07       	cpc	r25, r19
    27f0:	a4 07       	cpc	r26, r20
    27f2:	b5 07       	cpc	r27, r21
    27f4:	0c f0       	brlt	.+2      	; 0x27f8 <SevSeg_voidBCDDoubleDisplay+0x488>
    27f6:	0d cf       	rjmp	.-486    	; 0x2612 <SevSeg_voidBCDDoubleDisplay+0x2a2>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    27f8:	ab 96       	adiw	r28, 0x2b	; 43
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <SevSeg_voidMulBCD>:

void SevSeg_voidMulBCD(s8 start,s8 end){
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	c1 54       	subi	r28, 0x41	; 65
    2814:	d0 40       	sbci	r29, 0x00	; 0
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	fe 01       	movw	r30, r28
    2822:	e0 5c       	subi	r30, 0xC0	; 192
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	80 83       	st	Z, r24
    2828:	fe 01       	movw	r30, r28
    282a:	ef 5b       	subi	r30, 0xBF	; 191
    282c:	ff 4f       	sbci	r31, 0xFF	; 255
    282e:	60 83       	st	Z, r22
	s8 Local_SevSegTwoStart = start / 10;
    2830:	fe 01       	movw	r30, r28
    2832:	e0 5c       	subi	r30, 0xC0	; 192
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	9a e0       	ldi	r25, 0x0A	; 10
    283a:	69 2f       	mov	r22, r25
    283c:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    2840:	8f af       	std	Y+63, r24	; 0x3f
	s8 Local_SevSegOneStart = start % 10;
    2842:	fe 01       	movw	r30, r28
    2844:	e0 5c       	subi	r30, 0xC0	; 192
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	9a e0       	ldi	r25, 0x0A	; 10
    284c:	69 2f       	mov	r22, r25
    284e:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    2852:	89 2f       	mov	r24, r25
    2854:	8e af       	std	Y+62, r24	; 0x3e

	s8 Local_SevSegTwoEnd = end / 10;
    2856:	fe 01       	movw	r30, r28
    2858:	ef 5b       	subi	r30, 0xBF	; 191
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	9a e0       	ldi	r25, 0x0A	; 10
    2860:	69 2f       	mov	r22, r25
    2862:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    2866:	8d af       	std	Y+61, r24	; 0x3d
	s8 Local_SevSegOneEnd = end % 10;
    2868:	fe 01       	movw	r30, r28
    286a:	ef 5b       	subi	r30, 0xBF	; 191
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	9a e0       	ldi	r25, 0x0A	; 10
    2872:	69 2f       	mov	r22, r25
    2874:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <__divmodqi4>
    2878:	89 2f       	mov	r24, r25
    287a:	8c af       	std	Y+60, r24	; 0x3c

	s32 Local_Counter1 = 0;
    287c:	18 ae       	std	Y+56, r1	; 0x38
    287e:	19 ae       	std	Y+57, r1	; 0x39
    2880:	1a ae       	std	Y+58, r1	; 0x3a
    2882:	1b ae       	std	Y+59, r1	; 0x3b
	s32 Local_Counter2 = 0;
    2884:	1c aa       	std	Y+52, r1	; 0x34
    2886:	1d aa       	std	Y+53, r1	; 0x35
    2888:	1e aa       	std	Y+54, r1	; 0x36
    288a:	1f aa       	std	Y+55, r1	; 0x37
	u8 num = 0;
    288c:	1b aa       	std	Y+51, r1	; 0x33
	u32 count = 0;
    288e:	1f a6       	std	Y+47, r1	; 0x2f
    2890:	18 aa       	std	Y+48, r1	; 0x30
    2892:	19 aa       	std	Y+49, r1	; 0x31
    2894:	1a aa       	std	Y+50, r1	; 0x32
	u32 delay = 1000 / (Sev_DELAY * 2);
    2896:	82 e3       	ldi	r24, 0x32	; 50
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a0 e0       	ldi	r26, 0x00	; 0
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	8b a7       	std	Y+43, r24	; 0x2b
    28a0:	9c a7       	std	Y+44, r25	; 0x2c
    28a2:	ad a7       	std	Y+45, r26	; 0x2d
    28a4:	be a7       	std	Y+46, r27	; 0x2e
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){
    28a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    28a8:	88 23       	and	r24, r24
    28aa:	0c f4       	brge	.+2      	; 0x28ae <SevSeg_voidMulBCD+0xa4>
    28ac:	ad c2       	rjmp	.+1370   	; 0x2e08 <SevSeg_voidMulBCD+0x5fe>
    28ae:	8f ad       	ldd	r24, Y+63	; 0x3f
    28b0:	8a 30       	cpi	r24, 0x0A	; 10
    28b2:	0c f0       	brlt	.+2      	; 0x28b6 <SevSeg_voidMulBCD+0xac>
    28b4:	a9 c2       	rjmp	.+1362   	; 0x2e08 <SevSeg_voidMulBCD+0x5fe>
    28b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    28b8:	8a 30       	cpi	r24, 0x0A	; 10
    28ba:	0c f0       	brlt	.+2      	; 0x28be <SevSeg_voidMulBCD+0xb4>
    28bc:	a5 c2       	rjmp	.+1354   	; 0x2e08 <SevSeg_voidMulBCD+0x5fe>
    28be:	8d ad       	ldd	r24, Y+61	; 0x3d
    28c0:	88 23       	and	r24, r24
    28c2:	0c f4       	brge	.+2      	; 0x28c6 <SevSeg_voidMulBCD+0xbc>
    28c4:	a1 c2       	rjmp	.+1346   	; 0x2e08 <SevSeg_voidMulBCD+0x5fe>

		if(start < end){
    28c6:	de 01       	movw	r26, r28
    28c8:	af 5b       	subi	r26, 0xBF	; 191
    28ca:	bf 4f       	sbci	r27, 0xFF	; 255
    28cc:	fe 01       	movw	r30, r28
    28ce:	e0 5c       	subi	r30, 0xC0	; 192
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	90 81       	ld	r25, Z
    28d4:	8c 91       	ld	r24, X
    28d6:	98 17       	cp	r25, r24
    28d8:	0c f0       	brlt	.+2      	; 0x28dc <SevSeg_voidMulBCD+0xd2>
    28da:	98 c1       	rjmp	.+816    	; 0x2c0c <SevSeg_voidMulBCD+0x402>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    28dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    28de:	99 27       	eor	r25, r25
    28e0:	87 fd       	sbrc	r24, 7
    28e2:	90 95       	com	r25
    28e4:	a9 2f       	mov	r26, r25
    28e6:	b9 2f       	mov	r27, r25
    28e8:	88 af       	std	Y+56, r24	; 0x38
    28ea:	99 af       	std	Y+57, r25	; 0x39
    28ec:	aa af       	std	Y+58, r26	; 0x3a
    28ee:	bb af       	std	Y+59, r27	; 0x3b
    28f0:	7b c1       	rjmp	.+758    	; 0x2be8 <SevSeg_voidMulBCD+0x3de>
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    28f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    28f4:	99 27       	eor	r25, r25
    28f6:	87 fd       	sbrc	r24, 7
    28f8:	90 95       	com	r25
    28fa:	a9 2f       	mov	r26, r25
    28fc:	b9 2f       	mov	r27, r25
    28fe:	8c ab       	std	Y+52, r24	; 0x34
    2900:	9d ab       	std	Y+53, r25	; 0x35
    2902:	ae ab       	std	Y+54, r26	; 0x36
    2904:	bf ab       	std	Y+55, r27	; 0x37
    2906:	5a c1       	rjmp	.+692    	; 0x2bbc <SevSeg_voidMulBCD+0x3b2>
					count = 0;
    2908:	1f a6       	std	Y+47, r1	; 0x2f
    290a:	18 aa       	std	Y+48, r1	; 0x30
    290c:	19 aa       	std	Y+49, r1	; 0x31
    290e:	1a aa       	std	Y+50, r1	; 0x32
    2910:	1b c1       	rjmp	.+566    	; 0x2b48 <SevSeg_voidMulBCD+0x33e>
					while(count< delay){
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter1]);
    2912:	88 ad       	ldd	r24, Y+56	; 0x38
    2914:	99 ad       	ldd	r25, Y+57	; 0x39
    2916:	aa ad       	ldd	r26, Y+58	; 0x3a
    2918:	bb ad       	ldd	r27, Y+59	; 0x3b
    291a:	fc 01       	movw	r30, r24
    291c:	e6 58       	subi	r30, 0x86	; 134
    291e:	fe 4f       	sbci	r31, 0xFE	; 254
    2920:	90 81       	ld	r25, Z
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	69 2f       	mov	r22, r25
    2926:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, Low);
    292a:	82 e0       	ldi	r24, 0x02	; 2
    292c:	66 e0       	ldi	r22, 0x06	; 6
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, High);
    2934:	82 e0       	ldi	r24, 0x02	; 2
    2936:	65 e0       	ldi	r22, 0x05	; 5
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	a0 e2       	ldi	r26, 0x20	; 32
    2944:	b1 e4       	ldi	r27, 0x41	; 65
    2946:	8f a3       	std	Y+39, r24	; 0x27
    2948:	98 a7       	std	Y+40, r25	; 0x28
    294a:	a9 a7       	std	Y+41, r26	; 0x29
    294c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294e:	6f a1       	ldd	r22, Y+39	; 0x27
    2950:	78 a5       	ldd	r23, Y+40	; 0x28
    2952:	89 a5       	ldd	r24, Y+41	; 0x29
    2954:	9a a5       	ldd	r25, Y+42	; 0x2a
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	4a e7       	ldi	r20, 0x7A	; 122
    295c:	55 e4       	ldi	r21, 0x45	; 69
    295e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	8b a3       	std	Y+35, r24	; 0x23
    2968:	9c a3       	std	Y+36, r25	; 0x24
    296a:	ad a3       	std	Y+37, r26	; 0x25
    296c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    296e:	6b a1       	ldd	r22, Y+35	; 0x23
    2970:	7c a1       	ldd	r23, Y+36	; 0x24
    2972:	8d a1       	ldd	r24, Y+37	; 0x25
    2974:	9e a1       	ldd	r25, Y+38	; 0x26
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e8       	ldi	r20, 0x80	; 128
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2982:	88 23       	and	r24, r24
    2984:	2c f4       	brge	.+10     	; 0x2990 <SevSeg_voidMulBCD+0x186>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9a a3       	std	Y+34, r25	; 0x22
    298c:	89 a3       	std	Y+33, r24	; 0x21
    298e:	3f c0       	rjmp	.+126    	; 0x2a0e <SevSeg_voidMulBCD+0x204>
	else if (__tmp > 65535)
    2990:	6b a1       	ldd	r22, Y+35	; 0x23
    2992:	7c a1       	ldd	r23, Y+36	; 0x24
    2994:	8d a1       	ldd	r24, Y+37	; 0x25
    2996:	9e a1       	ldd	r25, Y+38	; 0x26
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	3f ef       	ldi	r19, 0xFF	; 255
    299c:	4f e7       	ldi	r20, 0x7F	; 127
    299e:	57 e4       	ldi	r21, 0x47	; 71
    29a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a4:	18 16       	cp	r1, r24
    29a6:	4c f5       	brge	.+82     	; 0x29fa <SevSeg_voidMulBCD+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a8:	6f a1       	ldd	r22, Y+39	; 0x27
    29aa:	78 a5       	ldd	r23, Y+40	; 0x28
    29ac:	89 a5       	ldd	r24, Y+41	; 0x29
    29ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e2       	ldi	r20, 0x20	; 32
    29b6:	51 e4       	ldi	r21, 0x41	; 65
    29b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	bc 01       	movw	r22, r24
    29c2:	cd 01       	movw	r24, r26
    29c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	9a a3       	std	Y+34, r25	; 0x22
    29ce:	89 a3       	std	Y+33, r24	; 0x21
    29d0:	0f c0       	rjmp	.+30     	; 0x29f0 <SevSeg_voidMulBCD+0x1e6>
    29d2:	80 e9       	ldi	r24, 0x90	; 144
    29d4:	91 e0       	ldi	r25, 0x01	; 1
    29d6:	98 a3       	std	Y+32, r25	; 0x20
    29d8:	8f 8f       	std	Y+31, r24	; 0x1f
    29da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29dc:	98 a1       	ldd	r25, Y+32	; 0x20
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <SevSeg_voidMulBCD+0x1d4>
    29e2:	98 a3       	std	Y+32, r25	; 0x20
    29e4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e6:	89 a1       	ldd	r24, Y+33	; 0x21
    29e8:	9a a1       	ldd	r25, Y+34	; 0x22
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	9a a3       	std	Y+34, r25	; 0x22
    29ee:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	89 a1       	ldd	r24, Y+33	; 0x21
    29f2:	9a a1       	ldd	r25, Y+34	; 0x22
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	69 f7       	brne	.-38     	; 0x29d2 <SevSeg_voidMulBCD+0x1c8>
    29f8:	14 c0       	rjmp	.+40     	; 0x2a22 <SevSeg_voidMulBCD+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fa:	6b a1       	ldd	r22, Y+35	; 0x23
    29fc:	7c a1       	ldd	r23, Y+36	; 0x24
    29fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2a00:	9e a1       	ldd	r25, Y+38	; 0x26
    2a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9a a3       	std	Y+34, r25	; 0x22
    2a0c:	89 a3       	std	Y+33, r24	; 0x21
    2a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a10:	9a a1       	ldd	r25, Y+34	; 0x22
    2a12:	9e 8f       	std	Y+30, r25	; 0x1e
    2a14:	8d 8f       	std	Y+29, r24	; 0x1d
    2a16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a18:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <SevSeg_voidMulBCD+0x210>
    2a1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a20:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(Sev_DELAY);
						DIO_voidSetPortValue(Sev_PORT,MulBCDArr[Local_Counter2]);
    2a22:	8c a9       	ldd	r24, Y+52	; 0x34
    2a24:	9d a9       	ldd	r25, Y+53	; 0x35
    2a26:	ae a9       	ldd	r26, Y+54	; 0x36
    2a28:	bf a9       	ldd	r27, Y+55	; 0x37
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	e6 58       	subi	r30, 0x86	; 134
    2a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a30:	90 81       	ld	r25, Z
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	69 2f       	mov	r22, r25
    2a36:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN6, High);
    2a3a:	82 e0       	ldi	r24, 0x02	; 2
    2a3c:	66 e0       	ldi	r22, 0x06	; 6
    2a3e:	41 e0       	ldi	r20, 0x01	; 1
    2a40:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	65 e0       	ldi	r22, 0x05	; 5
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	a0 e2       	ldi	r26, 0x20	; 32
    2a54:	b1 e4       	ldi	r27, 0x41	; 65
    2a56:	89 8f       	std	Y+25, r24	; 0x19
    2a58:	9a 8f       	std	Y+26, r25	; 0x1a
    2a5a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	4a e7       	ldi	r20, 0x7A	; 122
    2a6c:	55 e4       	ldi	r21, 0x45	; 69
    2a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	8d 8b       	std	Y+21, r24	; 0x15
    2a78:	9e 8b       	std	Y+22, r25	; 0x16
    2a7a:	af 8b       	std	Y+23, r26	; 0x17
    2a7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a80:	7e 89       	ldd	r23, Y+22	; 0x16
    2a82:	8f 89       	ldd	r24, Y+23	; 0x17
    2a84:	98 8d       	ldd	r25, Y+24	; 0x18
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	2c f4       	brge	.+10     	; 0x2aa0 <SevSeg_voidMulBCD+0x296>
		__ticks = 1;
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	9c 8b       	std	Y+20, r25	; 0x14
    2a9c:	8b 8b       	std	Y+19, r24	; 0x13
    2a9e:	3f c0       	rjmp	.+126    	; 0x2b1e <SevSeg_voidMulBCD+0x314>
	else if (__tmp > 65535)
    2aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	3f ef       	ldi	r19, 0xFF	; 255
    2aac:	4f e7       	ldi	r20, 0x7F	; 127
    2aae:	57 e4       	ldi	r21, 0x47	; 71
    2ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ab4:	18 16       	cp	r1, r24
    2ab6:	4c f5       	brge	.+82     	; 0x2b0a <SevSeg_voidMulBCD+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab8:	69 8d       	ldd	r22, Y+25	; 0x19
    2aba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2abe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e2       	ldi	r20, 0x20	; 32
    2ac6:	51 e4       	ldi	r21, 0x41	; 65
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	bc 01       	movw	r22, r24
    2ad2:	cd 01       	movw	r24, r26
    2ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	9c 8b       	std	Y+20, r25	; 0x14
    2ade:	8b 8b       	std	Y+19, r24	; 0x13
    2ae0:	0f c0       	rjmp	.+30     	; 0x2b00 <SevSeg_voidMulBCD+0x2f6>
    2ae2:	80 e9       	ldi	r24, 0x90	; 144
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	9a 8b       	std	Y+18, r25	; 0x12
    2ae8:	89 8b       	std	Y+17, r24	; 0x11
    2aea:	89 89       	ldd	r24, Y+17	; 0x11
    2aec:	9a 89       	ldd	r25, Y+18	; 0x12
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <SevSeg_voidMulBCD+0x2e4>
    2af2:	9a 8b       	std	Y+18, r25	; 0x12
    2af4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af6:	8b 89       	ldd	r24, Y+19	; 0x13
    2af8:	9c 89       	ldd	r25, Y+20	; 0x14
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	9c 8b       	std	Y+20, r25	; 0x14
    2afe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b00:	8b 89       	ldd	r24, Y+19	; 0x13
    2b02:	9c 89       	ldd	r25, Y+20	; 0x14
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	69 f7       	brne	.-38     	; 0x2ae2 <SevSeg_voidMulBCD+0x2d8>
    2b08:	14 c0       	rjmp	.+40     	; 0x2b32 <SevSeg_voidMulBCD+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b10:	98 8d       	ldd	r25, Y+24	; 0x18
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9c 8b       	std	Y+20, r25	; 0x14
    2b1c:	8b 8b       	std	Y+19, r24	; 0x13
    2b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b20:	9c 89       	ldd	r25, Y+20	; 0x14
    2b22:	98 8b       	std	Y+16, r25	; 0x10
    2b24:	8f 87       	std	Y+15, r24	; 0x0f
    2b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b28:	98 89       	ldd	r25, Y+16	; 0x10
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	f1 f7       	brne	.-4      	; 0x2b2a <SevSeg_voidMulBCD+0x320>
    2b2e:	98 8b       	std	Y+16, r25	; 0x10
    2b30:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(Sev_DELAY);
						count++;
    2b32:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b34:	98 a9       	ldd	r25, Y+48	; 0x30
    2b36:	a9 a9       	ldd	r26, Y+49	; 0x31
    2b38:	ba a9       	ldd	r27, Y+50	; 0x32
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	a1 1d       	adc	r26, r1
    2b3e:	b1 1d       	adc	r27, r1
    2b40:	8f a7       	std	Y+47, r24	; 0x2f
    2b42:	98 ab       	std	Y+48, r25	; 0x30
    2b44:	a9 ab       	std	Y+49, r26	; 0x31
    2b46:	ba ab       	std	Y+50, r27	; 0x32

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
					count = 0;
					while(count< delay){
    2b48:	2f a5       	ldd	r18, Y+47	; 0x2f
    2b4a:	38 a9       	ldd	r19, Y+48	; 0x30
    2b4c:	49 a9       	ldd	r20, Y+49	; 0x31
    2b4e:	5a a9       	ldd	r21, Y+50	; 0x32
    2b50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b52:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b54:	ad a5       	ldd	r26, Y+45	; 0x2d
    2b56:	be a5       	ldd	r27, Y+46	; 0x2e
    2b58:	28 17       	cp	r18, r24
    2b5a:	39 07       	cpc	r19, r25
    2b5c:	4a 07       	cpc	r20, r26
    2b5e:	5b 07       	cpc	r21, r27
    2b60:	08 f4       	brcc	.+2      	; 0x2b64 <SevSeg_voidMulBCD+0x35a>
    2b62:	d7 ce       	rjmp	.-594    	; 0x2912 <SevSeg_voidMulBCD+0x108>
						DIO_voidSetPinValue(DIO_PortB, DIO_PIN5, Low);
						_delay_ms(Sev_DELAY);
						count++;
					}
					//DIO_voidSetPortValue(Sev_PORT,num);
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2b64:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b66:	28 2f       	mov	r18, r24
    2b68:	33 27       	eor	r19, r19
    2b6a:	27 fd       	sbrc	r18, 7
    2b6c:	30 95       	com	r19
    2b6e:	43 2f       	mov	r20, r19
    2b70:	53 2f       	mov	r21, r19
    2b72:	8c a9       	ldd	r24, Y+52	; 0x34
    2b74:	9d a9       	ldd	r25, Y+53	; 0x35
    2b76:	ae a9       	ldd	r26, Y+54	; 0x36
    2b78:	bf a9       	ldd	r27, Y+55	; 0x37
    2b7a:	28 17       	cp	r18, r24
    2b7c:	39 07       	cpc	r19, r25
    2b7e:	4a 07       	cpc	r20, r26
    2b80:	5b 07       	cpc	r21, r27
    2b82:	89 f4       	brne	.+34     	; 0x2ba6 <SevSeg_voidMulBCD+0x39c>
    2b84:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b86:	28 2f       	mov	r18, r24
    2b88:	33 27       	eor	r19, r19
    2b8a:	27 fd       	sbrc	r18, 7
    2b8c:	30 95       	com	r19
    2b8e:	43 2f       	mov	r20, r19
    2b90:	53 2f       	mov	r21, r19
    2b92:	88 ad       	ldd	r24, Y+56	; 0x38
    2b94:	99 ad       	ldd	r25, Y+57	; 0x39
    2b96:	aa ad       	ldd	r26, Y+58	; 0x3a
    2b98:	bb ad       	ldd	r27, Y+59	; 0x3b
    2b9a:	28 17       	cp	r18, r24
    2b9c:	39 07       	cpc	r19, r25
    2b9e:	4a 07       	cpc	r20, r26
    2ba0:	5b 07       	cpc	r21, r27
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <SevSeg_voidMulBCD+0x39c>
    2ba4:	31 c1       	rjmp	.+610    	; 0x2e08 <SevSeg_voidMulBCD+0x5fe>
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 <10; Local_Counter2++){
    2ba6:	8c a9       	ldd	r24, Y+52	; 0x34
    2ba8:	9d a9       	ldd	r25, Y+53	; 0x35
    2baa:	ae a9       	ldd	r26, Y+54	; 0x36
    2bac:	bf a9       	ldd	r27, Y+55	; 0x37
    2bae:	01 96       	adiw	r24, 0x01	; 1
    2bb0:	a1 1d       	adc	r26, r1
    2bb2:	b1 1d       	adc	r27, r1
    2bb4:	8c ab       	std	Y+52, r24	; 0x34
    2bb6:	9d ab       	std	Y+53, r25	; 0x35
    2bb8:	ae ab       	std	Y+54, r26	; 0x36
    2bba:	bf ab       	std	Y+55, r27	; 0x37
    2bbc:	8c a9       	ldd	r24, Y+52	; 0x34
    2bbe:	9d a9       	ldd	r25, Y+53	; 0x35
    2bc0:	ae a9       	ldd	r26, Y+54	; 0x36
    2bc2:	bf a9       	ldd	r27, Y+55	; 0x37
    2bc4:	8a 30       	cpi	r24, 0x0A	; 10
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	a1 05       	cpc	r26, r1
    2bca:	b1 05       	cpc	r27, r1
    2bcc:	0c f4       	brge	.+2      	; 0x2bd0 <SevSeg_voidMulBCD+0x3c6>
    2bce:	9c ce       	rjmp	.-712    	; 0x2908 <SevSeg_voidMulBCD+0xfe>
					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}

				Local_SevSegOneStart = 0;
    2bd0:	1e ae       	std	Y+62, r1	; 0x3e
	u32 count = 0;
	u32 delay = 1000 / (Sev_DELAY * 2);
	if(Local_SevSegTwoStart >= 0 && Local_SevSegTwoStart < 10 && Local_SevSegTwoEnd < 10 && Local_SevSegTwoEnd >= 0){

		if(start < end){
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 <= Local_SevSegTwoEnd; Local_Counter1++){
    2bd2:	88 ad       	ldd	r24, Y+56	; 0x38
    2bd4:	99 ad       	ldd	r25, Y+57	; 0x39
    2bd6:	aa ad       	ldd	r26, Y+58	; 0x3a
    2bd8:	bb ad       	ldd	r27, Y+59	; 0x3b
    2bda:	01 96       	adiw	r24, 0x01	; 1
    2bdc:	a1 1d       	adc	r26, r1
    2bde:	b1 1d       	adc	r27, r1
    2be0:	88 af       	std	Y+56, r24	; 0x38
    2be2:	99 af       	std	Y+57, r25	; 0x39
    2be4:	aa af       	std	Y+58, r26	; 0x3a
    2be6:	bb af       	std	Y+59, r27	; 0x3b
    2be8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bea:	28 2f       	mov	r18, r24
    2bec:	33 27       	eor	r19, r19
    2bee:	27 fd       	sbrc	r18, 7
    2bf0:	30 95       	com	r19
    2bf2:	43 2f       	mov	r20, r19
    2bf4:	53 2f       	mov	r21, r19
    2bf6:	88 ad       	ldd	r24, Y+56	; 0x38
    2bf8:	99 ad       	ldd	r25, Y+57	; 0x39
    2bfa:	aa ad       	ldd	r26, Y+58	; 0x3a
    2bfc:	bb ad       	ldd	r27, Y+59	; 0x3b
    2bfe:	28 17       	cp	r18, r24
    2c00:	39 07       	cpc	r19, r25
    2c02:	4a 07       	cpc	r20, r26
    2c04:	5b 07       	cpc	r21, r27
    2c06:	0c f0       	brlt	.+2      	; 0x2c0a <SevSeg_voidMulBCD+0x400>
    2c08:	74 ce       	rjmp	.-792    	; 0x28f2 <SevSeg_voidMulBCD+0xe8>
    2c0a:	fe c0       	rjmp	.+508    	; 0x2e08 <SevSeg_voidMulBCD+0x5fe>

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2c0c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c0e:	99 27       	eor	r25, r25
    2c10:	87 fd       	sbrc	r24, 7
    2c12:	90 95       	com	r25
    2c14:	a9 2f       	mov	r26, r25
    2c16:	b9 2f       	mov	r27, r25
    2c18:	88 af       	std	Y+56, r24	; 0x38
    2c1a:	99 af       	std	Y+57, r25	; 0x39
    2c1c:	aa af       	std	Y+58, r26	; 0x3a
    2c1e:	bb af       	std	Y+59, r27	; 0x3b
    2c20:	e2 c0       	rjmp	.+452    	; 0x2de6 <SevSeg_voidMulBCD+0x5dc>

				num &= 0x0F;
    2c22:	8b a9       	ldd	r24, Y+51	; 0x33
    2c24:	8f 70       	andi	r24, 0x0F	; 15
    2c26:	8b ab       	std	Y+51, r24	; 0x33
				num |= (Local_Counter1 << 4);
    2c28:	88 ad       	ldd	r24, Y+56	; 0x38
    2c2a:	99 ad       	ldd	r25, Y+57	; 0x39
    2c2c:	aa ad       	ldd	r26, Y+58	; 0x3a
    2c2e:	bb ad       	ldd	r27, Y+59	; 0x3b
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	aa 1f       	adc	r26, r26
    2c36:	bb 1f       	adc	r27, r27
    2c38:	88 0f       	add	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	aa 1f       	adc	r26, r26
    2c3e:	bb 1f       	adc	r27, r27
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	aa 1f       	adc	r26, r26
    2c46:	bb 1f       	adc	r27, r27
    2c48:	88 0f       	add	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	aa 1f       	adc	r26, r26
    2c4e:	bb 1f       	adc	r27, r27
    2c50:	98 2f       	mov	r25, r24
    2c52:	8b a9       	ldd	r24, Y+51	; 0x33
    2c54:	89 2b       	or	r24, r25
    2c56:	8b ab       	std	Y+51, r24	; 0x33

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2c58:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c5a:	99 27       	eor	r25, r25
    2c5c:	87 fd       	sbrc	r24, 7
    2c5e:	90 95       	com	r25
    2c60:	a9 2f       	mov	r26, r25
    2c62:	b9 2f       	mov	r27, r25
    2c64:	8c ab       	std	Y+52, r24	; 0x34
    2c66:	9d ab       	std	Y+53, r25	; 0x35
    2c68:	ae ab       	std	Y+54, r26	; 0x36
    2c6a:	bf ab       	std	Y+55, r27	; 0x37
    2c6c:	a8 c0       	rjmp	.+336    	; 0x2dbe <SevSeg_voidMulBCD+0x5b4>
					num &= 0xF0;
    2c6e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c70:	80 7f       	andi	r24, 0xF0	; 240
    2c72:	8b ab       	std	Y+51, r24	; 0x33
					num |= Local_Counter2;
    2c74:	9c a9       	ldd	r25, Y+52	; 0x34
    2c76:	8b a9       	ldd	r24, Y+51	; 0x33
    2c78:	89 2b       	or	r24, r25
    2c7a:	8b ab       	std	Y+51, r24	; 0x33
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	a0 e2       	ldi	r26, 0x20	; 32
    2c82:	b1 e4       	ldi	r27, 0x41	; 65
    2c84:	8b 87       	std	Y+11, r24	; 0x0b
    2c86:	9c 87       	std	Y+12, r25	; 0x0c
    2c88:	ad 87       	std	Y+13, r26	; 0x0d
    2c8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	4a e7       	ldi	r20, 0x7A	; 122
    2c9a:	55 e4       	ldi	r21, 0x45	; 69
    2c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	8f 83       	std	Y+7, r24	; 0x07
    2ca6:	98 87       	std	Y+8, r25	; 0x08
    2ca8:	a9 87       	std	Y+9, r26	; 0x09
    2caa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cac:	6f 81       	ldd	r22, Y+7	; 0x07
    2cae:	78 85       	ldd	r23, Y+8	; 0x08
    2cb0:	89 85       	ldd	r24, Y+9	; 0x09
    2cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e8       	ldi	r20, 0x80	; 128
    2cba:	5f e3       	ldi	r21, 0x3F	; 63
    2cbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc0:	88 23       	and	r24, r24
    2cc2:	2c f4       	brge	.+10     	; 0x2cce <SevSeg_voidMulBCD+0x4c4>
		__ticks = 1;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	8d 83       	std	Y+5, r24	; 0x05
    2ccc:	3f c0       	rjmp	.+126    	; 0x2d4c <SevSeg_voidMulBCD+0x542>
	else if (__tmp > 65535)
    2cce:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd0:	78 85       	ldd	r23, Y+8	; 0x08
    2cd2:	89 85       	ldd	r24, Y+9	; 0x09
    2cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	3f ef       	ldi	r19, 0xFF	; 255
    2cda:	4f e7       	ldi	r20, 0x7F	; 127
    2cdc:	57 e4       	ldi	r21, 0x47	; 71
    2cde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce2:	18 16       	cp	r1, r24
    2ce4:	4c f5       	brge	.+82     	; 0x2d38 <SevSeg_voidMulBCD+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e2       	ldi	r20, 0x20	; 32
    2cf4:	51 e4       	ldi	r21, 0x41	; 65
    2cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	bc 01       	movw	r22, r24
    2d00:	cd 01       	movw	r24, r26
    2d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	9e 83       	std	Y+6, r25	; 0x06
    2d0c:	8d 83       	std	Y+5, r24	; 0x05
    2d0e:	0f c0       	rjmp	.+30     	; 0x2d2e <SevSeg_voidMulBCD+0x524>
    2d10:	80 e9       	ldi	r24, 0x90	; 144
    2d12:	91 e0       	ldi	r25, 0x01	; 1
    2d14:	9c 83       	std	Y+4, r25	; 0x04
    2d16:	8b 83       	std	Y+3, r24	; 0x03
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <SevSeg_voidMulBCD+0x512>
    2d20:	9c 83       	std	Y+4, r25	; 0x04
    2d22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d24:	8d 81       	ldd	r24, Y+5	; 0x05
    2d26:	9e 81       	ldd	r25, Y+6	; 0x06
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	9e 83       	std	Y+6, r25	; 0x06
    2d2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	9e 81       	ldd	r25, Y+6	; 0x06
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	69 f7       	brne	.-38     	; 0x2d10 <SevSeg_voidMulBCD+0x506>
    2d36:	14 c0       	rjmp	.+40     	; 0x2d60 <SevSeg_voidMulBCD+0x556>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d38:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3a:	78 85       	ldd	r23, Y+8	; 0x08
    2d3c:	89 85       	ldd	r24, Y+9	; 0x09
    2d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d50:	9a 83       	std	Y+2, r25	; 0x02
    2d52:	89 83       	std	Y+1, r24	; 0x01
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	9a 81       	ldd	r25, Y+2	; 0x02
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <SevSeg_voidMulBCD+0x54e>
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(Sev_DELAY);
					DIO_voidSetPortValue(Sev_PORT,num);
    2d60:	82 e0       	ldi	r24, 0x02	; 2
    2d62:	6b a9       	ldd	r22, Y+51	; 0x33
    2d64:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
    2d68:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	33 27       	eor	r19, r19
    2d6e:	27 fd       	sbrc	r18, 7
    2d70:	30 95       	com	r19
    2d72:	43 2f       	mov	r20, r19
    2d74:	53 2f       	mov	r21, r19
    2d76:	8c a9       	ldd	r24, Y+52	; 0x34
    2d78:	9d a9       	ldd	r25, Y+53	; 0x35
    2d7a:	ae a9       	ldd	r26, Y+54	; 0x36
    2d7c:	bf a9       	ldd	r27, Y+55	; 0x37
    2d7e:	28 17       	cp	r18, r24
    2d80:	39 07       	cpc	r19, r25
    2d82:	4a 07       	cpc	r20, r26
    2d84:	5b 07       	cpc	r21, r27
    2d86:	81 f4       	brne	.+32     	; 0x2da8 <SevSeg_voidMulBCD+0x59e>
    2d88:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	33 27       	eor	r19, r19
    2d8e:	27 fd       	sbrc	r18, 7
    2d90:	30 95       	com	r19
    2d92:	43 2f       	mov	r20, r19
    2d94:	53 2f       	mov	r21, r19
    2d96:	88 ad       	ldd	r24, Y+56	; 0x38
    2d98:	99 ad       	ldd	r25, Y+57	; 0x39
    2d9a:	aa ad       	ldd	r26, Y+58	; 0x3a
    2d9c:	bb ad       	ldd	r27, Y+59	; 0x3b
    2d9e:	28 17       	cp	r18, r24
    2da0:	39 07       	cpc	r19, r25
    2da2:	4a 07       	cpc	r20, r26
    2da4:	5b 07       	cpc	r21, r27
    2da6:	81 f1       	breq	.+96     	; 0x2e08 <SevSeg_voidMulBCD+0x5fe>
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){

				num &= 0x0F;
				num |= (Local_Counter1 << 4);

				for(Local_Counter2 =Local_SevSegOneStart;Local_Counter2 >= 0; Local_Counter2--){
    2da8:	8c a9       	ldd	r24, Y+52	; 0x34
    2daa:	9d a9       	ldd	r25, Y+53	; 0x35
    2dac:	ae a9       	ldd	r26, Y+54	; 0x36
    2dae:	bf a9       	ldd	r27, Y+55	; 0x37
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	a1 09       	sbc	r26, r1
    2db4:	b1 09       	sbc	r27, r1
    2db6:	8c ab       	std	Y+52, r24	; 0x34
    2db8:	9d ab       	std	Y+53, r25	; 0x35
    2dba:	ae ab       	std	Y+54, r26	; 0x36
    2dbc:	bf ab       	std	Y+55, r27	; 0x37
    2dbe:	8c a9       	ldd	r24, Y+52	; 0x34
    2dc0:	9d a9       	ldd	r25, Y+53	; 0x35
    2dc2:	ae a9       	ldd	r26, Y+54	; 0x36
    2dc4:	bf a9       	ldd	r27, Y+55	; 0x37
    2dc6:	bb 23       	and	r27, r27
    2dc8:	0c f0       	brlt	.+2      	; 0x2dcc <SevSeg_voidMulBCD+0x5c2>
    2dca:	51 cf       	rjmp	.-350    	; 0x2c6e <SevSeg_voidMulBCD+0x464>

					if(Local_Counter2 == Local_SevSegOneEnd && Local_Counter1 == Local_SevSegTwoEnd){
						return;
					}
				}
				Local_SevSegOneStart = 9;
    2dcc:	89 e0       	ldi	r24, 0x09	; 9
    2dce:	8e af       	std	Y+62, r24	; 0x3e

				Local_SevSegOneStart = 0;
			}
		}
		else{
			for(Local_Counter1 = Local_SevSegTwoStart; Local_Counter1 >= Local_SevSegTwoEnd; Local_Counter1--){
    2dd0:	88 ad       	ldd	r24, Y+56	; 0x38
    2dd2:	99 ad       	ldd	r25, Y+57	; 0x39
    2dd4:	aa ad       	ldd	r26, Y+58	; 0x3a
    2dd6:	bb ad       	ldd	r27, Y+59	; 0x3b
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	a1 09       	sbc	r26, r1
    2ddc:	b1 09       	sbc	r27, r1
    2dde:	88 af       	std	Y+56, r24	; 0x38
    2de0:	99 af       	std	Y+57, r25	; 0x39
    2de2:	aa af       	std	Y+58, r26	; 0x3a
    2de4:	bb af       	std	Y+59, r27	; 0x3b
    2de6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2de8:	28 2f       	mov	r18, r24
    2dea:	33 27       	eor	r19, r19
    2dec:	27 fd       	sbrc	r18, 7
    2dee:	30 95       	com	r19
    2df0:	43 2f       	mov	r20, r19
    2df2:	53 2f       	mov	r21, r19
    2df4:	88 ad       	ldd	r24, Y+56	; 0x38
    2df6:	99 ad       	ldd	r25, Y+57	; 0x39
    2df8:	aa ad       	ldd	r26, Y+58	; 0x3a
    2dfa:	bb ad       	ldd	r27, Y+59	; 0x3b
    2dfc:	82 17       	cp	r24, r18
    2dfe:	93 07       	cpc	r25, r19
    2e00:	a4 07       	cpc	r26, r20
    2e02:	b5 07       	cpc	r27, r21
    2e04:	0c f0       	brlt	.+2      	; 0x2e08 <SevSeg_voidMulBCD+0x5fe>
    2e06:	0d cf       	rjmp	.-486    	; 0x2c22 <SevSeg_voidMulBCD+0x418>
				}
				Local_SevSegOneStart = 9;
			}
		}
	}
}
    2e08:	cf 5b       	subi	r28, 0xBF	; 191
    2e0a:	df 4f       	sbci	r29, 0xFF	; 255
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	cf 91       	pop	r28
    2e18:	df 91       	pop	r29
    2e1a:	08 95       	ret

00002e1c <LCD_voidInit>:
#include "../Header/LCD_Interface.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "util/delay.h"


void LCD_voidInit(){
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	df 93       	push	r29
    2e22:	cf 93       	push	r28
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	cc 58       	subi	r28, 0x8C	; 140
    2e2a:	d0 40       	sbci	r29, 0x00	; 0
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
    2e36:	fe 01       	movw	r30, r28
    2e38:	e7 57       	subi	r30, 0x77	; 119
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	ac e0       	ldi	r26, 0x0C	; 12
    2e42:	b2 e4       	ldi	r27, 0x42	; 66
    2e44:	80 83       	st	Z, r24
    2e46:	91 83       	std	Z+1, r25	; 0x01
    2e48:	a2 83       	std	Z+2, r26	; 0x02
    2e4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4c:	8e 01       	movw	r16, r28
    2e4e:	0b 57       	subi	r16, 0x7B	; 123
    2e50:	1f 4f       	sbci	r17, 0xFF	; 255
    2e52:	fe 01       	movw	r30, r28
    2e54:	e7 57       	subi	r30, 0x77	; 119
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	60 81       	ld	r22, Z
    2e5a:	71 81       	ldd	r23, Z+1	; 0x01
    2e5c:	82 81       	ldd	r24, Z+2	; 0x02
    2e5e:	93 81       	ldd	r25, Z+3	; 0x03
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	4a e7       	ldi	r20, 0x7A	; 122
    2e66:	55 e4       	ldi	r21, 0x45	; 69
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	f8 01       	movw	r30, r16
    2e72:	80 83       	st	Z, r24
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	a2 83       	std	Z+2, r26	; 0x02
    2e78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	eb 57       	subi	r30, 0x7B	; 123
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	60 81       	ld	r22, Z
    2e82:	71 81       	ldd	r23, Z+1	; 0x01
    2e84:	82 81       	ldd	r24, Z+2	; 0x02
    2e86:	93 81       	ldd	r25, Z+3	; 0x03
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	40 e8       	ldi	r20, 0x80	; 128
    2e8e:	5f e3       	ldi	r21, 0x3F	; 63
    2e90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e94:	88 23       	and	r24, r24
    2e96:	44 f4       	brge	.+16     	; 0x2ea8 <LCD_voidInit+0x8c>
		__ticks = 1;
    2e98:	fe 01       	movw	r30, r28
    2e9a:	ed 57       	subi	r30, 0x7D	; 125
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	80 83       	st	Z, r24
    2ea6:	64 c0       	rjmp	.+200    	; 0x2f70 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	eb 57       	subi	r30, 0x7B	; 123
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	60 81       	ld	r22, Z
    2eb0:	71 81       	ldd	r23, Z+1	; 0x01
    2eb2:	82 81       	ldd	r24, Z+2	; 0x02
    2eb4:	93 81       	ldd	r25, Z+3	; 0x03
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	3f ef       	ldi	r19, 0xFF	; 255
    2eba:	4f e7       	ldi	r20, 0x7F	; 127
    2ebc:	57 e4       	ldi	r21, 0x47	; 71
    2ebe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec2:	18 16       	cp	r1, r24
    2ec4:	0c f0       	brlt	.+2      	; 0x2ec8 <LCD_voidInit+0xac>
    2ec6:	43 c0       	rjmp	.+134    	; 0x2f4e <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec8:	fe 01       	movw	r30, r28
    2eca:	e7 57       	subi	r30, 0x77	; 119
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	60 81       	ld	r22, Z
    2ed0:	71 81       	ldd	r23, Z+1	; 0x01
    2ed2:	82 81       	ldd	r24, Z+2	; 0x02
    2ed4:	93 81       	ldd	r25, Z+3	; 0x03
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e2       	ldi	r20, 0x20	; 32
    2edc:	51 e4       	ldi	r21, 0x41	; 65
    2ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	8e 01       	movw	r16, r28
    2ee8:	0d 57       	subi	r16, 0x7D	; 125
    2eea:	1f 4f       	sbci	r17, 0xFF	; 255
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	f8 01       	movw	r30, r16
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	80 83       	st	Z, r24
    2efe:	1f c0       	rjmp	.+62     	; 0x2f3e <LCD_voidInit+0x122>
    2f00:	fe 01       	movw	r30, r28
    2f02:	ef 57       	subi	r30, 0x7F	; 127
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	80 e9       	ldi	r24, 0x90	; 144
    2f08:	91 e0       	ldi	r25, 0x01	; 1
    2f0a:	91 83       	std	Z+1, r25	; 0x01
    2f0c:	80 83       	st	Z, r24
    2f0e:	fe 01       	movw	r30, r28
    2f10:	ef 57       	subi	r30, 0x7F	; 127
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	80 81       	ld	r24, Z
    2f16:	91 81       	ldd	r25, Z+1	; 0x01
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	f1 f7       	brne	.-4      	; 0x2f18 <LCD_voidInit+0xfc>
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	ef 57       	subi	r30, 0x7F	; 127
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	91 83       	std	Z+1, r25	; 0x01
    2f24:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f26:	de 01       	movw	r26, r28
    2f28:	ad 57       	subi	r26, 0x7D	; 125
    2f2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	ed 57       	subi	r30, 0x7D	; 125
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	80 81       	ld	r24, Z
    2f34:	91 81       	ldd	r25, Z+1	; 0x01
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	11 96       	adiw	r26, 0x01	; 1
    2f3a:	9c 93       	st	X, r25
    2f3c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ed 57       	subi	r30, 0x7D	; 125
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	80 81       	ld	r24, Z
    2f46:	91 81       	ldd	r25, Z+1	; 0x01
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	d1 f6       	brne	.-76     	; 0x2f00 <LCD_voidInit+0xe4>
    2f4c:	27 c0       	rjmp	.+78     	; 0x2f9c <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4e:	8e 01       	movw	r16, r28
    2f50:	0d 57       	subi	r16, 0x7D	; 125
    2f52:	1f 4f       	sbci	r17, 0xFF	; 255
    2f54:	fe 01       	movw	r30, r28
    2f56:	eb 57       	subi	r30, 0x7B	; 123
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	60 81       	ld	r22, Z
    2f5c:	71 81       	ldd	r23, Z+1	; 0x01
    2f5e:	82 81       	ldd	r24, Z+2	; 0x02
    2f60:	93 81       	ldd	r25, Z+3	; 0x03
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	80 83       	st	Z, r24
    2f70:	de 01       	movw	r26, r28
    2f72:	a1 58       	subi	r26, 0x81	; 129
    2f74:	bf 4f       	sbci	r27, 0xFF	; 255
    2f76:	fe 01       	movw	r30, r28
    2f78:	ed 57       	subi	r30, 0x7D	; 125
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	80 81       	ld	r24, Z
    2f7e:	91 81       	ldd	r25, Z+1	; 0x01
    2f80:	8d 93       	st	X+, r24
    2f82:	9c 93       	st	X, r25
    2f84:	fe 01       	movw	r30, r28
    2f86:	e1 58       	subi	r30, 0x81	; 129
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	91 81       	ldd	r25, Z+1	; 0x01
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	f1 f7       	brne	.-4      	; 0x2f8e <LCD_voidInit+0x172>
    2f92:	fe 01       	movw	r30, r28
    2f94:	e1 58       	subi	r30, 0x81	; 129
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	91 83       	std	Z+1, r25	; 0x01
    2f9a:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2f9c:	80 e3       	ldi	r24, 0x30	; 48
    2f9e:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <LCD_voidSendInitCommand>
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	e5 58       	subi	r30, 0x85	; 133
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	a0 ea       	ldi	r26, 0xA0	; 160
    2fae:	b0 e4       	ldi	r27, 0x40	; 64
    2fb0:	80 83       	st	Z, r24
    2fb2:	91 83       	std	Z+1, r25	; 0x01
    2fb4:	a2 83       	std	Z+2, r26	; 0x02
    2fb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb8:	8e 01       	movw	r16, r28
    2fba:	09 58       	subi	r16, 0x89	; 137
    2fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e5 58       	subi	r30, 0x85	; 133
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	60 81       	ld	r22, Z
    2fc6:	71 81       	ldd	r23, Z+1	; 0x01
    2fc8:	82 81       	ldd	r24, Z+2	; 0x02
    2fca:	93 81       	ldd	r25, Z+3	; 0x03
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	4a e7       	ldi	r20, 0x7A	; 122
    2fd2:	55 e4       	ldi	r21, 0x45	; 69
    2fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	f8 01       	movw	r30, r16
    2fde:	80 83       	st	Z, r24
    2fe0:	91 83       	std	Z+1, r25	; 0x01
    2fe2:	a2 83       	std	Z+2, r26	; 0x02
    2fe4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fe6:	fe 01       	movw	r30, r28
    2fe8:	e9 58       	subi	r30, 0x89	; 137
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	60 81       	ld	r22, Z
    2fee:	71 81       	ldd	r23, Z+1	; 0x01
    2ff0:	82 81       	ldd	r24, Z+2	; 0x02
    2ff2:	93 81       	ldd	r25, Z+3	; 0x03
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e8       	ldi	r20, 0x80	; 128
    2ffa:	5f e3       	ldi	r21, 0x3F	; 63
    2ffc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3000:	88 23       	and	r24, r24
    3002:	44 f4       	brge	.+16     	; 0x3014 <LCD_voidInit+0x1f8>
		__ticks = 1;
    3004:	fe 01       	movw	r30, r28
    3006:	eb 58       	subi	r30, 0x8B	; 139
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	91 83       	std	Z+1, r25	; 0x01
    3010:	80 83       	st	Z, r24
    3012:	64 c0       	rjmp	.+200    	; 0x30dc <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    3014:	fe 01       	movw	r30, r28
    3016:	e9 58       	subi	r30, 0x89	; 137
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	60 81       	ld	r22, Z
    301c:	71 81       	ldd	r23, Z+1	; 0x01
    301e:	82 81       	ldd	r24, Z+2	; 0x02
    3020:	93 81       	ldd	r25, Z+3	; 0x03
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	3f ef       	ldi	r19, 0xFF	; 255
    3026:	4f e7       	ldi	r20, 0x7F	; 127
    3028:	57 e4       	ldi	r21, 0x47	; 71
    302a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    302e:	18 16       	cp	r1, r24
    3030:	0c f0       	brlt	.+2      	; 0x3034 <LCD_voidInit+0x218>
    3032:	43 c0       	rjmp	.+134    	; 0x30ba <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3034:	fe 01       	movw	r30, r28
    3036:	e5 58       	subi	r30, 0x85	; 133
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	60 81       	ld	r22, Z
    303c:	71 81       	ldd	r23, Z+1	; 0x01
    303e:	82 81       	ldd	r24, Z+2	; 0x02
    3040:	93 81       	ldd	r25, Z+3	; 0x03
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e2       	ldi	r20, 0x20	; 32
    3048:	51 e4       	ldi	r21, 0x41	; 65
    304a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	8e 01       	movw	r16, r28
    3054:	0b 58       	subi	r16, 0x8B	; 139
    3056:	1f 4f       	sbci	r17, 0xFF	; 255
    3058:	bc 01       	movw	r22, r24
    305a:	cd 01       	movw	r24, r26
    305c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	f8 01       	movw	r30, r16
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	80 83       	st	Z, r24
    306a:	1f c0       	rjmp	.+62     	; 0x30aa <LCD_voidInit+0x28e>
    306c:	fe 01       	movw	r30, r28
    306e:	ed 58       	subi	r30, 0x8D	; 141
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	80 e9       	ldi	r24, 0x90	; 144
    3074:	91 e0       	ldi	r25, 0x01	; 1
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	80 83       	st	Z, r24
    307a:	fe 01       	movw	r30, r28
    307c:	ed 58       	subi	r30, 0x8D	; 141
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	80 81       	ld	r24, Z
    3082:	91 81       	ldd	r25, Z+1	; 0x01
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	f1 f7       	brne	.-4      	; 0x3084 <LCD_voidInit+0x268>
    3088:	fe 01       	movw	r30, r28
    308a:	ed 58       	subi	r30, 0x8D	; 141
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	91 83       	std	Z+1, r25	; 0x01
    3090:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3092:	de 01       	movw	r26, r28
    3094:	ab 58       	subi	r26, 0x8B	; 139
    3096:	bf 4f       	sbci	r27, 0xFF	; 255
    3098:	fe 01       	movw	r30, r28
    309a:	eb 58       	subi	r30, 0x8B	; 139
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 81       	ld	r24, Z
    30a0:	91 81       	ldd	r25, Z+1	; 0x01
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	9c 93       	st	X, r25
    30a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30aa:	fe 01       	movw	r30, r28
    30ac:	eb 58       	subi	r30, 0x8B	; 139
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	80 81       	ld	r24, Z
    30b2:	91 81       	ldd	r25, Z+1	; 0x01
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	d1 f6       	brne	.-76     	; 0x306c <LCD_voidInit+0x250>
    30b8:	27 c0       	rjmp	.+78     	; 0x3108 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ba:	8e 01       	movw	r16, r28
    30bc:	0b 58       	subi	r16, 0x8B	; 139
    30be:	1f 4f       	sbci	r17, 0xFF	; 255
    30c0:	fe 01       	movw	r30, r28
    30c2:	e9 58       	subi	r30, 0x89	; 137
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	60 81       	ld	r22, Z
    30c8:	71 81       	ldd	r23, Z+1	; 0x01
    30ca:	82 81       	ldd	r24, Z+2	; 0x02
    30cc:	93 81       	ldd	r25, Z+3	; 0x03
    30ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	f8 01       	movw	r30, r16
    30d8:	91 83       	std	Z+1, r25	; 0x01
    30da:	80 83       	st	Z, r24
    30dc:	de 01       	movw	r26, r28
    30de:	af 58       	subi	r26, 0x8F	; 143
    30e0:	bf 4f       	sbci	r27, 0xFF	; 255
    30e2:	fe 01       	movw	r30, r28
    30e4:	eb 58       	subi	r30, 0x8B	; 139
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	80 81       	ld	r24, Z
    30ea:	91 81       	ldd	r25, Z+1	; 0x01
    30ec:	8d 93       	st	X+, r24
    30ee:	9c 93       	st	X, r25
    30f0:	fe 01       	movw	r30, r28
    30f2:	ef 58       	subi	r30, 0x8F	; 143
    30f4:	ff 4f       	sbci	r31, 0xFF	; 255
    30f6:	80 81       	ld	r24, Z
    30f8:	91 81       	ldd	r25, Z+1	; 0x01
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	f1 f7       	brne	.-4      	; 0x30fa <LCD_voidInit+0x2de>
    30fe:	fe 01       	movw	r30, r28
    3100:	ef 58       	subi	r30, 0x8F	; 143
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    3108:	80 e3       	ldi	r24, 0x30	; 48
    310a:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <LCD_voidSendInitCommand>
    310e:	fe 01       	movw	r30, r28
    3110:	e3 59       	subi	r30, 0x93	; 147
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	a0 e8       	ldi	r26, 0x80	; 128
    311a:	bf e3       	ldi	r27, 0x3F	; 63
    311c:	80 83       	st	Z, r24
    311e:	91 83       	std	Z+1, r25	; 0x01
    3120:	a2 83       	std	Z+2, r26	; 0x02
    3122:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3124:	8e 01       	movw	r16, r28
    3126:	07 59       	subi	r16, 0x97	; 151
    3128:	1f 4f       	sbci	r17, 0xFF	; 255
    312a:	fe 01       	movw	r30, r28
    312c:	e3 59       	subi	r30, 0x93	; 147
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	60 81       	ld	r22, Z
    3132:	71 81       	ldd	r23, Z+1	; 0x01
    3134:	82 81       	ldd	r24, Z+2	; 0x02
    3136:	93 81       	ldd	r25, Z+3	; 0x03
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	4a e7       	ldi	r20, 0x7A	; 122
    313e:	55 e4       	ldi	r21, 0x45	; 69
    3140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	f8 01       	movw	r30, r16
    314a:	80 83       	st	Z, r24
    314c:	91 83       	std	Z+1, r25	; 0x01
    314e:	a2 83       	std	Z+2, r26	; 0x02
    3150:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3152:	fe 01       	movw	r30, r28
    3154:	e7 59       	subi	r30, 0x97	; 151
    3156:	ff 4f       	sbci	r31, 0xFF	; 255
    3158:	60 81       	ld	r22, Z
    315a:	71 81       	ldd	r23, Z+1	; 0x01
    315c:	82 81       	ldd	r24, Z+2	; 0x02
    315e:	93 81       	ldd	r25, Z+3	; 0x03
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e8       	ldi	r20, 0x80	; 128
    3166:	5f e3       	ldi	r21, 0x3F	; 63
    3168:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    316c:	88 23       	and	r24, r24
    316e:	44 f4       	brge	.+16     	; 0x3180 <LCD_voidInit+0x364>
		__ticks = 1;
    3170:	fe 01       	movw	r30, r28
    3172:	e9 59       	subi	r30, 0x99	; 153
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	91 83       	std	Z+1, r25	; 0x01
    317c:	80 83       	st	Z, r24
    317e:	64 c0       	rjmp	.+200    	; 0x3248 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    3180:	fe 01       	movw	r30, r28
    3182:	e7 59       	subi	r30, 0x97	; 151
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	3f ef       	ldi	r19, 0xFF	; 255
    3192:	4f e7       	ldi	r20, 0x7F	; 127
    3194:	57 e4       	ldi	r21, 0x47	; 71
    3196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    319a:	18 16       	cp	r1, r24
    319c:	0c f0       	brlt	.+2      	; 0x31a0 <LCD_voidInit+0x384>
    319e:	43 c0       	rjmp	.+134    	; 0x3226 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a0:	fe 01       	movw	r30, r28
    31a2:	e3 59       	subi	r30, 0x93	; 147
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	60 81       	ld	r22, Z
    31a8:	71 81       	ldd	r23, Z+1	; 0x01
    31aa:	82 81       	ldd	r24, Z+2	; 0x02
    31ac:	93 81       	ldd	r25, Z+3	; 0x03
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e2       	ldi	r20, 0x20	; 32
    31b4:	51 e4       	ldi	r21, 0x41	; 65
    31b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	8e 01       	movw	r16, r28
    31c0:	09 59       	subi	r16, 0x99	; 153
    31c2:	1f 4f       	sbci	r17, 0xFF	; 255
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	f8 01       	movw	r30, r16
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	80 83       	st	Z, r24
    31d6:	1f c0       	rjmp	.+62     	; 0x3216 <LCD_voidInit+0x3fa>
    31d8:	fe 01       	movw	r30, r28
    31da:	eb 59       	subi	r30, 0x9B	; 155
    31dc:	ff 4f       	sbci	r31, 0xFF	; 255
    31de:	80 e9       	ldi	r24, 0x90	; 144
    31e0:	91 e0       	ldi	r25, 0x01	; 1
    31e2:	91 83       	std	Z+1, r25	; 0x01
    31e4:	80 83       	st	Z, r24
    31e6:	fe 01       	movw	r30, r28
    31e8:	eb 59       	subi	r30, 0x9B	; 155
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	80 81       	ld	r24, Z
    31ee:	91 81       	ldd	r25, Z+1	; 0x01
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	f1 f7       	brne	.-4      	; 0x31f0 <LCD_voidInit+0x3d4>
    31f4:	fe 01       	movw	r30, r28
    31f6:	eb 59       	subi	r30, 0x9B	; 155
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	91 83       	std	Z+1, r25	; 0x01
    31fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fe:	de 01       	movw	r26, r28
    3200:	a9 59       	subi	r26, 0x99	; 153
    3202:	bf 4f       	sbci	r27, 0xFF	; 255
    3204:	fe 01       	movw	r30, r28
    3206:	e9 59       	subi	r30, 0x99	; 153
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	80 81       	ld	r24, Z
    320c:	91 81       	ldd	r25, Z+1	; 0x01
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	11 96       	adiw	r26, 0x01	; 1
    3212:	9c 93       	st	X, r25
    3214:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3216:	fe 01       	movw	r30, r28
    3218:	e9 59       	subi	r30, 0x99	; 153
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	80 81       	ld	r24, Z
    321e:	91 81       	ldd	r25, Z+1	; 0x01
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	d1 f6       	brne	.-76     	; 0x31d8 <LCD_voidInit+0x3bc>
    3224:	27 c0       	rjmp	.+78     	; 0x3274 <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3226:	8e 01       	movw	r16, r28
    3228:	09 59       	subi	r16, 0x99	; 153
    322a:	1f 4f       	sbci	r17, 0xFF	; 255
    322c:	fe 01       	movw	r30, r28
    322e:	e7 59       	subi	r30, 0x97	; 151
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	60 81       	ld	r22, Z
    3234:	71 81       	ldd	r23, Z+1	; 0x01
    3236:	82 81       	ldd	r24, Z+2	; 0x02
    3238:	93 81       	ldd	r25, Z+3	; 0x03
    323a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	f8 01       	movw	r30, r16
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	80 83       	st	Z, r24
    3248:	de 01       	movw	r26, r28
    324a:	ad 59       	subi	r26, 0x9D	; 157
    324c:	bf 4f       	sbci	r27, 0xFF	; 255
    324e:	fe 01       	movw	r30, r28
    3250:	e9 59       	subi	r30, 0x99	; 153
    3252:	ff 4f       	sbci	r31, 0xFF	; 255
    3254:	80 81       	ld	r24, Z
    3256:	91 81       	ldd	r25, Z+1	; 0x01
    3258:	8d 93       	st	X+, r24
    325a:	9c 93       	st	X, r25
    325c:	fe 01       	movw	r30, r28
    325e:	ed 59       	subi	r30, 0x9D	; 157
    3260:	ff 4f       	sbci	r31, 0xFF	; 255
    3262:	80 81       	ld	r24, Z
    3264:	91 81       	ldd	r25, Z+1	; 0x01
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	f1 f7       	brne	.-4      	; 0x3266 <LCD_voidInit+0x44a>
    326a:	fe 01       	movw	r30, r28
    326c:	ed 59       	subi	r30, 0x9D	; 157
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	91 83       	std	Z+1, r25	; 0x01
    3272:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    3274:	80 e3       	ldi	r24, 0x30	; 48
    3276:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <LCD_voidSendInitCommand>
    327a:	fe 01       	movw	r30, r28
    327c:	e1 5a       	subi	r30, 0xA1	; 161
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	a0 e8       	ldi	r26, 0x80	; 128
    3286:	bf e3       	ldi	r27, 0x3F	; 63
    3288:	80 83       	st	Z, r24
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	a2 83       	std	Z+2, r26	; 0x02
    328e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3290:	8e 01       	movw	r16, r28
    3292:	05 5a       	subi	r16, 0xA5	; 165
    3294:	1f 4f       	sbci	r17, 0xFF	; 255
    3296:	fe 01       	movw	r30, r28
    3298:	e1 5a       	subi	r30, 0xA1	; 161
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	60 81       	ld	r22, Z
    329e:	71 81       	ldd	r23, Z+1	; 0x01
    32a0:	82 81       	ldd	r24, Z+2	; 0x02
    32a2:	93 81       	ldd	r25, Z+3	; 0x03
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	4a e7       	ldi	r20, 0x7A	; 122
    32aa:	55 e4       	ldi	r21, 0x45	; 69
    32ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	f8 01       	movw	r30, r16
    32b6:	80 83       	st	Z, r24
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	a2 83       	std	Z+2, r26	; 0x02
    32bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32be:	fe 01       	movw	r30, r28
    32c0:	e5 5a       	subi	r30, 0xA5	; 165
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	40 e8       	ldi	r20, 0x80	; 128
    32d2:	5f e3       	ldi	r21, 0x3F	; 63
    32d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32d8:	88 23       	and	r24, r24
    32da:	44 f4       	brge	.+16     	; 0x32ec <LCD_voidInit+0x4d0>
		__ticks = 1;
    32dc:	fe 01       	movw	r30, r28
    32de:	e7 5a       	subi	r30, 0xA7	; 167
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	91 83       	std	Z+1, r25	; 0x01
    32e8:	80 83       	st	Z, r24
    32ea:	64 c0       	rjmp	.+200    	; 0x33b4 <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    32ec:	fe 01       	movw	r30, r28
    32ee:	e5 5a       	subi	r30, 0xA5	; 165
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	60 81       	ld	r22, Z
    32f4:	71 81       	ldd	r23, Z+1	; 0x01
    32f6:	82 81       	ldd	r24, Z+2	; 0x02
    32f8:	93 81       	ldd	r25, Z+3	; 0x03
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	3f ef       	ldi	r19, 0xFF	; 255
    32fe:	4f e7       	ldi	r20, 0x7F	; 127
    3300:	57 e4       	ldi	r21, 0x47	; 71
    3302:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3306:	18 16       	cp	r1, r24
    3308:	0c f0       	brlt	.+2      	; 0x330c <LCD_voidInit+0x4f0>
    330a:	43 c0       	rjmp	.+134    	; 0x3392 <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330c:	fe 01       	movw	r30, r28
    330e:	e1 5a       	subi	r30, 0xA1	; 161
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	60 81       	ld	r22, Z
    3314:	71 81       	ldd	r23, Z+1	; 0x01
    3316:	82 81       	ldd	r24, Z+2	; 0x02
    3318:	93 81       	ldd	r25, Z+3	; 0x03
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	40 e2       	ldi	r20, 0x20	; 32
    3320:	51 e4       	ldi	r21, 0x41	; 65
    3322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	8e 01       	movw	r16, r28
    332c:	07 5a       	subi	r16, 0xA7	; 167
    332e:	1f 4f       	sbci	r17, 0xFF	; 255
    3330:	bc 01       	movw	r22, r24
    3332:	cd 01       	movw	r24, r26
    3334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	f8 01       	movw	r30, r16
    333e:	91 83       	std	Z+1, r25	; 0x01
    3340:	80 83       	st	Z, r24
    3342:	1f c0       	rjmp	.+62     	; 0x3382 <LCD_voidInit+0x566>
    3344:	fe 01       	movw	r30, r28
    3346:	e9 5a       	subi	r30, 0xA9	; 169
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 e9       	ldi	r24, 0x90	; 144
    334c:	91 e0       	ldi	r25, 0x01	; 1
    334e:	91 83       	std	Z+1, r25	; 0x01
    3350:	80 83       	st	Z, r24
    3352:	fe 01       	movw	r30, r28
    3354:	e9 5a       	subi	r30, 0xA9	; 169
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	80 81       	ld	r24, Z
    335a:	91 81       	ldd	r25, Z+1	; 0x01
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	f1 f7       	brne	.-4      	; 0x335c <LCD_voidInit+0x540>
    3360:	fe 01       	movw	r30, r28
    3362:	e9 5a       	subi	r30, 0xA9	; 169
    3364:	ff 4f       	sbci	r31, 0xFF	; 255
    3366:	91 83       	std	Z+1, r25	; 0x01
    3368:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336a:	de 01       	movw	r26, r28
    336c:	a7 5a       	subi	r26, 0xA7	; 167
    336e:	bf 4f       	sbci	r27, 0xFF	; 255
    3370:	fe 01       	movw	r30, r28
    3372:	e7 5a       	subi	r30, 0xA7	; 167
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	80 81       	ld	r24, Z
    3378:	91 81       	ldd	r25, Z+1	; 0x01
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	11 96       	adiw	r26, 0x01	; 1
    337e:	9c 93       	st	X, r25
    3380:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3382:	fe 01       	movw	r30, r28
    3384:	e7 5a       	subi	r30, 0xA7	; 167
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	80 81       	ld	r24, Z
    338a:	91 81       	ldd	r25, Z+1	; 0x01
    338c:	00 97       	sbiw	r24, 0x00	; 0
    338e:	d1 f6       	brne	.-76     	; 0x3344 <LCD_voidInit+0x528>
    3390:	27 c0       	rjmp	.+78     	; 0x33e0 <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3392:	8e 01       	movw	r16, r28
    3394:	07 5a       	subi	r16, 0xA7	; 167
    3396:	1f 4f       	sbci	r17, 0xFF	; 255
    3398:	fe 01       	movw	r30, r28
    339a:	e5 5a       	subi	r30, 0xA5	; 165
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	60 81       	ld	r22, Z
    33a0:	71 81       	ldd	r23, Z+1	; 0x01
    33a2:	82 81       	ldd	r24, Z+2	; 0x02
    33a4:	93 81       	ldd	r25, Z+3	; 0x03
    33a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	f8 01       	movw	r30, r16
    33b0:	91 83       	std	Z+1, r25	; 0x01
    33b2:	80 83       	st	Z, r24
    33b4:	de 01       	movw	r26, r28
    33b6:	ab 5a       	subi	r26, 0xAB	; 171
    33b8:	bf 4f       	sbci	r27, 0xFF	; 255
    33ba:	fe 01       	movw	r30, r28
    33bc:	e7 5a       	subi	r30, 0xA7	; 167
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	80 81       	ld	r24, Z
    33c2:	91 81       	ldd	r25, Z+1	; 0x01
    33c4:	8d 93       	st	X+, r24
    33c6:	9c 93       	st	X, r25
    33c8:	fe 01       	movw	r30, r28
    33ca:	eb 5a       	subi	r30, 0xAB	; 171
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	80 81       	ld	r24, Z
    33d0:	91 81       	ldd	r25, Z+1	; 0x01
    33d2:	01 97       	sbiw	r24, 0x01	; 1
    33d4:	f1 f7       	brne	.-4      	; 0x33d2 <LCD_voidInit+0x5b6>
    33d6:	fe 01       	movw	r30, r28
    33d8:	eb 5a       	subi	r30, 0xAB	; 171
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	91 83       	std	Z+1, r25	; 0x01
    33de:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    33e0:	80 e2       	ldi	r24, 0x20	; 32
    33e2:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <LCD_voidSendInitCommand>
    33e6:	fe 01       	movw	r30, r28
    33e8:	ef 5a       	subi	r30, 0xAF	; 175
    33ea:	ff 4f       	sbci	r31, 0xFF	; 255
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	a0 e8       	ldi	r26, 0x80	; 128
    33f2:	bf e3       	ldi	r27, 0x3F	; 63
    33f4:	80 83       	st	Z, r24
    33f6:	91 83       	std	Z+1, r25	; 0x01
    33f8:	a2 83       	std	Z+2, r26	; 0x02
    33fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fc:	8e 01       	movw	r16, r28
    33fe:	03 5b       	subi	r16, 0xB3	; 179
    3400:	1f 4f       	sbci	r17, 0xFF	; 255
    3402:	fe 01       	movw	r30, r28
    3404:	ef 5a       	subi	r30, 0xAF	; 175
    3406:	ff 4f       	sbci	r31, 0xFF	; 255
    3408:	60 81       	ld	r22, Z
    340a:	71 81       	ldd	r23, Z+1	; 0x01
    340c:	82 81       	ldd	r24, Z+2	; 0x02
    340e:	93 81       	ldd	r25, Z+3	; 0x03
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	4a e7       	ldi	r20, 0x7A	; 122
    3416:	55 e4       	ldi	r21, 0x45	; 69
    3418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	f8 01       	movw	r30, r16
    3422:	80 83       	st	Z, r24
    3424:	91 83       	std	Z+1, r25	; 0x01
    3426:	a2 83       	std	Z+2, r26	; 0x02
    3428:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    342a:	fe 01       	movw	r30, r28
    342c:	e3 5b       	subi	r30, 0xB3	; 179
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	60 81       	ld	r22, Z
    3432:	71 81       	ldd	r23, Z+1	; 0x01
    3434:	82 81       	ldd	r24, Z+2	; 0x02
    3436:	93 81       	ldd	r25, Z+3	; 0x03
    3438:	20 e0       	ldi	r18, 0x00	; 0
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	40 e8       	ldi	r20, 0x80	; 128
    343e:	5f e3       	ldi	r21, 0x3F	; 63
    3440:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3444:	88 23       	and	r24, r24
    3446:	44 f4       	brge	.+16     	; 0x3458 <LCD_voidInit+0x63c>
		__ticks = 1;
    3448:	fe 01       	movw	r30, r28
    344a:	e5 5b       	subi	r30, 0xB5	; 181
    344c:	ff 4f       	sbci	r31, 0xFF	; 255
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	91 83       	std	Z+1, r25	; 0x01
    3454:	80 83       	st	Z, r24
    3456:	64 c0       	rjmp	.+200    	; 0x3520 <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    3458:	fe 01       	movw	r30, r28
    345a:	e3 5b       	subi	r30, 0xB3	; 179
    345c:	ff 4f       	sbci	r31, 0xFF	; 255
    345e:	60 81       	ld	r22, Z
    3460:	71 81       	ldd	r23, Z+1	; 0x01
    3462:	82 81       	ldd	r24, Z+2	; 0x02
    3464:	93 81       	ldd	r25, Z+3	; 0x03
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	3f ef       	ldi	r19, 0xFF	; 255
    346a:	4f e7       	ldi	r20, 0x7F	; 127
    346c:	57 e4       	ldi	r21, 0x47	; 71
    346e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3472:	18 16       	cp	r1, r24
    3474:	0c f0       	brlt	.+2      	; 0x3478 <LCD_voidInit+0x65c>
    3476:	43 c0       	rjmp	.+134    	; 0x34fe <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3478:	fe 01       	movw	r30, r28
    347a:	ef 5a       	subi	r30, 0xAF	; 175
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	60 81       	ld	r22, Z
    3480:	71 81       	ldd	r23, Z+1	; 0x01
    3482:	82 81       	ldd	r24, Z+2	; 0x02
    3484:	93 81       	ldd	r25, Z+3	; 0x03
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e2       	ldi	r20, 0x20	; 32
    348c:	51 e4       	ldi	r21, 0x41	; 65
    348e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	8e 01       	movw	r16, r28
    3498:	05 5b       	subi	r16, 0xB5	; 181
    349a:	1f 4f       	sbci	r17, 0xFF	; 255
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	f8 01       	movw	r30, r16
    34aa:	91 83       	std	Z+1, r25	; 0x01
    34ac:	80 83       	st	Z, r24
    34ae:	1f c0       	rjmp	.+62     	; 0x34ee <LCD_voidInit+0x6d2>
    34b0:	fe 01       	movw	r30, r28
    34b2:	e7 5b       	subi	r30, 0xB7	; 183
    34b4:	ff 4f       	sbci	r31, 0xFF	; 255
    34b6:	80 e9       	ldi	r24, 0x90	; 144
    34b8:	91 e0       	ldi	r25, 0x01	; 1
    34ba:	91 83       	std	Z+1, r25	; 0x01
    34bc:	80 83       	st	Z, r24
    34be:	fe 01       	movw	r30, r28
    34c0:	e7 5b       	subi	r30, 0xB7	; 183
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	80 81       	ld	r24, Z
    34c6:	91 81       	ldd	r25, Z+1	; 0x01
    34c8:	01 97       	sbiw	r24, 0x01	; 1
    34ca:	f1 f7       	brne	.-4      	; 0x34c8 <LCD_voidInit+0x6ac>
    34cc:	fe 01       	movw	r30, r28
    34ce:	e7 5b       	subi	r30, 0xB7	; 183
    34d0:	ff 4f       	sbci	r31, 0xFF	; 255
    34d2:	91 83       	std	Z+1, r25	; 0x01
    34d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d6:	de 01       	movw	r26, r28
    34d8:	a5 5b       	subi	r26, 0xB5	; 181
    34da:	bf 4f       	sbci	r27, 0xFF	; 255
    34dc:	fe 01       	movw	r30, r28
    34de:	e5 5b       	subi	r30, 0xB5	; 181
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	80 81       	ld	r24, Z
    34e4:	91 81       	ldd	r25, Z+1	; 0x01
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	11 96       	adiw	r26, 0x01	; 1
    34ea:	9c 93       	st	X, r25
    34ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ee:	fe 01       	movw	r30, r28
    34f0:	e5 5b       	subi	r30, 0xB5	; 181
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 81       	ld	r24, Z
    34f6:	91 81       	ldd	r25, Z+1	; 0x01
    34f8:	00 97       	sbiw	r24, 0x00	; 0
    34fa:	d1 f6       	brne	.-76     	; 0x34b0 <LCD_voidInit+0x694>
    34fc:	27 c0       	rjmp	.+78     	; 0x354c <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34fe:	8e 01       	movw	r16, r28
    3500:	05 5b       	subi	r16, 0xB5	; 181
    3502:	1f 4f       	sbci	r17, 0xFF	; 255
    3504:	fe 01       	movw	r30, r28
    3506:	e3 5b       	subi	r30, 0xB3	; 179
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3516:	dc 01       	movw	r26, r24
    3518:	cb 01       	movw	r24, r22
    351a:	f8 01       	movw	r30, r16
    351c:	91 83       	std	Z+1, r25	; 0x01
    351e:	80 83       	st	Z, r24
    3520:	de 01       	movw	r26, r28
    3522:	a9 5b       	subi	r26, 0xB9	; 185
    3524:	bf 4f       	sbci	r27, 0xFF	; 255
    3526:	fe 01       	movw	r30, r28
    3528:	e5 5b       	subi	r30, 0xB5	; 181
    352a:	ff 4f       	sbci	r31, 0xFF	; 255
    352c:	80 81       	ld	r24, Z
    352e:	91 81       	ldd	r25, Z+1	; 0x01
    3530:	8d 93       	st	X+, r24
    3532:	9c 93       	st	X, r25
    3534:	fe 01       	movw	r30, r28
    3536:	e9 5b       	subi	r30, 0xB9	; 185
    3538:	ff 4f       	sbci	r31, 0xFF	; 255
    353a:	80 81       	ld	r24, Z
    353c:	91 81       	ldd	r25, Z+1	; 0x01
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	f1 f7       	brne	.-4      	; 0x353e <LCD_voidInit+0x722>
    3542:	fe 01       	movw	r30, r28
    3544:	e9 5b       	subi	r30, 0xB9	; 185
    3546:	ff 4f       	sbci	r31, 0xFF	; 255
    3548:	91 83       	std	Z+1, r25	; 0x01
    354a:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    354c:	88 e2       	ldi	r24, 0x28	; 40
    354e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_voidSendCommand>
    3552:	fe 01       	movw	r30, r28
    3554:	ed 5b       	subi	r30, 0xBD	; 189
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	a0 e8       	ldi	r26, 0x80	; 128
    355e:	bf e3       	ldi	r27, 0x3F	; 63
    3560:	80 83       	st	Z, r24
    3562:	91 83       	std	Z+1, r25	; 0x01
    3564:	a2 83       	std	Z+2, r26	; 0x02
    3566:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3568:	8e 01       	movw	r16, r28
    356a:	01 5c       	subi	r16, 0xC1	; 193
    356c:	1f 4f       	sbci	r17, 0xFF	; 255
    356e:	fe 01       	movw	r30, r28
    3570:	ed 5b       	subi	r30, 0xBD	; 189
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	60 81       	ld	r22, Z
    3576:	71 81       	ldd	r23, Z+1	; 0x01
    3578:	82 81       	ldd	r24, Z+2	; 0x02
    357a:	93 81       	ldd	r25, Z+3	; 0x03
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	4a e7       	ldi	r20, 0x7A	; 122
    3582:	55 e4       	ldi	r21, 0x45	; 69
    3584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	f8 01       	movw	r30, r16
    358e:	80 83       	st	Z, r24
    3590:	91 83       	std	Z+1, r25	; 0x01
    3592:	a2 83       	std	Z+2, r26	; 0x02
    3594:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3596:	fe 01       	movw	r30, r28
    3598:	ff 96       	adiw	r30, 0x3f	; 63
    359a:	60 81       	ld	r22, Z
    359c:	71 81       	ldd	r23, Z+1	; 0x01
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	93 81       	ldd	r25, Z+3	; 0x03
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e8       	ldi	r20, 0x80	; 128
    35a8:	5f e3       	ldi	r21, 0x3F	; 63
    35aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ae:	88 23       	and	r24, r24
    35b0:	2c f4       	brge	.+10     	; 0x35bc <LCD_voidInit+0x7a0>
		__ticks = 1;
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	9e af       	std	Y+62, r25	; 0x3e
    35b8:	8d af       	std	Y+61, r24	; 0x3d
    35ba:	46 c0       	rjmp	.+140    	; 0x3648 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    35bc:	fe 01       	movw	r30, r28
    35be:	ff 96       	adiw	r30, 0x3f	; 63
    35c0:	60 81       	ld	r22, Z
    35c2:	71 81       	ldd	r23, Z+1	; 0x01
    35c4:	82 81       	ldd	r24, Z+2	; 0x02
    35c6:	93 81       	ldd	r25, Z+3	; 0x03
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	3f ef       	ldi	r19, 0xFF	; 255
    35cc:	4f e7       	ldi	r20, 0x7F	; 127
    35ce:	57 e4       	ldi	r21, 0x47	; 71
    35d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35d4:	18 16       	cp	r1, r24
    35d6:	64 f5       	brge	.+88     	; 0x3630 <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d8:	fe 01       	movw	r30, r28
    35da:	ed 5b       	subi	r30, 0xBD	; 189
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	60 81       	ld	r22, Z
    35e0:	71 81       	ldd	r23, Z+1	; 0x01
    35e2:	82 81       	ldd	r24, Z+2	; 0x02
    35e4:	93 81       	ldd	r25, Z+3	; 0x03
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e2       	ldi	r20, 0x20	; 32
    35ec:	51 e4       	ldi	r21, 0x41	; 65
    35ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f2:	dc 01       	movw	r26, r24
    35f4:	cb 01       	movw	r24, r22
    35f6:	bc 01       	movw	r22, r24
    35f8:	cd 01       	movw	r24, r26
    35fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	9e af       	std	Y+62, r25	; 0x3e
    3604:	8d af       	std	Y+61, r24	; 0x3d
    3606:	0f c0       	rjmp	.+30     	; 0x3626 <LCD_voidInit+0x80a>
    3608:	80 e9       	ldi	r24, 0x90	; 144
    360a:	91 e0       	ldi	r25, 0x01	; 1
    360c:	9c af       	std	Y+60, r25	; 0x3c
    360e:	8b af       	std	Y+59, r24	; 0x3b
    3610:	8b ad       	ldd	r24, Y+59	; 0x3b
    3612:	9c ad       	ldd	r25, Y+60	; 0x3c
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <LCD_voidInit+0x7f8>
    3618:	9c af       	std	Y+60, r25	; 0x3c
    361a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    361c:	8d ad       	ldd	r24, Y+61	; 0x3d
    361e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	9e af       	std	Y+62, r25	; 0x3e
    3624:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3626:	8d ad       	ldd	r24, Y+61	; 0x3d
    3628:	9e ad       	ldd	r25, Y+62	; 0x3e
    362a:	00 97       	sbiw	r24, 0x00	; 0
    362c:	69 f7       	brne	.-38     	; 0x3608 <LCD_voidInit+0x7ec>
    362e:	16 c0       	rjmp	.+44     	; 0x365c <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3630:	fe 01       	movw	r30, r28
    3632:	ff 96       	adiw	r30, 0x3f	; 63
    3634:	60 81       	ld	r22, Z
    3636:	71 81       	ldd	r23, Z+1	; 0x01
    3638:	82 81       	ldd	r24, Z+2	; 0x02
    363a:	93 81       	ldd	r25, Z+3	; 0x03
    363c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	9e af       	std	Y+62, r25	; 0x3e
    3646:	8d af       	std	Y+61, r24	; 0x3d
    3648:	8d ad       	ldd	r24, Y+61	; 0x3d
    364a:	9e ad       	ldd	r25, Y+62	; 0x3e
    364c:	9a af       	std	Y+58, r25	; 0x3a
    364e:	89 af       	std	Y+57, r24	; 0x39
    3650:	89 ad       	ldd	r24, Y+57	; 0x39
    3652:	9a ad       	ldd	r25, Y+58	; 0x3a
    3654:	01 97       	sbiw	r24, 0x01	; 1
    3656:	f1 f7       	brne	.-4      	; 0x3654 <LCD_voidInit+0x838>
    3658:	9a af       	std	Y+58, r25	; 0x3a
    365a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    365c:	88 e0       	ldi	r24, 0x08	; 8
    365e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_voidSendCommand>
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	a0 e8       	ldi	r26, 0x80	; 128
    3668:	bf e3       	ldi	r27, 0x3F	; 63
    366a:	8d ab       	std	Y+53, r24	; 0x35
    366c:	9e ab       	std	Y+54, r25	; 0x36
    366e:	af ab       	std	Y+55, r26	; 0x37
    3670:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3672:	6d a9       	ldd	r22, Y+53	; 0x35
    3674:	7e a9       	ldd	r23, Y+54	; 0x36
    3676:	8f a9       	ldd	r24, Y+55	; 0x37
    3678:	98 ad       	ldd	r25, Y+56	; 0x38
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	4a e7       	ldi	r20, 0x7A	; 122
    3680:	55 e4       	ldi	r21, 0x45	; 69
    3682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	89 ab       	std	Y+49, r24	; 0x31
    368c:	9a ab       	std	Y+50, r25	; 0x32
    368e:	ab ab       	std	Y+51, r26	; 0x33
    3690:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3692:	69 a9       	ldd	r22, Y+49	; 0x31
    3694:	7a a9       	ldd	r23, Y+50	; 0x32
    3696:	8b a9       	ldd	r24, Y+51	; 0x33
    3698:	9c a9       	ldd	r25, Y+52	; 0x34
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	40 e8       	ldi	r20, 0x80	; 128
    36a0:	5f e3       	ldi	r21, 0x3F	; 63
    36a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36a6:	88 23       	and	r24, r24
    36a8:	2c f4       	brge	.+10     	; 0x36b4 <LCD_voidInit+0x898>
		__ticks = 1;
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	98 ab       	std	Y+48, r25	; 0x30
    36b0:	8f a7       	std	Y+47, r24	; 0x2f
    36b2:	3f c0       	rjmp	.+126    	; 0x3732 <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    36b4:	69 a9       	ldd	r22, Y+49	; 0x31
    36b6:	7a a9       	ldd	r23, Y+50	; 0x32
    36b8:	8b a9       	ldd	r24, Y+51	; 0x33
    36ba:	9c a9       	ldd	r25, Y+52	; 0x34
    36bc:	20 e0       	ldi	r18, 0x00	; 0
    36be:	3f ef       	ldi	r19, 0xFF	; 255
    36c0:	4f e7       	ldi	r20, 0x7F	; 127
    36c2:	57 e4       	ldi	r21, 0x47	; 71
    36c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36c8:	18 16       	cp	r1, r24
    36ca:	4c f5       	brge	.+82     	; 0x371e <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36cc:	6d a9       	ldd	r22, Y+53	; 0x35
    36ce:	7e a9       	ldd	r23, Y+54	; 0x36
    36d0:	8f a9       	ldd	r24, Y+55	; 0x37
    36d2:	98 ad       	ldd	r25, Y+56	; 0x38
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	40 e2       	ldi	r20, 0x20	; 32
    36da:	51 e4       	ldi	r21, 0x41	; 65
    36dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	bc 01       	movw	r22, r24
    36e6:	cd 01       	movw	r24, r26
    36e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ec:	dc 01       	movw	r26, r24
    36ee:	cb 01       	movw	r24, r22
    36f0:	98 ab       	std	Y+48, r25	; 0x30
    36f2:	8f a7       	std	Y+47, r24	; 0x2f
    36f4:	0f c0       	rjmp	.+30     	; 0x3714 <LCD_voidInit+0x8f8>
    36f6:	80 e9       	ldi	r24, 0x90	; 144
    36f8:	91 e0       	ldi	r25, 0x01	; 1
    36fa:	9e a7       	std	Y+46, r25	; 0x2e
    36fc:	8d a7       	std	Y+45, r24	; 0x2d
    36fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    3700:	9e a5       	ldd	r25, Y+46	; 0x2e
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	f1 f7       	brne	.-4      	; 0x3702 <LCD_voidInit+0x8e6>
    3706:	9e a7       	std	Y+46, r25	; 0x2e
    3708:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    370a:	8f a5       	ldd	r24, Y+47	; 0x2f
    370c:	98 a9       	ldd	r25, Y+48	; 0x30
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	98 ab       	std	Y+48, r25	; 0x30
    3712:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3714:	8f a5       	ldd	r24, Y+47	; 0x2f
    3716:	98 a9       	ldd	r25, Y+48	; 0x30
    3718:	00 97       	sbiw	r24, 0x00	; 0
    371a:	69 f7       	brne	.-38     	; 0x36f6 <LCD_voidInit+0x8da>
    371c:	14 c0       	rjmp	.+40     	; 0x3746 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    371e:	69 a9       	ldd	r22, Y+49	; 0x31
    3720:	7a a9       	ldd	r23, Y+50	; 0x32
    3722:	8b a9       	ldd	r24, Y+51	; 0x33
    3724:	9c a9       	ldd	r25, Y+52	; 0x34
    3726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	98 ab       	std	Y+48, r25	; 0x30
    3730:	8f a7       	std	Y+47, r24	; 0x2f
    3732:	8f a5       	ldd	r24, Y+47	; 0x2f
    3734:	98 a9       	ldd	r25, Y+48	; 0x30
    3736:	9c a7       	std	Y+44, r25	; 0x2c
    3738:	8b a7       	std	Y+43, r24	; 0x2b
    373a:	8b a5       	ldd	r24, Y+43	; 0x2b
    373c:	9c a5       	ldd	r25, Y+44	; 0x2c
    373e:	01 97       	sbiw	r24, 0x01	; 1
    3740:	f1 f7       	brne	.-4      	; 0x373e <LCD_voidInit+0x922>
    3742:	9c a7       	std	Y+44, r25	; 0x2c
    3744:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_voidSendCommand>
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	a0 ea       	ldi	r26, 0xA0	; 160
    3752:	b0 e4       	ldi	r27, 0x40	; 64
    3754:	8f a3       	std	Y+39, r24	; 0x27
    3756:	98 a7       	std	Y+40, r25	; 0x28
    3758:	a9 a7       	std	Y+41, r26	; 0x29
    375a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    375c:	6f a1       	ldd	r22, Y+39	; 0x27
    375e:	78 a5       	ldd	r23, Y+40	; 0x28
    3760:	89 a5       	ldd	r24, Y+41	; 0x29
    3762:	9a a5       	ldd	r25, Y+42	; 0x2a
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	4a e7       	ldi	r20, 0x7A	; 122
    376a:	55 e4       	ldi	r21, 0x45	; 69
    376c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	8b a3       	std	Y+35, r24	; 0x23
    3776:	9c a3       	std	Y+36, r25	; 0x24
    3778:	ad a3       	std	Y+37, r26	; 0x25
    377a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    377c:	6b a1       	ldd	r22, Y+35	; 0x23
    377e:	7c a1       	ldd	r23, Y+36	; 0x24
    3780:	8d a1       	ldd	r24, Y+37	; 0x25
    3782:	9e a1       	ldd	r25, Y+38	; 0x26
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e8       	ldi	r20, 0x80	; 128
    378a:	5f e3       	ldi	r21, 0x3F	; 63
    378c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3790:	88 23       	and	r24, r24
    3792:	2c f4       	brge	.+10     	; 0x379e <LCD_voidInit+0x982>
		__ticks = 1;
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	9a a3       	std	Y+34, r25	; 0x22
    379a:	89 a3       	std	Y+33, r24	; 0x21
    379c:	3f c0       	rjmp	.+126    	; 0x381c <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    379e:	6b a1       	ldd	r22, Y+35	; 0x23
    37a0:	7c a1       	ldd	r23, Y+36	; 0x24
    37a2:	8d a1       	ldd	r24, Y+37	; 0x25
    37a4:	9e a1       	ldd	r25, Y+38	; 0x26
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	3f ef       	ldi	r19, 0xFF	; 255
    37aa:	4f e7       	ldi	r20, 0x7F	; 127
    37ac:	57 e4       	ldi	r21, 0x47	; 71
    37ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37b2:	18 16       	cp	r1, r24
    37b4:	4c f5       	brge	.+82     	; 0x3808 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b6:	6f a1       	ldd	r22, Y+39	; 0x27
    37b8:	78 a5       	ldd	r23, Y+40	; 0x28
    37ba:	89 a5       	ldd	r24, Y+41	; 0x29
    37bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	40 e2       	ldi	r20, 0x20	; 32
    37c4:	51 e4       	ldi	r21, 0x41	; 65
    37c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ca:	dc 01       	movw	r26, r24
    37cc:	cb 01       	movw	r24, r22
    37ce:	bc 01       	movw	r22, r24
    37d0:	cd 01       	movw	r24, r26
    37d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	9a a3       	std	Y+34, r25	; 0x22
    37dc:	89 a3       	std	Y+33, r24	; 0x21
    37de:	0f c0       	rjmp	.+30     	; 0x37fe <LCD_voidInit+0x9e2>
    37e0:	80 e9       	ldi	r24, 0x90	; 144
    37e2:	91 e0       	ldi	r25, 0x01	; 1
    37e4:	98 a3       	std	Y+32, r25	; 0x20
    37e6:	8f 8f       	std	Y+31, r24	; 0x1f
    37e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37ea:	98 a1       	ldd	r25, Y+32	; 0x20
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	f1 f7       	brne	.-4      	; 0x37ec <LCD_voidInit+0x9d0>
    37f0:	98 a3       	std	Y+32, r25	; 0x20
    37f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f4:	89 a1       	ldd	r24, Y+33	; 0x21
    37f6:	9a a1       	ldd	r25, Y+34	; 0x22
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	9a a3       	std	Y+34, r25	; 0x22
    37fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3800:	9a a1       	ldd	r25, Y+34	; 0x22
    3802:	00 97       	sbiw	r24, 0x00	; 0
    3804:	69 f7       	brne	.-38     	; 0x37e0 <LCD_voidInit+0x9c4>
    3806:	14 c0       	rjmp	.+40     	; 0x3830 <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3808:	6b a1       	ldd	r22, Y+35	; 0x23
    380a:	7c a1       	ldd	r23, Y+36	; 0x24
    380c:	8d a1       	ldd	r24, Y+37	; 0x25
    380e:	9e a1       	ldd	r25, Y+38	; 0x26
    3810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	9a a3       	std	Y+34, r25	; 0x22
    381a:	89 a3       	std	Y+33, r24	; 0x21
    381c:	89 a1       	ldd	r24, Y+33	; 0x21
    381e:	9a a1       	ldd	r25, Y+34	; 0x22
    3820:	9e 8f       	std	Y+30, r25	; 0x1e
    3822:	8d 8f       	std	Y+29, r24	; 0x1d
    3824:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3826:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	f1 f7       	brne	.-4      	; 0x3828 <LCD_voidInit+0xa0c>
    382c:	9e 8f       	std	Y+30, r25	; 0x1e
    382e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    3830:	8c e0       	ldi	r24, 0x0C	; 12
    3832:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_voidSendCommand>
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	a0 e8       	ldi	r26, 0x80	; 128
    383c:	bf e3       	ldi	r27, 0x3F	; 63
    383e:	89 8f       	std	Y+25, r24	; 0x19
    3840:	9a 8f       	std	Y+26, r25	; 0x1a
    3842:	ab 8f       	std	Y+27, r26	; 0x1b
    3844:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3846:	69 8d       	ldd	r22, Y+25	; 0x19
    3848:	7a 8d       	ldd	r23, Y+26	; 0x1a
    384a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    384c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	4a e7       	ldi	r20, 0x7A	; 122
    3854:	55 e4       	ldi	r21, 0x45	; 69
    3856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385a:	dc 01       	movw	r26, r24
    385c:	cb 01       	movw	r24, r22
    385e:	8d 8b       	std	Y+21, r24	; 0x15
    3860:	9e 8b       	std	Y+22, r25	; 0x16
    3862:	af 8b       	std	Y+23, r26	; 0x17
    3864:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3866:	6d 89       	ldd	r22, Y+21	; 0x15
    3868:	7e 89       	ldd	r23, Y+22	; 0x16
    386a:	8f 89       	ldd	r24, Y+23	; 0x17
    386c:	98 8d       	ldd	r25, Y+24	; 0x18
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e8       	ldi	r20, 0x80	; 128
    3874:	5f e3       	ldi	r21, 0x3F	; 63
    3876:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    387a:	88 23       	and	r24, r24
    387c:	2c f4       	brge	.+10     	; 0x3888 <LCD_voidInit+0xa6c>
		__ticks = 1;
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	9c 8b       	std	Y+20, r25	; 0x14
    3884:	8b 8b       	std	Y+19, r24	; 0x13
    3886:	3f c0       	rjmp	.+126    	; 0x3906 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    3888:	6d 89       	ldd	r22, Y+21	; 0x15
    388a:	7e 89       	ldd	r23, Y+22	; 0x16
    388c:	8f 89       	ldd	r24, Y+23	; 0x17
    388e:	98 8d       	ldd	r25, Y+24	; 0x18
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	3f ef       	ldi	r19, 0xFF	; 255
    3894:	4f e7       	ldi	r20, 0x7F	; 127
    3896:	57 e4       	ldi	r21, 0x47	; 71
    3898:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    389c:	18 16       	cp	r1, r24
    389e:	4c f5       	brge	.+82     	; 0x38f2 <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a0:	69 8d       	ldd	r22, Y+25	; 0x19
    38a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e2       	ldi	r20, 0x20	; 32
    38ae:	51 e4       	ldi	r21, 0x41	; 65
    38b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	bc 01       	movw	r22, r24
    38ba:	cd 01       	movw	r24, r26
    38bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	9c 8b       	std	Y+20, r25	; 0x14
    38c6:	8b 8b       	std	Y+19, r24	; 0x13
    38c8:	0f c0       	rjmp	.+30     	; 0x38e8 <LCD_voidInit+0xacc>
    38ca:	80 e9       	ldi	r24, 0x90	; 144
    38cc:	91 e0       	ldi	r25, 0x01	; 1
    38ce:	9a 8b       	std	Y+18, r25	; 0x12
    38d0:	89 8b       	std	Y+17, r24	; 0x11
    38d2:	89 89       	ldd	r24, Y+17	; 0x11
    38d4:	9a 89       	ldd	r25, Y+18	; 0x12
    38d6:	01 97       	sbiw	r24, 0x01	; 1
    38d8:	f1 f7       	brne	.-4      	; 0x38d6 <LCD_voidInit+0xaba>
    38da:	9a 8b       	std	Y+18, r25	; 0x12
    38dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38de:	8b 89       	ldd	r24, Y+19	; 0x13
    38e0:	9c 89       	ldd	r25, Y+20	; 0x14
    38e2:	01 97       	sbiw	r24, 0x01	; 1
    38e4:	9c 8b       	std	Y+20, r25	; 0x14
    38e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e8:	8b 89       	ldd	r24, Y+19	; 0x13
    38ea:	9c 89       	ldd	r25, Y+20	; 0x14
    38ec:	00 97       	sbiw	r24, 0x00	; 0
    38ee:	69 f7       	brne	.-38     	; 0x38ca <LCD_voidInit+0xaae>
    38f0:	14 c0       	rjmp	.+40     	; 0x391a <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f2:	6d 89       	ldd	r22, Y+21	; 0x15
    38f4:	7e 89       	ldd	r23, Y+22	; 0x16
    38f6:	8f 89       	ldd	r24, Y+23	; 0x17
    38f8:	98 8d       	ldd	r25, Y+24	; 0x18
    38fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fe:	dc 01       	movw	r26, r24
    3900:	cb 01       	movw	r24, r22
    3902:	9c 8b       	std	Y+20, r25	; 0x14
    3904:	8b 8b       	std	Y+19, r24	; 0x13
    3906:	8b 89       	ldd	r24, Y+19	; 0x13
    3908:	9c 89       	ldd	r25, Y+20	; 0x14
    390a:	98 8b       	std	Y+16, r25	; 0x10
    390c:	8f 87       	std	Y+15, r24	; 0x0f
    390e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3910:	98 89       	ldd	r25, Y+16	; 0x10
    3912:	01 97       	sbiw	r24, 0x01	; 1
    3914:	f1 f7       	brne	.-4      	; 0x3912 <LCD_voidInit+0xaf6>
    3916:	98 8b       	std	Y+16, r25	; 0x10
    3918:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    391a:	86 e0       	ldi	r24, 0x06	; 6
    391c:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_voidSendCommand>
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	a0 e8       	ldi	r26, 0x80	; 128
    3926:	bf e3       	ldi	r27, 0x3F	; 63
    3928:	8b 87       	std	Y+11, r24	; 0x0b
    392a:	9c 87       	std	Y+12, r25	; 0x0c
    392c:	ad 87       	std	Y+13, r26	; 0x0d
    392e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3930:	6b 85       	ldd	r22, Y+11	; 0x0b
    3932:	7c 85       	ldd	r23, Y+12	; 0x0c
    3934:	8d 85       	ldd	r24, Y+13	; 0x0d
    3936:	9e 85       	ldd	r25, Y+14	; 0x0e
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	4a e7       	ldi	r20, 0x7A	; 122
    393e:	55 e4       	ldi	r21, 0x45	; 69
    3940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3944:	dc 01       	movw	r26, r24
    3946:	cb 01       	movw	r24, r22
    3948:	8f 83       	std	Y+7, r24	; 0x07
    394a:	98 87       	std	Y+8, r25	; 0x08
    394c:	a9 87       	std	Y+9, r26	; 0x09
    394e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3950:	6f 81       	ldd	r22, Y+7	; 0x07
    3952:	78 85       	ldd	r23, Y+8	; 0x08
    3954:	89 85       	ldd	r24, Y+9	; 0x09
    3956:	9a 85       	ldd	r25, Y+10	; 0x0a
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	40 e8       	ldi	r20, 0x80	; 128
    395e:	5f e3       	ldi	r21, 0x3F	; 63
    3960:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3964:	88 23       	and	r24, r24
    3966:	2c f4       	brge	.+10     	; 0x3972 <LCD_voidInit+0xb56>
		__ticks = 1;
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	9e 83       	std	Y+6, r25	; 0x06
    396e:	8d 83       	std	Y+5, r24	; 0x05
    3970:	3f c0       	rjmp	.+126    	; 0x39f0 <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    3972:	6f 81       	ldd	r22, Y+7	; 0x07
    3974:	78 85       	ldd	r23, Y+8	; 0x08
    3976:	89 85       	ldd	r24, Y+9	; 0x09
    3978:	9a 85       	ldd	r25, Y+10	; 0x0a
    397a:	20 e0       	ldi	r18, 0x00	; 0
    397c:	3f ef       	ldi	r19, 0xFF	; 255
    397e:	4f e7       	ldi	r20, 0x7F	; 127
    3980:	57 e4       	ldi	r21, 0x47	; 71
    3982:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3986:	18 16       	cp	r1, r24
    3988:	4c f5       	brge	.+82     	; 0x39dc <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    398a:	6b 85       	ldd	r22, Y+11	; 0x0b
    398c:	7c 85       	ldd	r23, Y+12	; 0x0c
    398e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3990:	9e 85       	ldd	r25, Y+14	; 0x0e
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	40 e2       	ldi	r20, 0x20	; 32
    3998:	51 e4       	ldi	r21, 0x41	; 65
    399a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	bc 01       	movw	r22, r24
    39a4:	cd 01       	movw	r24, r26
    39a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	9e 83       	std	Y+6, r25	; 0x06
    39b0:	8d 83       	std	Y+5, r24	; 0x05
    39b2:	0f c0       	rjmp	.+30     	; 0x39d2 <LCD_voidInit+0xbb6>
    39b4:	80 e9       	ldi	r24, 0x90	; 144
    39b6:	91 e0       	ldi	r25, 0x01	; 1
    39b8:	9c 83       	std	Y+4, r25	; 0x04
    39ba:	8b 83       	std	Y+3, r24	; 0x03
    39bc:	8b 81       	ldd	r24, Y+3	; 0x03
    39be:	9c 81       	ldd	r25, Y+4	; 0x04
    39c0:	01 97       	sbiw	r24, 0x01	; 1
    39c2:	f1 f7       	brne	.-4      	; 0x39c0 <LCD_voidInit+0xba4>
    39c4:	9c 83       	std	Y+4, r25	; 0x04
    39c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ca:	9e 81       	ldd	r25, Y+6	; 0x06
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	9e 83       	std	Y+6, r25	; 0x06
    39d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d2:	8d 81       	ldd	r24, Y+5	; 0x05
    39d4:	9e 81       	ldd	r25, Y+6	; 0x06
    39d6:	00 97       	sbiw	r24, 0x00	; 0
    39d8:	69 f7       	brne	.-38     	; 0x39b4 <LCD_voidInit+0xb98>
    39da:	14 c0       	rjmp	.+40     	; 0x3a04 <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39dc:	6f 81       	ldd	r22, Y+7	; 0x07
    39de:	78 85       	ldd	r23, Y+8	; 0x08
    39e0:	89 85       	ldd	r24, Y+9	; 0x09
    39e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	9e 83       	std	Y+6, r25	; 0x06
    39ee:	8d 83       	std	Y+5, r24	; 0x05
    39f0:	8d 81       	ldd	r24, Y+5	; 0x05
    39f2:	9e 81       	ldd	r25, Y+6	; 0x06
    39f4:	9a 83       	std	Y+2, r25	; 0x02
    39f6:	89 83       	std	Y+1, r24	; 0x01
    39f8:	89 81       	ldd	r24, Y+1	; 0x01
    39fa:	9a 81       	ldd	r25, Y+2	; 0x02
    39fc:	01 97       	sbiw	r24, 0x01	; 1
    39fe:	f1 f7       	brne	.-4      	; 0x39fc <LCD_voidInit+0xbe0>
    3a00:	9a 83       	std	Y+2, r25	; 0x02
    3a02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3a04:	c4 57       	subi	r28, 0x74	; 116
    3a06:	df 4f       	sbci	r29, 0xFF	; 255
    3a08:	0f b6       	in	r0, 0x3f	; 63
    3a0a:	f8 94       	cli
    3a0c:	de bf       	out	0x3e, r29	; 62
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	cd bf       	out	0x3d, r28	; 61
    3a12:	cf 91       	pop	r28
    3a14:	df 91       	pop	r29
    3a16:	1f 91       	pop	r17
    3a18:	0f 91       	pop	r16
    3a1a:	08 95       	ret

00003a1c <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    3a1c:	df 93       	push	r29
    3a1e:	cf 93       	push	r28
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	2f 97       	sbiw	r28, 0x0f	; 15
    3a26:	0f b6       	in	r0, 0x3f	; 63
    3a28:	f8 94       	cli
    3a2a:	de bf       	out	0x3e, r29	; 62
    3a2c:	0f be       	out	0x3f, r0	; 63
    3a2e:	cd bf       	out	0x3d, r28	; 61
    3a30:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	63 e0       	ldi	r22, 0x03	; 3
    3a36:	40 e0       	ldi	r20, 0x00	; 0
    3a38:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	62 e0       	ldi	r22, 0x02	; 2
    3a40:	41 e0       	ldi	r20, 0x01	; 1
    3a42:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(command, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(command, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(command, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(command, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    3a46:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a48:	82 95       	swap	r24
    3a4a:	8f 70       	andi	r24, 0x0F	; 15
    3a4c:	98 2f       	mov	r25, r24
    3a4e:	91 70       	andi	r25, 0x01	; 1
    3a50:	82 e0       	ldi	r24, 0x02	; 2
    3a52:	60 e0       	ldi	r22, 0x00	; 0
    3a54:	49 2f       	mov	r20, r25
    3a56:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    3a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a5c:	82 95       	swap	r24
    3a5e:	86 95       	lsr	r24
    3a60:	87 70       	andi	r24, 0x07	; 7
    3a62:	98 2f       	mov	r25, r24
    3a64:	91 70       	andi	r25, 0x01	; 1
    3a66:	82 e0       	ldi	r24, 0x02	; 2
    3a68:	61 e0       	ldi	r22, 0x01	; 1
    3a6a:	49 2f       	mov	r20, r25
    3a6c:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    3a70:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a72:	82 95       	swap	r24
    3a74:	86 95       	lsr	r24
    3a76:	86 95       	lsr	r24
    3a78:	83 70       	andi	r24, 0x03	; 3
    3a7a:	98 2f       	mov	r25, r24
    3a7c:	91 70       	andi	r25, 0x01	; 1
    3a7e:	82 e0       	ldi	r24, 0x02	; 2
    3a80:	62 e0       	ldi	r22, 0x02	; 2
    3a82:	49 2f       	mov	r20, r25
    3a84:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    3a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a8a:	98 2f       	mov	r25, r24
    3a8c:	99 1f       	adc	r25, r25
    3a8e:	99 27       	eor	r25, r25
    3a90:	99 1f       	adc	r25, r25
    3a92:	82 e0       	ldi	r24, 0x02	; 2
    3a94:	64 e0       	ldi	r22, 0x04	; 4
    3a96:	49 2f       	mov	r20, r25
    3a98:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	62 e0       	ldi	r22, 0x02	; 2
    3aa0:	40 e0       	ldi	r20, 0x00	; 0
    3aa2:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	62 e0       	ldi	r22, 0x02	; 2
    3aaa:	41 e0       	ldi	r20, 0x01	; 1
    3aac:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 0));
    3ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ab2:	98 2f       	mov	r25, r24
    3ab4:	91 70       	andi	r25, 0x01	; 1
    3ab6:	82 e0       	ldi	r24, 0x02	; 2
    3ab8:	60 e0       	ldi	r22, 0x00	; 0
    3aba:	49 2f       	mov	r20, r25
    3abc:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 1));
    3ac0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ac2:	86 95       	lsr	r24
    3ac4:	98 2f       	mov	r25, r24
    3ac6:	91 70       	andi	r25, 0x01	; 1
    3ac8:	82 e0       	ldi	r24, 0x02	; 2
    3aca:	61 e0       	ldi	r22, 0x01	; 1
    3acc:	49 2f       	mov	r20, r25
    3ace:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 2));
    3ad2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad4:	86 95       	lsr	r24
    3ad6:	86 95       	lsr	r24
    3ad8:	98 2f       	mov	r25, r24
    3ada:	91 70       	andi	r25, 0x01	; 1
    3adc:	82 e0       	ldi	r24, 0x02	; 2
    3ade:	62 e0       	ldi	r22, 0x02	; 2
    3ae0:	49 2f       	mov	r20, r25
    3ae2:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 3));
    3ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ae8:	86 95       	lsr	r24
    3aea:	86 95       	lsr	r24
    3aec:	86 95       	lsr	r24
    3aee:	98 2f       	mov	r25, r24
    3af0:	91 70       	andi	r25, 0x01	; 1
    3af2:	82 e0       	ldi	r24, 0x02	; 2
    3af4:	64 e0       	ldi	r22, 0x04	; 4
    3af6:	49 2f       	mov	r20, r25
    3af8:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	62 e0       	ldi	r22, 0x02	; 2
    3b00:	40 e0       	ldi	r20, 0x00	; 0
    3b02:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	a0 ea       	ldi	r26, 0xA0	; 160
    3b0c:	b0 e4       	ldi	r27, 0x40	; 64
    3b0e:	8b 87       	std	Y+11, r24	; 0x0b
    3b10:	9c 87       	std	Y+12, r25	; 0x0c
    3b12:	ad 87       	std	Y+13, r26	; 0x0d
    3b14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	4a e7       	ldi	r20, 0x7A	; 122
    3b24:	55 e4       	ldi	r21, 0x45	; 69
    3b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	8f 83       	std	Y+7, r24	; 0x07
    3b30:	98 87       	std	Y+8, r25	; 0x08
    3b32:	a9 87       	std	Y+9, r26	; 0x09
    3b34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b36:	6f 81       	ldd	r22, Y+7	; 0x07
    3b38:	78 85       	ldd	r23, Y+8	; 0x08
    3b3a:	89 85       	ldd	r24, Y+9	; 0x09
    3b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	40 e8       	ldi	r20, 0x80	; 128
    3b44:	5f e3       	ldi	r21, 0x3F	; 63
    3b46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b4a:	88 23       	and	r24, r24
    3b4c:	2c f4       	brge	.+10     	; 0x3b58 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	9e 83       	std	Y+6, r25	; 0x06
    3b54:	8d 83       	std	Y+5, r24	; 0x05
    3b56:	3f c0       	rjmp	.+126    	; 0x3bd6 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    3b58:	6f 81       	ldd	r22, Y+7	; 0x07
    3b5a:	78 85       	ldd	r23, Y+8	; 0x08
    3b5c:	89 85       	ldd	r24, Y+9	; 0x09
    3b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	3f ef       	ldi	r19, 0xFF	; 255
    3b64:	4f e7       	ldi	r20, 0x7F	; 127
    3b66:	57 e4       	ldi	r21, 0x47	; 71
    3b68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b6c:	18 16       	cp	r1, r24
    3b6e:	4c f5       	brge	.+82     	; 0x3bc2 <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b78:	20 e0       	ldi	r18, 0x00	; 0
    3b7a:	30 e0       	ldi	r19, 0x00	; 0
    3b7c:	40 e2       	ldi	r20, 0x20	; 32
    3b7e:	51 e4       	ldi	r21, 0x41	; 65
    3b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	bc 01       	movw	r22, r24
    3b8a:	cd 01       	movw	r24, r26
    3b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	9e 83       	std	Y+6, r25	; 0x06
    3b96:	8d 83       	std	Y+5, r24	; 0x05
    3b98:	0f c0       	rjmp	.+30     	; 0x3bb8 <LCD_voidSendCommand+0x19c>
    3b9a:	80 e9       	ldi	r24, 0x90	; 144
    3b9c:	91 e0       	ldi	r25, 0x01	; 1
    3b9e:	9c 83       	std	Y+4, r25	; 0x04
    3ba0:	8b 83       	std	Y+3, r24	; 0x03
    3ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	f1 f7       	brne	.-4      	; 0x3ba6 <LCD_voidSendCommand+0x18a>
    3baa:	9c 83       	std	Y+4, r25	; 0x04
    3bac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bae:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	9e 83       	std	Y+6, r25	; 0x06
    3bb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bba:	9e 81       	ldd	r25, Y+6	; 0x06
    3bbc:	00 97       	sbiw	r24, 0x00	; 0
    3bbe:	69 f7       	brne	.-38     	; 0x3b9a <LCD_voidSendCommand+0x17e>
    3bc0:	14 c0       	rjmp	.+40     	; 0x3bea <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc4:	78 85       	ldd	r23, Y+8	; 0x08
    3bc6:	89 85       	ldd	r24, Y+9	; 0x09
    3bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	9e 83       	std	Y+6, r25	; 0x06
    3bd4:	8d 83       	std	Y+5, r24	; 0x05
    3bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bda:	9a 83       	std	Y+2, r25	; 0x02
    3bdc:	89 83       	std	Y+1, r24	; 0x01
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	9a 81       	ldd	r25, Y+2	; 0x02
    3be2:	01 97       	sbiw	r24, 0x01	; 1
    3be4:	f1 f7       	brne	.-4      	; 0x3be2 <LCD_voidSendCommand+0x1c6>
    3be6:	9a 83       	std	Y+2, r25	; 0x02
    3be8:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    3bea:	2f 96       	adiw	r28, 0x0f	; 15
    3bec:	0f b6       	in	r0, 0x3f	; 63
    3bee:	f8 94       	cli
    3bf0:	de bf       	out	0x3e, r29	; 62
    3bf2:	0f be       	out	0x3f, r0	; 63
    3bf4:	cd bf       	out	0x3d, r28	; 61
    3bf6:	cf 91       	pop	r28
    3bf8:	df 91       	pop	r29
    3bfa:	08 95       	ret

00003bfc <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    3bfc:	df 93       	push	r29
    3bfe:	cf 93       	push	r28
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62
    3c04:	2f 97       	sbiw	r28, 0x0f	; 15
    3c06:	0f b6       	in	r0, 0x3f	; 63
    3c08:	f8 94       	cli
    3c0a:	de bf       	out	0x3e, r29	; 62
    3c0c:	0f be       	out	0x3f, r0	; 63
    3c0e:	cd bf       	out	0x3d, r28	; 61
    3c10:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	63 e0       	ldi	r22, 0x03	; 3
    3c16:	40 e0       	ldi	r20, 0x00	; 0
    3c18:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	62 e0       	ldi	r22, 0x02	; 2
    3c20:	41 e0       	ldi	r20, 0x01	; 1
    3c22:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
    3c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c28:	82 95       	swap	r24
    3c2a:	8f 70       	andi	r24, 0x0F	; 15
    3c2c:	98 2f       	mov	r25, r24
    3c2e:	91 70       	andi	r25, 0x01	; 1
    3c30:	82 e0       	ldi	r24, 0x02	; 2
    3c32:	60 e0       	ldi	r22, 0x00	; 0
    3c34:	49 2f       	mov	r20, r25
    3c36:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
    3c3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c3c:	82 95       	swap	r24
    3c3e:	86 95       	lsr	r24
    3c40:	87 70       	andi	r24, 0x07	; 7
    3c42:	98 2f       	mov	r25, r24
    3c44:	91 70       	andi	r25, 0x01	; 1
    3c46:	82 e0       	ldi	r24, 0x02	; 2
    3c48:	61 e0       	ldi	r22, 0x01	; 1
    3c4a:	49 2f       	mov	r20, r25
    3c4c:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
    3c50:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c52:	82 95       	swap	r24
    3c54:	86 95       	lsr	r24
    3c56:	86 95       	lsr	r24
    3c58:	83 70       	andi	r24, 0x03	; 3
    3c5a:	98 2f       	mov	r25, r24
    3c5c:	91 70       	andi	r25, 0x01	; 1
    3c5e:	82 e0       	ldi	r24, 0x02	; 2
    3c60:	62 e0       	ldi	r22, 0x02	; 2
    3c62:	49 2f       	mov	r20, r25
    3c64:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
    3c68:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c6a:	98 2f       	mov	r25, r24
    3c6c:	99 1f       	adc	r25, r25
    3c6e:	99 27       	eor	r25, r25
    3c70:	99 1f       	adc	r25, r25
    3c72:	82 e0       	ldi	r24, 0x02	; 2
    3c74:	64 e0       	ldi	r22, 0x04	; 4
    3c76:	49 2f       	mov	r20, r25
    3c78:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	62 e0       	ldi	r22, 0x02	; 2
    3c80:	40 e0       	ldi	r20, 0x00	; 0
    3c82:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	a0 ea       	ldi	r26, 0xA0	; 160
    3c8c:	b0 e4       	ldi	r27, 0x40	; 64
    3c8e:	8b 87       	std	Y+11, r24	; 0x0b
    3c90:	9c 87       	std	Y+12, r25	; 0x0c
    3c92:	ad 87       	std	Y+13, r26	; 0x0d
    3c94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	4a e7       	ldi	r20, 0x7A	; 122
    3ca4:	55 e4       	ldi	r21, 0x45	; 69
    3ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	8f 83       	std	Y+7, r24	; 0x07
    3cb0:	98 87       	std	Y+8, r25	; 0x08
    3cb2:	a9 87       	std	Y+9, r26	; 0x09
    3cb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb8:	78 85       	ldd	r23, Y+8	; 0x08
    3cba:	89 85       	ldd	r24, Y+9	; 0x09
    3cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbe:	20 e0       	ldi	r18, 0x00	; 0
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	40 e8       	ldi	r20, 0x80	; 128
    3cc4:	5f e3       	ldi	r21, 0x3F	; 63
    3cc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cca:	88 23       	and	r24, r24
    3ccc:	2c f4       	brge	.+10     	; 0x3cd8 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	9e 83       	std	Y+6, r25	; 0x06
    3cd4:	8d 83       	std	Y+5, r24	; 0x05
    3cd6:	3f c0       	rjmp	.+126    	; 0x3d56 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    3cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cda:	78 85       	ldd	r23, Y+8	; 0x08
    3cdc:	89 85       	ldd	r24, Y+9	; 0x09
    3cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	3f ef       	ldi	r19, 0xFF	; 255
    3ce4:	4f e7       	ldi	r20, 0x7F	; 127
    3ce6:	57 e4       	ldi	r21, 0x47	; 71
    3ce8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cec:	18 16       	cp	r1, r24
    3cee:	4c f5       	brge	.+82     	; 0x3d42 <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	40 e2       	ldi	r20, 0x20	; 32
    3cfe:	51 e4       	ldi	r21, 0x41	; 65
    3d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d04:	dc 01       	movw	r26, r24
    3d06:	cb 01       	movw	r24, r22
    3d08:	bc 01       	movw	r22, r24
    3d0a:	cd 01       	movw	r24, r26
    3d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	9e 83       	std	Y+6, r25	; 0x06
    3d16:	8d 83       	std	Y+5, r24	; 0x05
    3d18:	0f c0       	rjmp	.+30     	; 0x3d38 <LCD_voidSendInitCommand+0x13c>
    3d1a:	80 e9       	ldi	r24, 0x90	; 144
    3d1c:	91 e0       	ldi	r25, 0x01	; 1
    3d1e:	9c 83       	std	Y+4, r25	; 0x04
    3d20:	8b 83       	std	Y+3, r24	; 0x03
    3d22:	8b 81       	ldd	r24, Y+3	; 0x03
    3d24:	9c 81       	ldd	r25, Y+4	; 0x04
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	f1 f7       	brne	.-4      	; 0x3d26 <LCD_voidSendInitCommand+0x12a>
    3d2a:	9c 83       	std	Y+4, r25	; 0x04
    3d2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d30:	9e 81       	ldd	r25, Y+6	; 0x06
    3d32:	01 97       	sbiw	r24, 0x01	; 1
    3d34:	9e 83       	std	Y+6, r25	; 0x06
    3d36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d38:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3c:	00 97       	sbiw	r24, 0x00	; 0
    3d3e:	69 f7       	brne	.-38     	; 0x3d1a <LCD_voidSendInitCommand+0x11e>
    3d40:	14 c0       	rjmp	.+40     	; 0x3d6a <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d42:	6f 81       	ldd	r22, Y+7	; 0x07
    3d44:	78 85       	ldd	r23, Y+8	; 0x08
    3d46:	89 85       	ldd	r24, Y+9	; 0x09
    3d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4e:	dc 01       	movw	r26, r24
    3d50:	cb 01       	movw	r24, r22
    3d52:	9e 83       	std	Y+6, r25	; 0x06
    3d54:	8d 83       	std	Y+5, r24	; 0x05
    3d56:	8d 81       	ldd	r24, Y+5	; 0x05
    3d58:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5a:	9a 83       	std	Y+2, r25	; 0x02
    3d5c:	89 83       	std	Y+1, r24	; 0x01
    3d5e:	89 81       	ldd	r24, Y+1	; 0x01
    3d60:	9a 81       	ldd	r25, Y+2	; 0x02
    3d62:	01 97       	sbiw	r24, 0x01	; 1
    3d64:	f1 f7       	brne	.-4      	; 0x3d62 <LCD_voidSendInitCommand+0x166>
    3d66:	9a 83       	std	Y+2, r25	; 0x02
    3d68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    3d6a:	2f 96       	adiw	r28, 0x0f	; 15
    3d6c:	0f b6       	in	r0, 0x3f	; 63
    3d6e:	f8 94       	cli
    3d70:	de bf       	out	0x3e, r29	; 62
    3d72:	0f be       	out	0x3f, r0	; 63
    3d74:	cd bf       	out	0x3d, r28	; 61
    3d76:	cf 91       	pop	r28
    3d78:	df 91       	pop	r29
    3d7a:	08 95       	ret

00003d7c <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    3d7c:	df 93       	push	r29
    3d7e:	cf 93       	push	r28
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
    3d84:	2f 97       	sbiw	r28, 0x0f	; 15
    3d86:	0f b6       	in	r0, 0x3f	; 63
    3d88:	f8 94       	cli
    3d8a:	de bf       	out	0x3e, r29	; 62
    3d8c:	0f be       	out	0x3f, r0	; 63
    3d8e:	cd bf       	out	0x3d, r28	; 61
    3d90:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, High); //RS = 1
    3d92:	81 e0       	ldi	r24, 0x01	; 1
    3d94:	63 e0       	ldi	r22, 0x03	; 3
    3d96:	41 e0       	ldi	r20, 0x01	; 1
    3d98:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3d9c:	81 e0       	ldi	r24, 0x01	; 1
    3d9e:	62 e0       	ldi	r22, 0x02	; 2
    3da0:	41 e0       	ldi	r20, 0x01	; 1
    3da2:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(data, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(data, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(data, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(data, 3));
#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 4));
    3da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3da8:	82 95       	swap	r24
    3daa:	8f 70       	andi	r24, 0x0F	; 15
    3dac:	98 2f       	mov	r25, r24
    3dae:	91 70       	andi	r25, 0x01	; 1
    3db0:	82 e0       	ldi	r24, 0x02	; 2
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	49 2f       	mov	r20, r25
    3db6:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 5));
    3dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dbc:	82 95       	swap	r24
    3dbe:	86 95       	lsr	r24
    3dc0:	87 70       	andi	r24, 0x07	; 7
    3dc2:	98 2f       	mov	r25, r24
    3dc4:	91 70       	andi	r25, 0x01	; 1
    3dc6:	82 e0       	ldi	r24, 0x02	; 2
    3dc8:	61 e0       	ldi	r22, 0x01	; 1
    3dca:	49 2f       	mov	r20, r25
    3dcc:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 6));
    3dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dd2:	82 95       	swap	r24
    3dd4:	86 95       	lsr	r24
    3dd6:	86 95       	lsr	r24
    3dd8:	83 70       	andi	r24, 0x03	; 3
    3dda:	98 2f       	mov	r25, r24
    3ddc:	91 70       	andi	r25, 0x01	; 1
    3dde:	82 e0       	ldi	r24, 0x02	; 2
    3de0:	62 e0       	ldi	r22, 0x02	; 2
    3de2:	49 2f       	mov	r20, r25
    3de4:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 7));
    3de8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dea:	98 2f       	mov	r25, r24
    3dec:	99 1f       	adc	r25, r25
    3dee:	99 27       	eor	r25, r25
    3df0:	99 1f       	adc	r25, r25
    3df2:	82 e0       	ldi	r24, 0x02	; 2
    3df4:	64 e0       	ldi	r22, 0x04	; 4
    3df6:	49 2f       	mov	r20, r25
    3df8:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	62 e0       	ldi	r22, 0x02	; 2
    3e00:	40 e0       	ldi	r20, 0x00	; 0
    3e02:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	62 e0       	ldi	r22, 0x02	; 2
    3e0a:	41 e0       	ldi	r20, 0x01	; 1
    3e0c:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 0));
    3e10:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e12:	98 2f       	mov	r25, r24
    3e14:	91 70       	andi	r25, 0x01	; 1
    3e16:	82 e0       	ldi	r24, 0x02	; 2
    3e18:	60 e0       	ldi	r22, 0x00	; 0
    3e1a:	49 2f       	mov	r20, r25
    3e1c:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 1));
    3e20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e22:	86 95       	lsr	r24
    3e24:	98 2f       	mov	r25, r24
    3e26:	91 70       	andi	r25, 0x01	; 1
    3e28:	82 e0       	ldi	r24, 0x02	; 2
    3e2a:	61 e0       	ldi	r22, 0x01	; 1
    3e2c:	49 2f       	mov	r20, r25
    3e2e:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 2));
    3e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e34:	86 95       	lsr	r24
    3e36:	86 95       	lsr	r24
    3e38:	98 2f       	mov	r25, r24
    3e3a:	91 70       	andi	r25, 0x01	; 1
    3e3c:	82 e0       	ldi	r24, 0x02	; 2
    3e3e:	62 e0       	ldi	r22, 0x02	; 2
    3e40:	49 2f       	mov	r20, r25
    3e42:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 3));
    3e46:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e48:	86 95       	lsr	r24
    3e4a:	86 95       	lsr	r24
    3e4c:	86 95       	lsr	r24
    3e4e:	98 2f       	mov	r25, r24
    3e50:	91 70       	andi	r25, 0x01	; 1
    3e52:	82 e0       	ldi	r24, 0x02	; 2
    3e54:	64 e0       	ldi	r22, 0x04	; 4
    3e56:	49 2f       	mov	r20, r25
    3e58:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	62 e0       	ldi	r22, 0x02	; 2
    3e60:	40 e0       	ldi	r20, 0x00	; 0
    3e62:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
    3e66:	80 e0       	ldi	r24, 0x00	; 0
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	a0 ea       	ldi	r26, 0xA0	; 160
    3e6c:	b0 e4       	ldi	r27, 0x40	; 64
    3e6e:	8b 87       	std	Y+11, r24	; 0x0b
    3e70:	9c 87       	std	Y+12, r25	; 0x0c
    3e72:	ad 87       	std	Y+13, r26	; 0x0d
    3e74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	4a e7       	ldi	r20, 0x7A	; 122
    3e84:	55 e4       	ldi	r21, 0x45	; 69
    3e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e8a:	dc 01       	movw	r26, r24
    3e8c:	cb 01       	movw	r24, r22
    3e8e:	8f 83       	std	Y+7, r24	; 0x07
    3e90:	98 87       	std	Y+8, r25	; 0x08
    3e92:	a9 87       	std	Y+9, r26	; 0x09
    3e94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e96:	6f 81       	ldd	r22, Y+7	; 0x07
    3e98:	78 85       	ldd	r23, Y+8	; 0x08
    3e9a:	89 85       	ldd	r24, Y+9	; 0x09
    3e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	40 e8       	ldi	r20, 0x80	; 128
    3ea4:	5f e3       	ldi	r21, 0x3F	; 63
    3ea6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eaa:	88 23       	and	r24, r24
    3eac:	2c f4       	brge	.+10     	; 0x3eb8 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    3eae:	81 e0       	ldi	r24, 0x01	; 1
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	9e 83       	std	Y+6, r25	; 0x06
    3eb4:	8d 83       	std	Y+5, r24	; 0x05
    3eb6:	3f c0       	rjmp	.+126    	; 0x3f36 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    3eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3eba:	78 85       	ldd	r23, Y+8	; 0x08
    3ebc:	89 85       	ldd	r24, Y+9	; 0x09
    3ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	3f ef       	ldi	r19, 0xFF	; 255
    3ec4:	4f e7       	ldi	r20, 0x7F	; 127
    3ec6:	57 e4       	ldi	r21, 0x47	; 71
    3ec8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ecc:	18 16       	cp	r1, r24
    3ece:	4c f5       	brge	.+82     	; 0x3f22 <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	40 e2       	ldi	r20, 0x20	; 32
    3ede:	51 e4       	ldi	r21, 0x41	; 65
    3ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	bc 01       	movw	r22, r24
    3eea:	cd 01       	movw	r24, r26
    3eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	cb 01       	movw	r24, r22
    3ef4:	9e 83       	std	Y+6, r25	; 0x06
    3ef6:	8d 83       	std	Y+5, r24	; 0x05
    3ef8:	0f c0       	rjmp	.+30     	; 0x3f18 <LCD_voidWriteChar+0x19c>
    3efa:	80 e9       	ldi	r24, 0x90	; 144
    3efc:	91 e0       	ldi	r25, 0x01	; 1
    3efe:	9c 83       	std	Y+4, r25	; 0x04
    3f00:	8b 83       	std	Y+3, r24	; 0x03
    3f02:	8b 81       	ldd	r24, Y+3	; 0x03
    3f04:	9c 81       	ldd	r25, Y+4	; 0x04
    3f06:	01 97       	sbiw	r24, 0x01	; 1
    3f08:	f1 f7       	brne	.-4      	; 0x3f06 <LCD_voidWriteChar+0x18a>
    3f0a:	9c 83       	std	Y+4, r25	; 0x04
    3f0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f10:	9e 81       	ldd	r25, Y+6	; 0x06
    3f12:	01 97       	sbiw	r24, 0x01	; 1
    3f14:	9e 83       	std	Y+6, r25	; 0x06
    3f16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f18:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f1c:	00 97       	sbiw	r24, 0x00	; 0
    3f1e:	69 f7       	brne	.-38     	; 0x3efa <LCD_voidWriteChar+0x17e>
    3f20:	14 c0       	rjmp	.+40     	; 0x3f4a <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f22:	6f 81       	ldd	r22, Y+7	; 0x07
    3f24:	78 85       	ldd	r23, Y+8	; 0x08
    3f26:	89 85       	ldd	r24, Y+9	; 0x09
    3f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	9e 83       	std	Y+6, r25	; 0x06
    3f34:	8d 83       	std	Y+5, r24	; 0x05
    3f36:	8d 81       	ldd	r24, Y+5	; 0x05
    3f38:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3a:	9a 83       	std	Y+2, r25	; 0x02
    3f3c:	89 83       	std	Y+1, r24	; 0x01
    3f3e:	89 81       	ldd	r24, Y+1	; 0x01
    3f40:	9a 81       	ldd	r25, Y+2	; 0x02
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	f1 f7       	brne	.-4      	; 0x3f42 <LCD_voidWriteChar+0x1c6>
    3f46:	9a 83       	std	Y+2, r25	; 0x02
    3f48:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    3f4a:	2f 96       	adiw	r28, 0x0f	; 15
    3f4c:	0f b6       	in	r0, 0x3f	; 63
    3f4e:	f8 94       	cli
    3f50:	de bf       	out	0x3e, r29	; 62
    3f52:	0f be       	out	0x3f, r0	; 63
    3f54:	cd bf       	out	0x3d, r28	; 61
    3f56:	cf 91       	pop	r28
    3f58:	df 91       	pop	r29
    3f5a:	08 95       	ret

00003f5c <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    3f5c:	df 93       	push	r29
    3f5e:	cf 93       	push	r28
    3f60:	00 d0       	rcall	.+0      	; 0x3f62 <LCD_voidWriteString+0x6>
    3f62:	0f 92       	push	r0
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	9b 83       	std	Y+3, r25	; 0x03
    3f6a:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    3f6c:	19 82       	std	Y+1, r1	; 0x01
    3f6e:	0e c0       	rjmp	.+28     	; 0x3f8c <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    3f70:	89 81       	ldd	r24, Y+1	; 0x01
    3f72:	28 2f       	mov	r18, r24
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	8a 81       	ldd	r24, Y+2	; 0x02
    3f78:	9b 81       	ldd	r25, Y+3	; 0x03
    3f7a:	fc 01       	movw	r30, r24
    3f7c:	e2 0f       	add	r30, r18
    3f7e:	f3 1f       	adc	r31, r19
    3f80:	80 81       	ld	r24, Z
    3f82:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
		index++;
    3f86:	89 81       	ldd	r24, Y+1	; 0x01
    3f88:	8f 5f       	subi	r24, 0xFF	; 255
    3f8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
    3f8e:	28 2f       	mov	r18, r24
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	8a 81       	ldd	r24, Y+2	; 0x02
    3f94:	9b 81       	ldd	r25, Y+3	; 0x03
    3f96:	fc 01       	movw	r30, r24
    3f98:	e2 0f       	add	r30, r18
    3f9a:	f3 1f       	adc	r31, r19
    3f9c:	80 81       	ld	r24, Z
    3f9e:	88 23       	and	r24, r24
    3fa0:	39 f7       	brne	.-50     	; 0x3f70 <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    3fa2:	0f 90       	pop	r0
    3fa4:	0f 90       	pop	r0
    3fa6:	0f 90       	pop	r0
    3fa8:	cf 91       	pop	r28
    3faa:	df 91       	pop	r29
    3fac:	08 95       	ret

00003fae <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    3fae:	0f 93       	push	r16
    3fb0:	1f 93       	push	r17
    3fb2:	df 93       	push	r29
    3fb4:	cf 93       	push	r28
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62
    3fba:	2e 97       	sbiw	r28, 0x0e	; 14
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	de bf       	out	0x3e, r29	; 62
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	cd bf       	out	0x3d, r28	; 61
    3fc6:	69 87       	std	Y+9, r22	; 0x09
    3fc8:	7a 87       	std	Y+10, r23	; 0x0a
    3fca:	8b 87       	std	Y+11, r24	; 0x0b
    3fcc:	9c 87       	std	Y+12, r25	; 0x0c
    3fce:	5e 87       	std	Y+14, r21	; 0x0e
    3fd0:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    3fd2:	1d 82       	std	Y+5, r1	; 0x05
    3fd4:	1e 82       	std	Y+6, r1	; 0x06
    3fd6:	1f 82       	std	Y+7, r1	; 0x07
    3fd8:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    3fda:	83 e1       	ldi	r24, 0x13	; 19
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	a0 e0       	ldi	r26, 0x00	; 0
    3fe0:	b0 e0       	ldi	r27, 0x00	; 0
    3fe2:	89 83       	std	Y+1, r24	; 0x01
    3fe4:	9a 83       	std	Y+2, r25	; 0x02
    3fe6:	ab 83       	std	Y+3, r26	; 0x03
    3fe8:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    3fea:	29 81       	ldd	r18, Y+1	; 0x01
    3fec:	3a 81       	ldd	r19, Y+2	; 0x02
    3fee:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ff2:	fc 01       	movw	r30, r24
    3ff4:	e2 0f       	add	r30, r18
    3ff6:	f3 1f       	adc	r31, r19
    3ff8:	10 82       	st	Z, r1
    3ffa:	89 81       	ldd	r24, Y+1	; 0x01
    3ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffe:	ab 81       	ldd	r26, Y+3	; 0x03
    4000:	bc 81       	ldd	r27, Y+4	; 0x04
    4002:	01 97       	sbiw	r24, 0x01	; 1
    4004:	a1 09       	sbc	r26, r1
    4006:	b1 09       	sbc	r27, r1
    4008:	89 83       	std	Y+1, r24	; 0x01
    400a:	9a 83       	std	Y+2, r25	; 0x02
    400c:	ab 83       	std	Y+3, r26	; 0x03
    400e:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    4010:	89 85       	ldd	r24, Y+9	; 0x09
    4012:	9a 85       	ldd	r25, Y+10	; 0x0a
    4014:	ab 85       	ldd	r26, Y+11	; 0x0b
    4016:	bc 85       	ldd	r27, Y+12	; 0x0c
    4018:	bb 23       	and	r27, r27
    401a:	0c f0       	brlt	.+2      	; 0x401e <IntToString+0x70>
    401c:	4d c0       	rjmp	.+154    	; 0x40b8 <IntToString+0x10a>
		flag = 1;
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	a0 e0       	ldi	r26, 0x00	; 0
    4024:	b0 e0       	ldi	r27, 0x00	; 0
    4026:	8d 83       	std	Y+5, r24	; 0x05
    4028:	9e 83       	std	Y+6, r25	; 0x06
    402a:	af 83       	std	Y+7, r26	; 0x07
    402c:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    402e:	89 85       	ldd	r24, Y+9	; 0x09
    4030:	9a 85       	ldd	r25, Y+10	; 0x0a
    4032:	ab 85       	ldd	r26, Y+11	; 0x0b
    4034:	bc 85       	ldd	r27, Y+12	; 0x0c
    4036:	b0 95       	com	r27
    4038:	a0 95       	com	r26
    403a:	90 95       	com	r25
    403c:	81 95       	neg	r24
    403e:	9f 4f       	sbci	r25, 0xFF	; 255
    4040:	af 4f       	sbci	r26, 0xFF	; 255
    4042:	bf 4f       	sbci	r27, 0xFF	; 255
    4044:	89 87       	std	Y+9, r24	; 0x09
    4046:	9a 87       	std	Y+10, r25	; 0x0a
    4048:	ab 87       	std	Y+11, r26	; 0x0b
    404a:	bc 87       	std	Y+12, r27	; 0x0c
    404c:	35 c0       	rjmp	.+106    	; 0x40b8 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    404e:	29 81       	ldd	r18, Y+1	; 0x01
    4050:	3a 81       	ldd	r19, Y+2	; 0x02
    4052:	8d 85       	ldd	r24, Y+13	; 0x0d
    4054:	9e 85       	ldd	r25, Y+14	; 0x0e
    4056:	8c 01       	movw	r16, r24
    4058:	02 0f       	add	r16, r18
    405a:	13 1f       	adc	r17, r19
    405c:	89 85       	ldd	r24, Y+9	; 0x09
    405e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4060:	ab 85       	ldd	r26, Y+11	; 0x0b
    4062:	bc 85       	ldd	r27, Y+12	; 0x0c
    4064:	2a e0       	ldi	r18, 0x0A	; 10
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	40 e0       	ldi	r20, 0x00	; 0
    406a:	50 e0       	ldi	r21, 0x00	; 0
    406c:	bc 01       	movw	r22, r24
    406e:	cd 01       	movw	r24, r26
    4070:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <__divmodsi4>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	80 5d       	subi	r24, 0xD0	; 208
    407a:	f8 01       	movw	r30, r16
    407c:	80 83       	st	Z, r24
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	9a 81       	ldd	r25, Y+2	; 0x02
    4082:	ab 81       	ldd	r26, Y+3	; 0x03
    4084:	bc 81       	ldd	r27, Y+4	; 0x04
    4086:	01 97       	sbiw	r24, 0x01	; 1
    4088:	a1 09       	sbc	r26, r1
    408a:	b1 09       	sbc	r27, r1
    408c:	89 83       	std	Y+1, r24	; 0x01
    408e:	9a 83       	std	Y+2, r25	; 0x02
    4090:	ab 83       	std	Y+3, r26	; 0x03
    4092:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    4094:	89 85       	ldd	r24, Y+9	; 0x09
    4096:	9a 85       	ldd	r25, Y+10	; 0x0a
    4098:	ab 85       	ldd	r26, Y+11	; 0x0b
    409a:	bc 85       	ldd	r27, Y+12	; 0x0c
    409c:	2a e0       	ldi	r18, 0x0A	; 10
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	40 e0       	ldi	r20, 0x00	; 0
    40a2:	50 e0       	ldi	r21, 0x00	; 0
    40a4:	bc 01       	movw	r22, r24
    40a6:	cd 01       	movw	r24, r26
    40a8:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <__divmodsi4>
    40ac:	da 01       	movw	r26, r20
    40ae:	c9 01       	movw	r24, r18
    40b0:	89 87       	std	Y+9, r24	; 0x09
    40b2:	9a 87       	std	Y+10, r25	; 0x0a
    40b4:	ab 87       	std	Y+11, r26	; 0x0b
    40b6:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    40b8:	89 85       	ldd	r24, Y+9	; 0x09
    40ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    40bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    40be:	bc 85       	ldd	r27, Y+12	; 0x0c
    40c0:	00 97       	sbiw	r24, 0x00	; 0
    40c2:	a1 05       	cpc	r26, r1
    40c4:	b1 05       	cpc	r27, r1
    40c6:	19 f6       	brne	.-122    	; 0x404e <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    40c8:	8d 81       	ldd	r24, Y+5	; 0x05
    40ca:	9e 81       	ldd	r25, Y+6	; 0x06
    40cc:	af 81       	ldd	r26, Y+7	; 0x07
    40ce:	b8 85       	ldd	r27, Y+8	; 0x08
    40d0:	00 97       	sbiw	r24, 0x00	; 0
    40d2:	a1 05       	cpc	r26, r1
    40d4:	b1 05       	cpc	r27, r1
    40d6:	a1 f0       	breq	.+40     	; 0x4100 <IntToString+0x152>
		str[i--] = '-';
    40d8:	29 81       	ldd	r18, Y+1	; 0x01
    40da:	3a 81       	ldd	r19, Y+2	; 0x02
    40dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    40de:	9e 85       	ldd	r25, Y+14	; 0x0e
    40e0:	fc 01       	movw	r30, r24
    40e2:	e2 0f       	add	r30, r18
    40e4:	f3 1f       	adc	r31, r19
    40e6:	8d e2       	ldi	r24, 0x2D	; 45
    40e8:	80 83       	st	Z, r24
    40ea:	89 81       	ldd	r24, Y+1	; 0x01
    40ec:	9a 81       	ldd	r25, Y+2	; 0x02
    40ee:	ab 81       	ldd	r26, Y+3	; 0x03
    40f0:	bc 81       	ldd	r27, Y+4	; 0x04
    40f2:	01 97       	sbiw	r24, 0x01	; 1
    40f4:	a1 09       	sbc	r26, r1
    40f6:	b1 09       	sbc	r27, r1
    40f8:	89 83       	std	Y+1, r24	; 0x01
    40fa:	9a 83       	std	Y+2, r25	; 0x02
    40fc:	ab 83       	std	Y+3, r26	; 0x03
    40fe:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	9a 81       	ldd	r25, Y+2	; 0x02
    4104:	ab 81       	ldd	r26, Y+3	; 0x03
    4106:	bc 81       	ldd	r27, Y+4	; 0x04
    4108:	01 96       	adiw	r24, 0x01	; 1
    410a:	a1 1d       	adc	r26, r1
    410c:	b1 1d       	adc	r27, r1
    410e:	89 83       	std	Y+1, r24	; 0x01
    4110:	9a 83       	std	Y+2, r25	; 0x02
    4112:	ab 83       	std	Y+3, r26	; 0x03
    4114:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    4116:	29 81       	ldd	r18, Y+1	; 0x01
    4118:	3a 81       	ldd	r19, Y+2	; 0x02
    411a:	8d 85       	ldd	r24, Y+13	; 0x0d
    411c:	9e 85       	ldd	r25, Y+14	; 0x0e
    411e:	82 0f       	add	r24, r18
    4120:	93 1f       	adc	r25, r19

}
    4122:	2e 96       	adiw	r28, 0x0e	; 14
    4124:	0f b6       	in	r0, 0x3f	; 63
    4126:	f8 94       	cli
    4128:	de bf       	out	0x3e, r29	; 62
    412a:	0f be       	out	0x3f, r0	; 63
    412c:	cd bf       	out	0x3d, r28	; 61
    412e:	cf 91       	pop	r28
    4130:	df 91       	pop	r29
    4132:	1f 91       	pop	r17
    4134:	0f 91       	pop	r16
    4136:	08 95       	ret

00004138 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    4138:	df 93       	push	r29
    413a:	cf 93       	push	r28
    413c:	cd b7       	in	r28, 0x3d	; 61
    413e:	de b7       	in	r29, 0x3e	; 62
    4140:	6a 97       	sbiw	r28, 0x1a	; 26
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	de bf       	out	0x3e, r29	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	cd bf       	out	0x3d, r28	; 61
    414c:	6f 8b       	std	Y+23, r22	; 0x17
    414e:	78 8f       	std	Y+24, r23	; 0x18
    4150:	89 8f       	std	Y+25, r24	; 0x19
    4152:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    4154:	8f 89       	ldd	r24, Y+23	; 0x17
    4156:	98 8d       	ldd	r25, Y+24	; 0x18
    4158:	a9 8d       	ldd	r26, Y+25	; 0x19
    415a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    415c:	00 97       	sbiw	r24, 0x00	; 0
    415e:	a1 05       	cpc	r26, r1
    4160:	b1 05       	cpc	r27, r1
    4162:	99 f0       	breq	.+38     	; 0x418a <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    4164:	8f 89       	ldd	r24, Y+23	; 0x17
    4166:	98 8d       	ldd	r25, Y+24	; 0x18
    4168:	a9 8d       	ldd	r26, Y+25	; 0x19
    416a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    416c:	9e 01       	movw	r18, r28
    416e:	2d 5f       	subi	r18, 0xFD	; 253
    4170:	3f 4f       	sbci	r19, 0xFF	; 255
    4172:	bc 01       	movw	r22, r24
    4174:	cd 01       	movw	r24, r26
    4176:	a9 01       	movw	r20, r18
    4178:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <IntToString>
    417c:	9a 83       	std	Y+2, r25	; 0x02
    417e:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    4180:	89 81       	ldd	r24, Y+1	; 0x01
    4182:	9a 81       	ldd	r25, Y+2	; 0x02
    4184:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <LCD_voidWriteString>
    4188:	03 c0       	rjmp	.+6      	; 0x4190 <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    418a:	80 e3       	ldi	r24, 0x30	; 48
    418c:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
	}
}
    4190:	6a 96       	adiw	r28, 0x1a	; 26
    4192:	0f b6       	in	r0, 0x3f	; 63
    4194:	f8 94       	cli
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	0f be       	out	0x3f, r0	; 63
    419a:	cd bf       	out	0x3d, r28	; 61
    419c:	cf 91       	pop	r28
    419e:	df 91       	pop	r29
    41a0:	08 95       	ret

000041a2 <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    41a2:	df 93       	push	r29
    41a4:	cf 93       	push	r28
    41a6:	cd b7       	in	r28, 0x3d	; 61
    41a8:	de b7       	in	r29, 0x3e	; 62
    41aa:	a6 97       	sbiw	r28, 0x26	; 38
    41ac:	0f b6       	in	r0, 0x3f	; 63
    41ae:	f8 94       	cli
    41b0:	de bf       	out	0x3e, r29	; 62
    41b2:	0f be       	out	0x3f, r0	; 63
    41b4:	cd bf       	out	0x3d, r28	; 61
    41b6:	6b a3       	std	Y+35, r22	; 0x23
    41b8:	7c a3       	std	Y+36, r23	; 0x24
    41ba:	8d a3       	std	Y+37, r24	; 0x25
    41bc:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    41be:	6b a1       	ldd	r22, Y+35	; 0x23
    41c0:	7c a1       	ldd	r23, Y+36	; 0x24
    41c2:	8d a1       	ldd	r24, Y+37	; 0x25
    41c4:	9e a1       	ldd	r25, Y+38	; 0x26
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	48 ec       	ldi	r20, 0xC8	; 200
    41cc:	52 e4       	ldi	r21, 0x42	; 66
    41ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d2:	dc 01       	movw	r26, r24
    41d4:	cb 01       	movw	r24, r22
    41d6:	bc 01       	movw	r22, r24
    41d8:	cd 01       	movw	r24, r26
    41da:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	8b 87       	std	Y+11, r24	; 0x0b
    41e4:	9c 87       	std	Y+12, r25	; 0x0c
    41e6:	ad 87       	std	Y+13, r26	; 0x0d
    41e8:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    41ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    41ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    41ee:	ad 85       	ldd	r26, Y+13	; 0x0d
    41f0:	be 85       	ldd	r27, Y+14	; 0x0e
    41f2:	9e 01       	movw	r18, r28
    41f4:	21 5f       	subi	r18, 0xF1	; 241
    41f6:	3f 4f       	sbci	r19, 0xFF	; 255
    41f8:	bc 01       	movw	r22, r24
    41fa:	cd 01       	movw	r24, r26
    41fc:	a9 01       	movw	r20, r18
    41fe:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <IntToString>
    4202:	9a 87       	std	Y+10, r25	; 0x0a
    4204:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    4206:	1d 82       	std	Y+5, r1	; 0x05
    4208:	1e 82       	std	Y+6, r1	; 0x06
    420a:	1f 82       	std	Y+7, r1	; 0x07
    420c:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    420e:	19 82       	std	Y+1, r1	; 0x01
    4210:	1a 82       	std	Y+2, r1	; 0x02
    4212:	1b 82       	std	Y+3, r1	; 0x03
    4214:	1c 82       	std	Y+4, r1	; 0x04
    4216:	0b c0       	rjmp	.+22     	; 0x422e <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    4218:	8d 81       	ldd	r24, Y+5	; 0x05
    421a:	9e 81       	ldd	r25, Y+6	; 0x06
    421c:	af 81       	ldd	r26, Y+7	; 0x07
    421e:	b8 85       	ldd	r27, Y+8	; 0x08
    4220:	01 96       	adiw	r24, 0x01	; 1
    4222:	a1 1d       	adc	r26, r1
    4224:	b1 1d       	adc	r27, r1
    4226:	8d 83       	std	Y+5, r24	; 0x05
    4228:	9e 83       	std	Y+6, r25	; 0x06
    422a:	af 83       	std	Y+7, r26	; 0x07
    422c:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    422e:	2d 81       	ldd	r18, Y+5	; 0x05
    4230:	3e 81       	ldd	r19, Y+6	; 0x06
    4232:	89 85       	ldd	r24, Y+9	; 0x09
    4234:	9a 85       	ldd	r25, Y+10	; 0x0a
    4236:	fc 01       	movw	r30, r24
    4238:	e2 0f       	add	r30, r18
    423a:	f3 1f       	adc	r31, r19
    423c:	80 81       	ld	r24, Z
    423e:	88 23       	and	r24, r24
    4240:	59 f7       	brne	.-42     	; 0x4218 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    4242:	8d 81       	ldd	r24, Y+5	; 0x05
    4244:	9e 81       	ldd	r25, Y+6	; 0x06
    4246:	af 81       	ldd	r26, Y+7	; 0x07
    4248:	b8 85       	ldd	r27, Y+8	; 0x08
    424a:	02 97       	sbiw	r24, 0x02	; 2
    424c:	a1 09       	sbc	r26, r1
    424e:	b1 09       	sbc	r27, r1
    4250:	8d 83       	std	Y+5, r24	; 0x05
    4252:	9e 83       	std	Y+6, r25	; 0x06
    4254:	af 83       	std	Y+7, r26	; 0x07
    4256:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    4258:	8d 81       	ldd	r24, Y+5	; 0x05
    425a:	9e 81       	ldd	r25, Y+6	; 0x06
    425c:	af 81       	ldd	r26, Y+7	; 0x07
    425e:	b8 85       	ldd	r27, Y+8	; 0x08
    4260:	00 97       	sbiw	r24, 0x00	; 0
    4262:	a1 05       	cpc	r26, r1
    4264:	b1 05       	cpc	r27, r1
    4266:	49 f5       	brne	.+82     	; 0x42ba <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    4268:	80 e3       	ldi	r24, 0x30	; 48
    426a:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
    426e:	25 c0       	rjmp	.+74     	; 0x42ba <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    4270:	29 81       	ldd	r18, Y+1	; 0x01
    4272:	3a 81       	ldd	r19, Y+2	; 0x02
    4274:	4b 81       	ldd	r20, Y+3	; 0x03
    4276:	5c 81       	ldd	r21, Y+4	; 0x04
    4278:	8d 81       	ldd	r24, Y+5	; 0x05
    427a:	9e 81       	ldd	r25, Y+6	; 0x06
    427c:	af 81       	ldd	r26, Y+7	; 0x07
    427e:	b8 85       	ldd	r27, Y+8	; 0x08
    4280:	28 17       	cp	r18, r24
    4282:	39 07       	cpc	r19, r25
    4284:	4a 07       	cpc	r20, r26
    4286:	5b 07       	cpc	r21, r27
    4288:	19 f4       	brne	.+6      	; 0x4290 <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    428a:	8e e2       	ldi	r24, 0x2E	; 46
    428c:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    4290:	29 81       	ldd	r18, Y+1	; 0x01
    4292:	3a 81       	ldd	r19, Y+2	; 0x02
    4294:	89 85       	ldd	r24, Y+9	; 0x09
    4296:	9a 85       	ldd	r25, Y+10	; 0x0a
    4298:	fc 01       	movw	r30, r24
    429a:	e2 0f       	add	r30, r18
    429c:	f3 1f       	adc	r31, r19
    429e:	80 81       	ld	r24, Z
    42a0:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
		counter2++;
    42a4:	89 81       	ldd	r24, Y+1	; 0x01
    42a6:	9a 81       	ldd	r25, Y+2	; 0x02
    42a8:	ab 81       	ldd	r26, Y+3	; 0x03
    42aa:	bc 81       	ldd	r27, Y+4	; 0x04
    42ac:	01 96       	adiw	r24, 0x01	; 1
    42ae:	a1 1d       	adc	r26, r1
    42b0:	b1 1d       	adc	r27, r1
    42b2:	89 83       	std	Y+1, r24	; 0x01
    42b4:	9a 83       	std	Y+2, r25	; 0x02
    42b6:	ab 83       	std	Y+3, r26	; 0x03
    42b8:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    42ba:	29 81       	ldd	r18, Y+1	; 0x01
    42bc:	3a 81       	ldd	r19, Y+2	; 0x02
    42be:	89 85       	ldd	r24, Y+9	; 0x09
    42c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42c2:	fc 01       	movw	r30, r24
    42c4:	e2 0f       	add	r30, r18
    42c6:	f3 1f       	adc	r31, r19
    42c8:	80 81       	ld	r24, Z
    42ca:	88 23       	and	r24, r24
    42cc:	89 f6       	brne	.-94     	; 0x4270 <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    42ce:	a6 96       	adiw	r28, 0x26	; 38
    42d0:	0f b6       	in	r0, 0x3f	; 63
    42d2:	f8 94       	cli
    42d4:	de bf       	out	0x3e, r29	; 62
    42d6:	0f be       	out	0x3f, r0	; 63
    42d8:	cd bf       	out	0x3d, r28	; 61
    42da:	cf 91       	pop	r28
    42dc:	df 91       	pop	r29
    42de:	08 95       	ret

000042e0 <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    42e0:	df 93       	push	r29
    42e2:	cf 93       	push	r28
    42e4:	00 d0       	rcall	.+0      	; 0x42e6 <LCD_voidGoToPosition+0x6>
    42e6:	0f 92       	push	r0
    42e8:	cd b7       	in	r28, 0x3d	; 61
    42ea:	de b7       	in	r29, 0x3e	; 62
    42ec:	8a 83       	std	Y+2, r24	; 0x02
    42ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    42f0:	80 e8       	ldi	r24, 0x80	; 128
    42f2:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    42f4:	8a 81       	ldd	r24, Y+2	; 0x02
    42f6:	88 23       	and	r24, r24
    42f8:	21 f4       	brne	.+8      	; 0x4302 <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    42fa:	8b 81       	ldd	r24, Y+3	; 0x03
    42fc:	80 58       	subi	r24, 0x80	; 128
    42fe:	89 83       	std	Y+1, r24	; 0x01
    4300:	14 c0       	rjmp	.+40     	; 0x432a <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    4302:	8a 81       	ldd	r24, Y+2	; 0x02
    4304:	81 30       	cpi	r24, 0x01	; 1
    4306:	21 f4       	brne	.+8      	; 0x4310 <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    4308:	8b 81       	ldd	r24, Y+3	; 0x03
    430a:	80 54       	subi	r24, 0x40	; 64
    430c:	89 83       	std	Y+1, r24	; 0x01
    430e:	0d c0       	rjmp	.+26     	; 0x432a <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    4310:	8a 81       	ldd	r24, Y+2	; 0x02
    4312:	82 30       	cpi	r24, 0x02	; 2
    4314:	21 f4       	brne	.+8      	; 0x431e <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    4316:	8b 81       	ldd	r24, Y+3	; 0x03
    4318:	8c 56       	subi	r24, 0x6C	; 108
    431a:	89 83       	std	Y+1, r24	; 0x01
    431c:	06 c0       	rjmp	.+12     	; 0x432a <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    431e:	8a 81       	ldd	r24, Y+2	; 0x02
    4320:	83 30       	cpi	r24, 0x03	; 3
    4322:	19 f4       	brne	.+6      	; 0x432a <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    4324:	8b 81       	ldd	r24, Y+3	; 0x03
    4326:	8c 52       	subi	r24, 0x2C	; 44
    4328:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    432a:	89 81       	ldd	r24, Y+1	; 0x01
    432c:	80 68       	ori	r24, 0x80	; 128
    432e:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    4330:	89 81       	ldd	r24, Y+1	; 0x01
    4332:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_voidSendCommand>
}
    4336:	0f 90       	pop	r0
    4338:	0f 90       	pop	r0
    433a:	0f 90       	pop	r0
    433c:	cf 91       	pop	r28
    433e:	df 91       	pop	r29
    4340:	08 95       	ret

00004342 <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    4342:	df 93       	push	r29
    4344:	cf 93       	push	r28
    4346:	cd b7       	in	r28, 0x3d	; 61
    4348:	de b7       	in	r29, 0x3e	; 62
    434a:	27 97       	sbiw	r28, 0x07	; 7
    434c:	0f b6       	in	r0, 0x3f	; 63
    434e:	f8 94       	cli
    4350:	de bf       	out	0x3e, r29	; 62
    4352:	0f be       	out	0x3f, r0	; 63
    4354:	cd bf       	out	0x3d, r28	; 61
    4356:	9c 83       	std	Y+4, r25	; 0x04
    4358:	8b 83       	std	Y+3, r24	; 0x03
    435a:	6d 83       	std	Y+5, r22	; 0x05
    435c:	4e 83       	std	Y+6, r20	; 0x06
    435e:	2f 83       	std	Y+7, r18	; 0x07
	LCD_voidGoToPosition(row,column);
    4360:	8e 81       	ldd	r24, Y+6	; 0x06
    4362:	6f 81       	ldd	r22, Y+7	; 0x07
    4364:	0e 94 70 21 	call	0x42e0	; 0x42e0 <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    4368:	8d 81       	ldd	r24, Y+5	; 0x05
    436a:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
	u8 address = 0;
    436e:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    4370:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    4372:	8d 81       	ldd	r24, Y+5	; 0x05
    4374:	88 30       	cpi	r24, 0x08	; 8
    4376:	30 f5       	brcc	.+76     	; 0x43c4 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    4378:	8d 81       	ldd	r24, Y+5	; 0x05
    437a:	88 2f       	mov	r24, r24
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	88 0f       	add	r24, r24
    4380:	99 1f       	adc	r25, r25
    4382:	88 0f       	add	r24, r24
    4384:	99 1f       	adc	r25, r25
    4386:	88 0f       	add	r24, r24
    4388:	99 1f       	adc	r25, r25
    438a:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(address,6);
    438c:	8a 81       	ldd	r24, Y+2	; 0x02
    438e:	80 64       	ori	r24, 0x40	; 64
    4390:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(address,7);
    4392:	8a 81       	ldd	r24, Y+2	; 0x02
    4394:	8f 77       	andi	r24, 0x7F	; 127
    4396:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    4398:	8a 81       	ldd	r24, Y+2	; 0x02
    439a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    439e:	19 82       	std	Y+1, r1	; 0x01
    43a0:	0e c0       	rjmp	.+28     	; 0x43be <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	28 2f       	mov	r18, r24
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	8b 81       	ldd	r24, Y+3	; 0x03
    43aa:	9c 81       	ldd	r25, Y+4	; 0x04
    43ac:	fc 01       	movw	r30, r24
    43ae:	e2 0f       	add	r30, r18
    43b0:	f3 1f       	adc	r31, r19
    43b2:	80 81       	ld	r24, Z
    43b4:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    43b8:	89 81       	ldd	r24, Y+1	; 0x01
    43ba:	8f 5f       	subi	r24, 0xFF	; 255
    43bc:	89 83       	std	Y+1, r24	; 0x01
    43be:	89 81       	ldd	r24, Y+1	; 0x01
    43c0:	88 30       	cpi	r24, 0x08	; 8
    43c2:	78 f3       	brcs	.-34     	; 0x43a2 <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    43c4:	82 e0       	ldi	r24, 0x02	; 2
    43c6:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_voidSendCommand>
}
    43ca:	27 96       	adiw	r28, 0x07	; 7
    43cc:	0f b6       	in	r0, 0x3f	; 63
    43ce:	f8 94       	cli
    43d0:	de bf       	out	0x3e, r29	; 62
    43d2:	0f be       	out	0x3f, r0	; 63
    43d4:	cd bf       	out	0x3d, r28	; 61
    43d6:	cf 91       	pop	r28
    43d8:	df 91       	pop	r29
    43da:	08 95       	ret

000043dc <KPD_u8GetPressedKey>:
 */
#include "../../../Library/STD_types.h"
#include "../../../MCAL/DIO/Header/DIO_Interface.h"
#include "../Header/Keypad_Interface.h"

u8 KPD_u8GetPressedKey(){
    43dc:	df 93       	push	r29
    43de:	cf 93       	push	r28
    43e0:	cd b7       	in	r28, 0x3d	; 61
    43e2:	de b7       	in	r29, 0x3e	; 62
    43e4:	a1 97       	sbiw	r28, 0x21	; 33
    43e6:	0f b6       	in	r0, 0x3f	; 63
    43e8:	f8 94       	cli
    43ea:	de bf       	out	0x3e, r29	; 62
    43ec:	0f be       	out	0x3f, r0	; 63
    43ee:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
    43f0:	8f ef       	ldi	r24, 0xFF	; 255
    43f2:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
    43f4:	ce 01       	movw	r24, r28
    43f6:	04 96       	adiw	r24, 0x04	; 4
    43f8:	9e 8f       	std	Y+30, r25	; 0x1e
    43fa:	8d 8f       	std	Y+29, r24	; 0x1d
    43fc:	eb eb       	ldi	r30, 0xBB	; 187
    43fe:	f1 e0       	ldi	r31, 0x01	; 1
    4400:	f8 a3       	std	Y+32, r31	; 0x20
    4402:	ef 8f       	std	Y+31, r30	; 0x1f
    4404:	f0 e1       	ldi	r31, 0x10	; 16
    4406:	f9 a3       	std	Y+33, r31	; 0x21
    4408:	ef 8d       	ldd	r30, Y+31	; 0x1f
    440a:	f8 a1       	ldd	r31, Y+32	; 0x20
    440c:	00 80       	ld	r0, Z
    440e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4410:	98 a1       	ldd	r25, Y+32	; 0x20
    4412:	01 96       	adiw	r24, 0x01	; 1
    4414:	98 a3       	std	Y+32, r25	; 0x20
    4416:	8f 8f       	std	Y+31, r24	; 0x1f
    4418:	ed 8d       	ldd	r30, Y+29	; 0x1d
    441a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    441c:	00 82       	st	Z, r0
    441e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4420:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4422:	01 96       	adiw	r24, 0x01	; 1
    4424:	9e 8f       	std	Y+30, r25	; 0x1e
    4426:	8d 8f       	std	Y+29, r24	; 0x1d
    4428:	99 a1       	ldd	r25, Y+33	; 0x21
    442a:	91 50       	subi	r25, 0x01	; 1
    442c:	99 a3       	std	Y+33, r25	; 0x21
    442e:	e9 a1       	ldd	r30, Y+33	; 0x21
    4430:	ee 23       	and	r30, r30
    4432:	51 f7       	brne	.-44     	; 0x4408 <KPD_u8GetPressedKey+0x2c>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
    4434:	87 e0       	ldi	r24, 0x07	; 7
    4436:	8c 8b       	std	Y+20, r24	; 0x14
    4438:	86 e0       	ldi	r24, 0x06	; 6
    443a:	8d 8b       	std	Y+21, r24	; 0x15
    443c:	85 e0       	ldi	r24, 0x05	; 5
    443e:	8e 8b       	std	Y+22, r24	; 0x16
    4440:	83 e0       	ldi	r24, 0x03	; 3
    4442:	8f 8b       	std	Y+23, r24	; 0x17
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
    4444:	85 e0       	ldi	r24, 0x05	; 5
    4446:	88 8f       	std	Y+24, r24	; 0x18
    4448:	84 e0       	ldi	r24, 0x04	; 4
    444a:	89 8f       	std	Y+25, r24	; 0x19
    444c:	83 e0       	ldi	r24, 0x03	; 3
    444e:	8a 8f       	std	Y+26, r24	; 0x1a
    4450:	82 e0       	ldi	r24, 0x02	; 2
    4452:	8b 8f       	std	Y+27, r24	; 0x1b
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    4454:	1a 82       	std	Y+2, r1	; 0x02
    4456:	6b c0       	rjmp	.+214    	; 0x452e <KPD_u8GetPressedKey+0x152>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
    4458:	8a 81       	ldd	r24, Y+2	; 0x02
    445a:	28 2f       	mov	r18, r24
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	ce 01       	movw	r24, r28
    4460:	44 96       	adiw	r24, 0x14	; 20
    4462:	fc 01       	movw	r30, r24
    4464:	e2 0f       	add	r30, r18
    4466:	f3 1f       	adc	r31, r19
    4468:	90 81       	ld	r25, Z
    446a:	84 e0       	ldi	r24, 0x04	; 4
    446c:	69 2f       	mov	r22, r25
    446e:	40 e0       	ldi	r20, 0x00	; 0
    4470:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    4474:	19 82       	std	Y+1, r1	; 0x01
    4476:	46 c0       	rjmp	.+140    	; 0x4504 <KPD_u8GetPressedKey+0x128>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    4478:	89 81       	ldd	r24, Y+1	; 0x01
    447a:	28 2f       	mov	r18, r24
    447c:	30 e0       	ldi	r19, 0x00	; 0
    447e:	ce 01       	movw	r24, r28
    4480:	48 96       	adiw	r24, 0x18	; 24
    4482:	fc 01       	movw	r30, r24
    4484:	e2 0f       	add	r30, r18
    4486:	f3 1f       	adc	r31, r19
    4488:	90 81       	ld	r25, Z
    448a:	83 e0       	ldi	r24, 0x03	; 3
    448c:	69 2f       	mov	r22, r25
    448e:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_u8GetPinValue>
    4492:	88 23       	and	r24, r24
    4494:	a1 f5       	brne	.+104    	; 0x44fe <KPD_u8GetPressedKey+0x122>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
    4496:	89 81       	ldd	r24, Y+1	; 0x01
    4498:	28 2f       	mov	r18, r24
    449a:	30 e0       	ldi	r19, 0x00	; 0
    449c:	8a 81       	ldd	r24, Y+2	; 0x02
    449e:	48 2f       	mov	r20, r24
    44a0:	50 e0       	ldi	r21, 0x00	; 0
    44a2:	22 0f       	add	r18, r18
    44a4:	33 1f       	adc	r19, r19
    44a6:	22 0f       	add	r18, r18
    44a8:	33 1f       	adc	r19, r19
    44aa:	ce 01       	movw	r24, r28
    44ac:	01 96       	adiw	r24, 0x01	; 1
    44ae:	82 0f       	add	r24, r18
    44b0:	93 1f       	adc	r25, r19
    44b2:	84 0f       	add	r24, r20
    44b4:	95 1f       	adc	r25, r21
    44b6:	fc 01       	movw	r30, r24
    44b8:	33 96       	adiw	r30, 0x03	; 3
    44ba:	80 81       	ld	r24, Z
    44bc:	8b 83       	std	Y+3, r24	; 0x03
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
    44be:	89 81       	ldd	r24, Y+1	; 0x01
    44c0:	28 2f       	mov	r18, r24
    44c2:	30 e0       	ldi	r19, 0x00	; 0
    44c4:	ce 01       	movw	r24, r28
    44c6:	48 96       	adiw	r24, 0x18	; 24
    44c8:	fc 01       	movw	r30, r24
    44ca:	e2 0f       	add	r30, r18
    44cc:	f3 1f       	adc	r31, r19
    44ce:	90 81       	ld	r25, Z
    44d0:	83 e0       	ldi	r24, 0x03	; 3
    44d2:	69 2f       	mov	r22, r25
    44d4:	0e 94 2f 09 	call	0x125e	; 0x125e <DIO_u8GetPinValue>
    44d8:	88 23       	and	r24, r24
    44da:	89 f3       	breq	.-30     	; 0x44be <KPD_u8GetPressedKey+0xe2>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    44dc:	8a 81       	ldd	r24, Y+2	; 0x02
    44de:	28 2f       	mov	r18, r24
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	ce 01       	movw	r24, r28
    44e4:	44 96       	adiw	r24, 0x14	; 20
    44e6:	fc 01       	movw	r30, r24
    44e8:	e2 0f       	add	r30, r18
    44ea:	f3 1f       	adc	r31, r19
    44ec:	90 81       	ld	r25, Z
    44ee:	84 e0       	ldi	r24, 0x04	; 4
    44f0:	69 2f       	mov	r22, r25
    44f2:	41 e0       	ldi	r20, 0x01	; 1
    44f4:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
				return Local_u8PressedKey;
    44f8:	fb 81       	ldd	r31, Y+3	; 0x03
    44fa:	fc 8f       	std	Y+28, r31	; 0x1c
    44fc:	1e c0       	rjmp	.+60     	; 0x453a <KPD_u8GetPressedKey+0x15e>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
    44fe:	89 81       	ldd	r24, Y+1	; 0x01
    4500:	8f 5f       	subi	r24, 0xFF	; 255
    4502:	89 83       	std	Y+1, r24	; 0x01
    4504:	89 81       	ldd	r24, Y+1	; 0x01
    4506:	84 30       	cpi	r24, 0x04	; 4
    4508:	08 f4       	brcc	.+2      	; 0x450c <KPD_u8GetPressedKey+0x130>
    450a:	b6 cf       	rjmp	.-148    	; 0x4478 <KPD_u8GetPressedKey+0x9c>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
    450c:	8a 81       	ldd	r24, Y+2	; 0x02
    450e:	28 2f       	mov	r18, r24
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	ce 01       	movw	r24, r28
    4514:	44 96       	adiw	r24, 0x14	; 20
    4516:	fc 01       	movw	r30, r24
    4518:	e2 0f       	add	r30, r18
    451a:	f3 1f       	adc	r31, r19
    451c:	90 81       	ld	r25, Z
    451e:	84 e0       	ldi	r24, 0x04	; 4
    4520:	69 2f       	mov	r22, r25
    4522:	41 e0       	ldi	r20, 0x01	; 1
    4524:	0e 94 21 08 	call	0x1042	; 0x1042 <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
    4528:	8a 81       	ldd	r24, Y+2	; 0x02
    452a:	8f 5f       	subi	r24, 0xFF	; 255
    452c:	8a 83       	std	Y+2, r24	; 0x02
    452e:	8a 81       	ldd	r24, Y+2	; 0x02
    4530:	84 30       	cpi	r24, 0x04	; 4
    4532:	08 f4       	brcc	.+2      	; 0x4536 <KPD_u8GetPressedKey+0x15a>
    4534:	91 cf       	rjmp	.-222    	; 0x4458 <KPD_u8GetPressedKey+0x7c>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	8c 8f       	std	Y+28, r24	; 0x1c
    453a:	8c 8d       	ldd	r24, Y+28	; 0x1c
}
    453c:	a1 96       	adiw	r28, 0x21	; 33
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	de bf       	out	0x3e, r29	; 62
    4544:	0f be       	out	0x3f, r0	; 63
    4546:	cd bf       	out	0x3d, r28	; 61
    4548:	cf 91       	pop	r28
    454a:	df 91       	pop	r29
    454c:	08 95       	ret

0000454e <main>:
f32 oldNum = -1;
u8 oldOperation = 0;
u8 currentOperation = 0;
u8 key = NO_PRESSED_KEY;
u8 errorFlag = 0;
int main(){
    454e:	ef 92       	push	r14
    4550:	ff 92       	push	r15
    4552:	0f 93       	push	r16
    4554:	1f 93       	push	r17
    4556:	df 93       	push	r29
    4558:	cf 93       	push	r28
    455a:	00 d0       	rcall	.+0      	; 0x455c <main+0xe>
    455c:	cd b7       	in	r28, 0x3d	; 61
    455e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    4560:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidInit>
	DIO_voidSetPortValue(DIO_PortC, 0xFF);
    4564:	83 e0       	ldi	r24, 0x03	; 3
    4566:	6f ef       	ldi	r22, 0xFF	; 255
    4568:	0e 94 8d 0a 	call	0x151a	; 0x151a <DIO_voidSetPortValue>
	LCD_voidInit();
    456c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <LCD_voidInit>
	while(1){
		key = KPD_u8GetPressedKey();
    4570:	0e 94 ee 21 	call	0x43dc	; 0x43dc <KPD_u8GetPressedKey>
    4574:	80 93 88 01 	sts	0x0188, r24
		if(key != NO_PRESSED_KEY){
    4578:	80 91 88 01 	lds	r24, 0x0188
    457c:	8f 3f       	cpi	r24, 0xFF	; 255
    457e:	c1 f3       	breq	.-16     	; 0x4570 <main+0x22>
			if(currentOperation == '=' || errorFlag == 1){
    4580:	80 91 31 02 	lds	r24, 0x0231
    4584:	8d 33       	cpi	r24, 0x3D	; 61
    4586:	21 f0       	breq	.+8      	; 0x4590 <main+0x42>
    4588:	80 91 32 02 	lds	r24, 0x0232
    458c:	81 30       	cpi	r24, 0x01	; 1
    458e:	39 f4       	brne	.+14     	; 0x459e <main+0x50>
				errorFlag = 0;
    4590:	10 92 32 02 	sts	0x0232, r1
				LCD_voidSendCommand(LCD_ClearDisplay);
    4594:	81 e0       	ldi	r24, 0x01	; 1
    4596:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_voidSendCommand>
				currentOperation = 0;
    459a:	10 92 31 02 	sts	0x0231, r1
			}
			if(key < 10){
    459e:	80 91 88 01 	lds	r24, 0x0188
    45a2:	8a 30       	cpi	r24, 0x0A	; 10
    45a4:	08 f0       	brcs	.+2      	; 0x45a8 <main+0x5a>
    45a6:	59 c0       	rjmp	.+178    	; 0x465a <main+0x10c>
				if(oldNum < 0){
    45a8:	80 91 84 01 	lds	r24, 0x0184
    45ac:	90 91 85 01 	lds	r25, 0x0185
    45b0:	a0 91 86 01 	lds	r26, 0x0186
    45b4:	b0 91 87 01 	lds	r27, 0x0187
    45b8:	bc 01       	movw	r22, r24
    45ba:	cd 01       	movw	r24, r26
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	40 e0       	ldi	r20, 0x00	; 0
    45c2:	50 e0       	ldi	r21, 0x00	; 0
    45c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45c8:	88 23       	and	r24, r24
    45ca:	64 f4       	brge	.+24     	; 0x45e4 <main+0x96>
					oldNum = 0;
    45cc:	80 e0       	ldi	r24, 0x00	; 0
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	a0 e0       	ldi	r26, 0x00	; 0
    45d2:	b0 e0       	ldi	r27, 0x00	; 0
    45d4:	80 93 84 01 	sts	0x0184, r24
    45d8:	90 93 85 01 	sts	0x0185, r25
    45dc:	a0 93 86 01 	sts	0x0186, r26
    45e0:	b0 93 87 01 	sts	0x0187, r27
				}
				LCD_voidWriteIntData(key);
    45e4:	80 91 88 01 	lds	r24, 0x0188
    45e8:	88 2f       	mov	r24, r24
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	a0 e0       	ldi	r26, 0x00	; 0
    45ee:	b0 e0       	ldi	r27, 0x00	; 0
    45f0:	bc 01       	movw	r22, r24
    45f2:	cd 01       	movw	r24, r26
    45f4:	0e 94 9c 20 	call	0x4138	; 0x4138 <LCD_voidWriteIntData>
				oldNum = (oldNum * 10) + key;
    45f8:	80 91 84 01 	lds	r24, 0x0184
    45fc:	90 91 85 01 	lds	r25, 0x0185
    4600:	a0 91 86 01 	lds	r26, 0x0186
    4604:	b0 91 87 01 	lds	r27, 0x0187
    4608:	bc 01       	movw	r22, r24
    460a:	cd 01       	movw	r24, r26
    460c:	20 e0       	ldi	r18, 0x00	; 0
    460e:	30 e0       	ldi	r19, 0x00	; 0
    4610:	40 e2       	ldi	r20, 0x20	; 32
    4612:	51 e4       	ldi	r21, 0x41	; 65
    4614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4618:	dc 01       	movw	r26, r24
    461a:	cb 01       	movw	r24, r22
    461c:	7c 01       	movw	r14, r24
    461e:	8d 01       	movw	r16, r26
    4620:	80 91 88 01 	lds	r24, 0x0188
    4624:	88 2f       	mov	r24, r24
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	aa 27       	eor	r26, r26
    462a:	97 fd       	sbrc	r25, 7
    462c:	a0 95       	com	r26
    462e:	ba 2f       	mov	r27, r26
    4630:	bc 01       	movw	r22, r24
    4632:	cd 01       	movw	r24, r26
    4634:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4638:	9b 01       	movw	r18, r22
    463a:	ac 01       	movw	r20, r24
    463c:	c8 01       	movw	r24, r16
    463e:	b7 01       	movw	r22, r14
    4640:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	80 93 84 01 	sts	0x0184, r24
    464c:	90 93 85 01 	sts	0x0185, r25
    4650:	a0 93 86 01 	sts	0x0186, r26
    4654:	b0 93 87 01 	sts	0x0187, r27
    4658:	8b cf       	rjmp	.-234    	; 0x4570 <main+0x22>
			}
			else{
				if(oldNum >= 0 || key == 'C'){
    465a:	80 91 84 01 	lds	r24, 0x0184
    465e:	90 91 85 01 	lds	r25, 0x0185
    4662:	a0 91 86 01 	lds	r26, 0x0186
    4666:	b0 91 87 01 	lds	r27, 0x0187
    466a:	bc 01       	movw	r22, r24
    466c:	cd 01       	movw	r24, r26
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	30 e0       	ldi	r19, 0x00	; 0
    4672:	40 e0       	ldi	r20, 0x00	; 0
    4674:	50 e0       	ldi	r21, 0x00	; 0
    4676:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    467a:	88 23       	and	r24, r24
    467c:	2c f4       	brge	.+10     	; 0x4688 <main+0x13a>
    467e:	80 91 88 01 	lds	r24, 0x0188
    4682:	83 34       	cpi	r24, 0x43	; 67
    4684:	09 f0       	breq	.+2      	; 0x4688 <main+0x13a>
    4686:	74 cf       	rjmp	.-280    	; 0x4570 <main+0x22>
					switch(key){
    4688:	80 91 88 01 	lds	r24, 0x0188
    468c:	28 2f       	mov	r18, r24
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	3a 83       	std	Y+2, r19	; 0x02
    4692:	29 83       	std	Y+1, r18	; 0x01
    4694:	89 81       	ldd	r24, Y+1	; 0x01
    4696:	9a 81       	ldd	r25, Y+2	; 0x02
    4698:	8f 32       	cpi	r24, 0x2F	; 47
    469a:	91 05       	cpc	r25, r1
    469c:	09 f1       	breq	.+66     	; 0x46e0 <main+0x192>
    469e:	29 81       	ldd	r18, Y+1	; 0x01
    46a0:	3a 81       	ldd	r19, Y+2	; 0x02
    46a2:	20 33       	cpi	r18, 0x30	; 48
    46a4:	31 05       	cpc	r19, r1
    46a6:	84 f4       	brge	.+32     	; 0x46c8 <main+0x17a>
    46a8:	89 81       	ldd	r24, Y+1	; 0x01
    46aa:	9a 81       	ldd	r25, Y+2	; 0x02
    46ac:	8b 32       	cpi	r24, 0x2B	; 43
    46ae:	91 05       	cpc	r25, r1
    46b0:	a9 f1       	breq	.+106    	; 0x471c <main+0x1ce>
    46b2:	29 81       	ldd	r18, Y+1	; 0x01
    46b4:	3a 81       	ldd	r19, Y+2	; 0x02
    46b6:	2d 32       	cpi	r18, 0x2D	; 45
    46b8:	31 05       	cpc	r19, r1
    46ba:	31 f1       	breq	.+76     	; 0x4708 <main+0x1ba>
    46bc:	89 81       	ldd	r24, Y+1	; 0x01
    46be:	9a 81       	ldd	r25, Y+2	; 0x02
    46c0:	8a 32       	cpi	r24, 0x2A	; 42
    46c2:	91 05       	cpc	r25, r1
    46c4:	b9 f0       	breq	.+46     	; 0x46f4 <main+0x1a6>
    46c6:	54 cf       	rjmp	.-344    	; 0x4570 <main+0x22>
    46c8:	29 81       	ldd	r18, Y+1	; 0x01
    46ca:	3a 81       	ldd	r19, Y+2	; 0x02
    46cc:	2d 33       	cpi	r18, 0x3D	; 61
    46ce:	31 05       	cpc	r19, r1
    46d0:	79 f1       	breq	.+94     	; 0x4730 <main+0x1e2>
    46d2:	89 81       	ldd	r24, Y+1	; 0x01
    46d4:	9a 81       	ldd	r25, Y+2	; 0x02
    46d6:	83 34       	cpi	r24, 0x43	; 67
    46d8:	91 05       	cpc	r25, r1
    46da:	09 f4       	brne	.+2      	; 0x46de <main+0x190>
    46dc:	54 c0       	rjmp	.+168    	; 0x4786 <main+0x238>
    46de:	48 cf       	rjmp	.-368    	; 0x4570 <main+0x22>
					case '/':
						CheckPriority();
    46e0:	0e 94 d7 23 	call	0x47ae	; 0x47ae <CheckPriority>
						if(errorFlag != -1){
							LCD_voidWriteChar(key);
    46e4:	80 91 88 01 	lds	r24, 0x0188
    46e8:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
							oldOperation = '/';
    46ec:	8f e2       	ldi	r24, 0x2F	; 47
    46ee:	80 93 30 02 	sts	0x0230, r24
    46f2:	3e cf       	rjmp	.-388    	; 0x4570 <main+0x22>
						}
						break;
					case '*':
						CheckPriority();
    46f4:	0e 94 d7 23 	call	0x47ae	; 0x47ae <CheckPriority>
						if(errorFlag != -1){
							LCD_voidWriteChar(key);
    46f8:	80 91 88 01 	lds	r24, 0x0188
    46fc:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
							oldOperation = '*';
    4700:	8a e2       	ldi	r24, 0x2A	; 42
    4702:	80 93 30 02 	sts	0x0230, r24
    4706:	34 cf       	rjmp	.-408    	; 0x4570 <main+0x22>
						}
						break;

					case '-':
						currentOperation = '-';
    4708:	8d e2       	ldi	r24, 0x2D	; 45
    470a:	80 93 31 02 	sts	0x0231, r24
						LCD_voidWriteChar(key);
    470e:	80 91 88 01 	lds	r24, 0x0188
    4712:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
						CheckPriority();
    4716:	0e 94 d7 23 	call	0x47ae	; 0x47ae <CheckPriority>
    471a:	2a cf       	rjmp	.-428    	; 0x4570 <main+0x22>
						break;

					case '+':
						currentOperation = '+';
    471c:	8b e2       	ldi	r24, 0x2B	; 43
    471e:	80 93 31 02 	sts	0x0231, r24
						LCD_voidWriteChar(key);
    4722:	80 91 88 01 	lds	r24, 0x0188
    4726:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
						CheckPriority();
    472a:	0e 94 d7 23 	call	0x47ae	; 0x47ae <CheckPriority>
    472e:	20 cf       	rjmp	.-448    	; 0x4570 <main+0x22>
						break;

					case '=':
						currentOperation = '=';
    4730:	8d e3       	ldi	r24, 0x3D	; 61
    4732:	80 93 31 02 	sts	0x0231, r24
						CheckPriority();
    4736:	0e 94 d7 23 	call	0x47ae	; 0x47ae <CheckPriority>
						CalculateResult();
    473a:	0e 94 a9 24 	call	0x4952	; 0x4952 <CalculateResult>
						if(errorFlag != 1){
    473e:	80 91 32 02 	lds	r24, 0x0232
    4742:	81 30       	cpi	r24, 0x01	; 1
    4744:	09 f4       	brne	.+2      	; 0x4748 <main+0x1fa>
    4746:	14 cf       	rjmp	.-472    	; 0x4570 <main+0x22>
							LCD_voidGoToPosition(3, 0);
    4748:	83 e0       	ldi	r24, 0x03	; 3
    474a:	60 e0       	ldi	r22, 0x00	; 0
    474c:	0e 94 70 21 	call	0x42e0	; 0x42e0 <LCD_voidGoToPosition>
							LCD_voidWriteChar(key);
    4750:	80 91 88 01 	lds	r24, 0x0188
    4754:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <LCD_voidWriteChar>
							LCD_voidWriteFloatData(numArr[Global_index-1]);
    4758:	80 91 33 02 	lds	r24, 0x0233
    475c:	88 2f       	mov	r24, r24
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	01 97       	sbiw	r24, 0x01	; 1
    4762:	88 0f       	add	r24, r24
    4764:	99 1f       	adc	r25, r25
    4766:	88 0f       	add	r24, r24
    4768:	99 1f       	adc	r25, r25
    476a:	fc 01       	movw	r30, r24
    476c:	e4 53       	subi	r30, 0x34	; 52
    476e:	fe 4f       	sbci	r31, 0xFE	; 254
    4770:	80 81       	ld	r24, Z
    4772:	91 81       	ldd	r25, Z+1	; 0x01
    4774:	a2 81       	ldd	r26, Z+2	; 0x02
    4776:	b3 81       	ldd	r27, Z+3	; 0x03
    4778:	bc 01       	movw	r22, r24
    477a:	cd 01       	movw	r24, r26
    477c:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <LCD_voidWriteFloatData>
							Global_index = 0;
    4780:	10 92 33 02 	sts	0x0233, r1
    4784:	f5 ce       	rjmp	.-534    	; 0x4570 <main+0x22>
						}
						break;

					case 'C':
						LCD_voidSendCommand(LCD_ClearDisplay);
    4786:	81 e0       	ldi	r24, 0x01	; 1
    4788:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_voidSendCommand>
						Global_index = 0;
    478c:	10 92 33 02 	sts	0x0233, r1
						oldNum = -1;
    4790:	80 e0       	ldi	r24, 0x00	; 0
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	a0 e8       	ldi	r26, 0x80	; 128
    4796:	bf eb       	ldi	r27, 0xBF	; 191
    4798:	80 93 84 01 	sts	0x0184, r24
    479c:	90 93 85 01 	sts	0x0185, r25
    47a0:	a0 93 86 01 	sts	0x0186, r26
    47a4:	b0 93 87 01 	sts	0x0187, r27
						oldOperation = 0;
    47a8:	10 92 30 02 	sts	0x0230, r1
    47ac:	e1 ce       	rjmp	.-574    	; 0x4570 <main+0x22>

000047ae <CheckPriority>:
		}
	}
	return 0;
}

void CheckPriority(){
    47ae:	df 93       	push	r29
    47b0:	cf 93       	push	r28
    47b2:	cd b7       	in	r28, 0x3d	; 61
    47b4:	de b7       	in	r29, 0x3e	; 62
	if(oldOperation == '/'){
    47b6:	80 91 30 02 	lds	r24, 0x0230
    47ba:	8f 32       	cpi	r24, 0x2F	; 47
    47bc:	09 f0       	breq	.+2      	; 0x47c0 <CheckPriority+0x12>
    47be:	59 c0       	rjmp	.+178    	; 0x4872 <CheckPriority+0xc4>
		oldOperation = 0;
    47c0:	10 92 30 02 	sts	0x0230, r1
		if(oldNum > 0){
    47c4:	80 91 84 01 	lds	r24, 0x0184
    47c8:	90 91 85 01 	lds	r25, 0x0185
    47cc:	a0 91 86 01 	lds	r26, 0x0186
    47d0:	b0 91 87 01 	lds	r27, 0x0187
    47d4:	bc 01       	movw	r22, r24
    47d6:	cd 01       	movw	r24, r26
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	40 e0       	ldi	r20, 0x00	; 0
    47de:	50 e0       	ldi	r21, 0x00	; 0
    47e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47e4:	18 16       	cp	r1, r24
    47e6:	64 f5       	brge	.+88     	; 0x4840 <CheckPriority+0x92>
			oldNum = numArr[Global_index - 1] / oldNum;
    47e8:	80 91 33 02 	lds	r24, 0x0233
    47ec:	88 2f       	mov	r24, r24
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	01 97       	sbiw	r24, 0x01	; 1
    47f2:	88 0f       	add	r24, r24
    47f4:	99 1f       	adc	r25, r25
    47f6:	88 0f       	add	r24, r24
    47f8:	99 1f       	adc	r25, r25
    47fa:	fc 01       	movw	r30, r24
    47fc:	e4 53       	subi	r30, 0x34	; 52
    47fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4800:	80 81       	ld	r24, Z
    4802:	91 81       	ldd	r25, Z+1	; 0x01
    4804:	a2 81       	ldd	r26, Z+2	; 0x02
    4806:	b3 81       	ldd	r27, Z+3	; 0x03
    4808:	20 91 84 01 	lds	r18, 0x0184
    480c:	30 91 85 01 	lds	r19, 0x0185
    4810:	40 91 86 01 	lds	r20, 0x0186
    4814:	50 91 87 01 	lds	r21, 0x0187
    4818:	bc 01       	movw	r22, r24
    481a:	cd 01       	movw	r24, r26
    481c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4820:	dc 01       	movw	r26, r24
    4822:	cb 01       	movw	r24, r22
    4824:	80 93 84 01 	sts	0x0184, r24
    4828:	90 93 85 01 	sts	0x0185, r25
    482c:	a0 93 86 01 	sts	0x0186, r26
    4830:	b0 93 87 01 	sts	0x0187, r27
			Global_index--;
    4834:	80 91 33 02 	lds	r24, 0x0233
    4838:	81 50       	subi	r24, 0x01	; 1
    483a:	80 93 33 02 	sts	0x0233, r24
    483e:	4a c0       	rjmp	.+148    	; 0x48d4 <CheckPriority+0x126>
		}
		else{
			LCD_voidSendCommand(LCD_ClearDisplay);
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <LCD_voidSendCommand>
			LCD_voidWriteString((u8*)"Error: Div. by 0!");
    4846:	80 e6       	ldi	r24, 0x60	; 96
    4848:	90 e0       	ldi	r25, 0x00	; 0
    484a:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <LCD_voidWriteString>
			oldNum = -1;
    484e:	80 e0       	ldi	r24, 0x00	; 0
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	a0 e8       	ldi	r26, 0x80	; 128
    4854:	bf eb       	ldi	r27, 0xBF	; 191
    4856:	80 93 84 01 	sts	0x0184, r24
    485a:	90 93 85 01 	sts	0x0185, r25
    485e:	a0 93 86 01 	sts	0x0186, r26
    4862:	b0 93 87 01 	sts	0x0187, r27
			Global_index = 0;
    4866:	10 92 33 02 	sts	0x0233, r1
			errorFlag = 1;
    486a:	81 e0       	ldi	r24, 0x01	; 1
    486c:	80 93 32 02 	sts	0x0232, r24
    4870:	6d c0       	rjmp	.+218    	; 0x494c <CheckPriority+0x19e>
			return;
		}

	}
	else if(oldOperation == '*'){
    4872:	80 91 30 02 	lds	r24, 0x0230
    4876:	8a 32       	cpi	r24, 0x2A	; 42
    4878:	69 f5       	brne	.+90     	; 0x48d4 <CheckPriority+0x126>
		oldOperation = 0;
    487a:	10 92 30 02 	sts	0x0230, r1
		oldNum = numArr[Global_index - 1] * oldNum;
    487e:	80 91 33 02 	lds	r24, 0x0233
    4882:	88 2f       	mov	r24, r24
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	01 97       	sbiw	r24, 0x01	; 1
    4888:	88 0f       	add	r24, r24
    488a:	99 1f       	adc	r25, r25
    488c:	88 0f       	add	r24, r24
    488e:	99 1f       	adc	r25, r25
    4890:	fc 01       	movw	r30, r24
    4892:	e4 53       	subi	r30, 0x34	; 52
    4894:	fe 4f       	sbci	r31, 0xFE	; 254
    4896:	80 81       	ld	r24, Z
    4898:	91 81       	ldd	r25, Z+1	; 0x01
    489a:	a2 81       	ldd	r26, Z+2	; 0x02
    489c:	b3 81       	ldd	r27, Z+3	; 0x03
    489e:	20 91 84 01 	lds	r18, 0x0184
    48a2:	30 91 85 01 	lds	r19, 0x0185
    48a6:	40 91 86 01 	lds	r20, 0x0186
    48aa:	50 91 87 01 	lds	r21, 0x0187
    48ae:	bc 01       	movw	r22, r24
    48b0:	cd 01       	movw	r24, r26
    48b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48b6:	dc 01       	movw	r26, r24
    48b8:	cb 01       	movw	r24, r22
    48ba:	80 93 84 01 	sts	0x0184, r24
    48be:	90 93 85 01 	sts	0x0185, r25
    48c2:	a0 93 86 01 	sts	0x0186, r26
    48c6:	b0 93 87 01 	sts	0x0187, r27
		Global_index--;
    48ca:	80 91 33 02 	lds	r24, 0x0233
    48ce:	81 50       	subi	r24, 0x01	; 1
    48d0:	80 93 33 02 	sts	0x0233, r24
	}
	if(currentOperation == '+' || currentOperation == '-'){
    48d4:	80 91 31 02 	lds	r24, 0x0231
    48d8:	8b 32       	cpi	r24, 0x2B	; 43
    48da:	21 f0       	breq	.+8      	; 0x48e4 <CheckPriority+0x136>
    48dc:	80 91 31 02 	lds	r24, 0x0231
    48e0:	8d 32       	cpi	r24, 0x2D	; 45
    48e2:	61 f4       	brne	.+24     	; 0x48fc <CheckPriority+0x14e>
		opArr[Global_index] = key;
    48e4:	80 91 33 02 	lds	r24, 0x0233
    48e8:	88 2f       	mov	r24, r24
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	20 91 88 01 	lds	r18, 0x0188
    48f0:	fc 01       	movw	r30, r24
    48f2:	e4 5e       	subi	r30, 0xE4	; 228
    48f4:	fd 4f       	sbci	r31, 0xFD	; 253
    48f6:	20 83       	st	Z, r18
		currentOperation = 0;
    48f8:	10 92 31 02 	sts	0x0231, r1
	}

	numArr[Global_index] = oldNum;
    48fc:	80 91 33 02 	lds	r24, 0x0233
    4900:	88 2f       	mov	r24, r24
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	20 91 84 01 	lds	r18, 0x0184
    4908:	30 91 85 01 	lds	r19, 0x0185
    490c:	40 91 86 01 	lds	r20, 0x0186
    4910:	50 91 87 01 	lds	r21, 0x0187
    4914:	88 0f       	add	r24, r24
    4916:	99 1f       	adc	r25, r25
    4918:	88 0f       	add	r24, r24
    491a:	99 1f       	adc	r25, r25
    491c:	fc 01       	movw	r30, r24
    491e:	e4 53       	subi	r30, 0x34	; 52
    4920:	fe 4f       	sbci	r31, 0xFE	; 254
    4922:	20 83       	st	Z, r18
    4924:	31 83       	std	Z+1, r19	; 0x01
    4926:	42 83       	std	Z+2, r20	; 0x02
    4928:	53 83       	std	Z+3, r21	; 0x03
	Global_index++;
    492a:	80 91 33 02 	lds	r24, 0x0233
    492e:	8f 5f       	subi	r24, 0xFF	; 255
    4930:	80 93 33 02 	sts	0x0233, r24
	oldNum = -1;
    4934:	80 e0       	ldi	r24, 0x00	; 0
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	a0 e8       	ldi	r26, 0x80	; 128
    493a:	bf eb       	ldi	r27, 0xBF	; 191
    493c:	80 93 84 01 	sts	0x0184, r24
    4940:	90 93 85 01 	sts	0x0185, r25
    4944:	a0 93 86 01 	sts	0x0186, r26
    4948:	b0 93 87 01 	sts	0x0187, r27
}
    494c:	cf 91       	pop	r28
    494e:	df 91       	pop	r29
    4950:	08 95       	ret

00004952 <CalculateResult>:

void CalculateResult(){
    4952:	cf 92       	push	r12
    4954:	df 92       	push	r13
    4956:	ef 92       	push	r14
    4958:	ff 92       	push	r15
    495a:	0f 93       	push	r16
    495c:	1f 93       	push	r17
    495e:	df 93       	push	r29
    4960:	cf 93       	push	r28
    4962:	0f 92       	push	r0
    4964:	cd b7       	in	r28, 0x3d	; 61
    4966:	de b7       	in	r29, 0x3e	; 62
	u8 counter = 0;
    4968:	19 82       	std	Y+1, r1	; 0x01
	for(counter = 0; counter+1 < Global_index; counter++){
    496a:	19 82       	std	Y+1, r1	; 0x01
    496c:	86 c0       	rjmp	.+268    	; 0x4a7a <CalculateResult+0x128>
		if(opArr[counter] == '+'){
    496e:	89 81       	ldd	r24, Y+1	; 0x01
    4970:	88 2f       	mov	r24, r24
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	fc 01       	movw	r30, r24
    4976:	e4 5e       	subi	r30, 0xE4	; 228
    4978:	fd 4f       	sbci	r31, 0xFD	; 253
    497a:	80 81       	ld	r24, Z
    497c:	8b 32       	cpi	r24, 0x2B	; 43
    497e:	c9 f5       	brne	.+114    	; 0x49f2 <CalculateResult+0xa0>
			numArr[counter+1] = numArr[counter] + numArr[counter + 1];
    4980:	89 81       	ldd	r24, Y+1	; 0x01
    4982:	88 2f       	mov	r24, r24
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	6c 01       	movw	r12, r24
    4988:	08 94       	sec
    498a:	c1 1c       	adc	r12, r1
    498c:	d1 1c       	adc	r13, r1
    498e:	89 81       	ldd	r24, Y+1	; 0x01
    4990:	88 2f       	mov	r24, r24
    4992:	90 e0       	ldi	r25, 0x00	; 0
    4994:	88 0f       	add	r24, r24
    4996:	99 1f       	adc	r25, r25
    4998:	88 0f       	add	r24, r24
    499a:	99 1f       	adc	r25, r25
    499c:	fc 01       	movw	r30, r24
    499e:	e4 53       	subi	r30, 0x34	; 52
    49a0:	fe 4f       	sbci	r31, 0xFE	; 254
    49a2:	e0 80       	ld	r14, Z
    49a4:	f1 80       	ldd	r15, Z+1	; 0x01
    49a6:	02 81       	ldd	r16, Z+2	; 0x02
    49a8:	13 81       	ldd	r17, Z+3	; 0x03
    49aa:	89 81       	ldd	r24, Y+1	; 0x01
    49ac:	88 2f       	mov	r24, r24
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	01 96       	adiw	r24, 0x01	; 1
    49b2:	88 0f       	add	r24, r24
    49b4:	99 1f       	adc	r25, r25
    49b6:	88 0f       	add	r24, r24
    49b8:	99 1f       	adc	r25, r25
    49ba:	fc 01       	movw	r30, r24
    49bc:	e4 53       	subi	r30, 0x34	; 52
    49be:	fe 4f       	sbci	r31, 0xFE	; 254
    49c0:	20 81       	ld	r18, Z
    49c2:	31 81       	ldd	r19, Z+1	; 0x01
    49c4:	42 81       	ldd	r20, Z+2	; 0x02
    49c6:	53 81       	ldd	r21, Z+3	; 0x03
    49c8:	c8 01       	movw	r24, r16
    49ca:	b7 01       	movw	r22, r14
    49cc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    49d0:	dc 01       	movw	r26, r24
    49d2:	cb 01       	movw	r24, r22
    49d4:	9c 01       	movw	r18, r24
    49d6:	ad 01       	movw	r20, r26
    49d8:	c6 01       	movw	r24, r12
    49da:	88 0f       	add	r24, r24
    49dc:	99 1f       	adc	r25, r25
    49de:	88 0f       	add	r24, r24
    49e0:	99 1f       	adc	r25, r25
    49e2:	fc 01       	movw	r30, r24
    49e4:	e4 53       	subi	r30, 0x34	; 52
    49e6:	fe 4f       	sbci	r31, 0xFE	; 254
    49e8:	20 83       	st	Z, r18
    49ea:	31 83       	std	Z+1, r19	; 0x01
    49ec:	42 83       	std	Z+2, r20	; 0x02
    49ee:	53 83       	std	Z+3, r21	; 0x03
    49f0:	41 c0       	rjmp	.+130    	; 0x4a74 <CalculateResult+0x122>
		}
		else if(opArr[counter] == '-'){
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	88 2f       	mov	r24, r24
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	fc 01       	movw	r30, r24
    49fa:	e4 5e       	subi	r30, 0xE4	; 228
    49fc:	fd 4f       	sbci	r31, 0xFD	; 253
    49fe:	80 81       	ld	r24, Z
    4a00:	8d 32       	cpi	r24, 0x2D	; 45
    4a02:	c1 f5       	brne	.+112    	; 0x4a74 <CalculateResult+0x122>
			numArr[counter+1] = numArr[counter] - numArr[counter + 1];
    4a04:	89 81       	ldd	r24, Y+1	; 0x01
    4a06:	88 2f       	mov	r24, r24
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	6c 01       	movw	r12, r24
    4a0c:	08 94       	sec
    4a0e:	c1 1c       	adc	r12, r1
    4a10:	d1 1c       	adc	r13, r1
    4a12:	89 81       	ldd	r24, Y+1	; 0x01
    4a14:	88 2f       	mov	r24, r24
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	88 0f       	add	r24, r24
    4a1a:	99 1f       	adc	r25, r25
    4a1c:	88 0f       	add	r24, r24
    4a1e:	99 1f       	adc	r25, r25
    4a20:	fc 01       	movw	r30, r24
    4a22:	e4 53       	subi	r30, 0x34	; 52
    4a24:	fe 4f       	sbci	r31, 0xFE	; 254
    4a26:	e0 80       	ld	r14, Z
    4a28:	f1 80       	ldd	r15, Z+1	; 0x01
    4a2a:	02 81       	ldd	r16, Z+2	; 0x02
    4a2c:	13 81       	ldd	r17, Z+3	; 0x03
    4a2e:	89 81       	ldd	r24, Y+1	; 0x01
    4a30:	88 2f       	mov	r24, r24
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	01 96       	adiw	r24, 0x01	; 1
    4a36:	88 0f       	add	r24, r24
    4a38:	99 1f       	adc	r25, r25
    4a3a:	88 0f       	add	r24, r24
    4a3c:	99 1f       	adc	r25, r25
    4a3e:	fc 01       	movw	r30, r24
    4a40:	e4 53       	subi	r30, 0x34	; 52
    4a42:	fe 4f       	sbci	r31, 0xFE	; 254
    4a44:	20 81       	ld	r18, Z
    4a46:	31 81       	ldd	r19, Z+1	; 0x01
    4a48:	42 81       	ldd	r20, Z+2	; 0x02
    4a4a:	53 81       	ldd	r21, Z+3	; 0x03
    4a4c:	c8 01       	movw	r24, r16
    4a4e:	b7 01       	movw	r22, r14
    4a50:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4a54:	dc 01       	movw	r26, r24
    4a56:	cb 01       	movw	r24, r22
    4a58:	9c 01       	movw	r18, r24
    4a5a:	ad 01       	movw	r20, r26
    4a5c:	c6 01       	movw	r24, r12
    4a5e:	88 0f       	add	r24, r24
    4a60:	99 1f       	adc	r25, r25
    4a62:	88 0f       	add	r24, r24
    4a64:	99 1f       	adc	r25, r25
    4a66:	fc 01       	movw	r30, r24
    4a68:	e4 53       	subi	r30, 0x34	; 52
    4a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a6c:	20 83       	st	Z, r18
    4a6e:	31 83       	std	Z+1, r19	; 0x01
    4a70:	42 83       	std	Z+2, r20	; 0x02
    4a72:	53 83       	std	Z+3, r21	; 0x03
	oldNum = -1;
}

void CalculateResult(){
	u8 counter = 0;
	for(counter = 0; counter+1 < Global_index; counter++){
    4a74:	89 81       	ldd	r24, Y+1	; 0x01
    4a76:	8f 5f       	subi	r24, 0xFF	; 255
    4a78:	89 83       	std	Y+1, r24	; 0x01
    4a7a:	89 81       	ldd	r24, Y+1	; 0x01
    4a7c:	88 2f       	mov	r24, r24
    4a7e:	90 e0       	ldi	r25, 0x00	; 0
    4a80:	9c 01       	movw	r18, r24
    4a82:	2f 5f       	subi	r18, 0xFF	; 255
    4a84:	3f 4f       	sbci	r19, 0xFF	; 255
    4a86:	80 91 33 02 	lds	r24, 0x0233
    4a8a:	88 2f       	mov	r24, r24
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	28 17       	cp	r18, r24
    4a90:	39 07       	cpc	r19, r25
    4a92:	0c f4       	brge	.+2      	; 0x4a96 <CalculateResult+0x144>
    4a94:	6c cf       	rjmp	.-296    	; 0x496e <CalculateResult+0x1c>
		}
		else if(opArr[counter] == '-'){
			numArr[counter+1] = numArr[counter] - numArr[counter + 1];
		}
	}
}
    4a96:	0f 90       	pop	r0
    4a98:	cf 91       	pop	r28
    4a9a:	df 91       	pop	r29
    4a9c:	1f 91       	pop	r17
    4a9e:	0f 91       	pop	r16
    4aa0:	ff 90       	pop	r15
    4aa2:	ef 90       	pop	r14
    4aa4:	df 90       	pop	r13
    4aa6:	cf 90       	pop	r12
    4aa8:	08 95       	ret

00004aaa <__divmodqi4>:
    4aaa:	87 fb       	bst	r24, 7
    4aac:	08 2e       	mov	r0, r24
    4aae:	06 26       	eor	r0, r22
    4ab0:	87 fd       	sbrc	r24, 7
    4ab2:	81 95       	neg	r24
    4ab4:	67 fd       	sbrc	r22, 7
    4ab6:	61 95       	neg	r22
    4ab8:	20 d0       	rcall	.+64     	; 0x4afa <__udivmodqi4>
    4aba:	0e f4       	brtc	.+2      	; 0x4abe <__divmodqi4_1>
    4abc:	91 95       	neg	r25

00004abe <__divmodqi4_1>:
    4abe:	07 fc       	sbrc	r0, 7
    4ac0:	81 95       	neg	r24

00004ac2 <__divmodqi4_exit>:
    4ac2:	08 95       	ret

00004ac4 <__divmodsi4>:
    4ac4:	97 fb       	bst	r25, 7
    4ac6:	09 2e       	mov	r0, r25
    4ac8:	05 26       	eor	r0, r21
    4aca:	0e d0       	rcall	.+28     	; 0x4ae8 <__divmodsi4_neg1>
    4acc:	57 fd       	sbrc	r21, 7
    4ace:	04 d0       	rcall	.+8      	; 0x4ad8 <__divmodsi4_neg2>
    4ad0:	20 d0       	rcall	.+64     	; 0x4b12 <__udivmodsi4>
    4ad2:	0a d0       	rcall	.+20     	; 0x4ae8 <__divmodsi4_neg1>
    4ad4:	00 1c       	adc	r0, r0
    4ad6:	38 f4       	brcc	.+14     	; 0x4ae6 <__divmodsi4_exit>

00004ad8 <__divmodsi4_neg2>:
    4ad8:	50 95       	com	r21
    4ada:	40 95       	com	r20
    4adc:	30 95       	com	r19
    4ade:	21 95       	neg	r18
    4ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ae2:	4f 4f       	sbci	r20, 0xFF	; 255
    4ae4:	5f 4f       	sbci	r21, 0xFF	; 255

00004ae6 <__divmodsi4_exit>:
    4ae6:	08 95       	ret

00004ae8 <__divmodsi4_neg1>:
    4ae8:	f6 f7       	brtc	.-4      	; 0x4ae6 <__divmodsi4_exit>
    4aea:	90 95       	com	r25
    4aec:	80 95       	com	r24
    4aee:	70 95       	com	r23
    4af0:	61 95       	neg	r22
    4af2:	7f 4f       	sbci	r23, 0xFF	; 255
    4af4:	8f 4f       	sbci	r24, 0xFF	; 255
    4af6:	9f 4f       	sbci	r25, 0xFF	; 255
    4af8:	08 95       	ret

00004afa <__udivmodqi4>:
    4afa:	99 1b       	sub	r25, r25
    4afc:	79 e0       	ldi	r23, 0x09	; 9
    4afe:	04 c0       	rjmp	.+8      	; 0x4b08 <__udivmodqi4_ep>

00004b00 <__udivmodqi4_loop>:
    4b00:	99 1f       	adc	r25, r25
    4b02:	96 17       	cp	r25, r22
    4b04:	08 f0       	brcs	.+2      	; 0x4b08 <__udivmodqi4_ep>
    4b06:	96 1b       	sub	r25, r22

00004b08 <__udivmodqi4_ep>:
    4b08:	88 1f       	adc	r24, r24
    4b0a:	7a 95       	dec	r23
    4b0c:	c9 f7       	brne	.-14     	; 0x4b00 <__udivmodqi4_loop>
    4b0e:	80 95       	com	r24
    4b10:	08 95       	ret

00004b12 <__udivmodsi4>:
    4b12:	a1 e2       	ldi	r26, 0x21	; 33
    4b14:	1a 2e       	mov	r1, r26
    4b16:	aa 1b       	sub	r26, r26
    4b18:	bb 1b       	sub	r27, r27
    4b1a:	fd 01       	movw	r30, r26
    4b1c:	0d c0       	rjmp	.+26     	; 0x4b38 <__udivmodsi4_ep>

00004b1e <__udivmodsi4_loop>:
    4b1e:	aa 1f       	adc	r26, r26
    4b20:	bb 1f       	adc	r27, r27
    4b22:	ee 1f       	adc	r30, r30
    4b24:	ff 1f       	adc	r31, r31
    4b26:	a2 17       	cp	r26, r18
    4b28:	b3 07       	cpc	r27, r19
    4b2a:	e4 07       	cpc	r30, r20
    4b2c:	f5 07       	cpc	r31, r21
    4b2e:	20 f0       	brcs	.+8      	; 0x4b38 <__udivmodsi4_ep>
    4b30:	a2 1b       	sub	r26, r18
    4b32:	b3 0b       	sbc	r27, r19
    4b34:	e4 0b       	sbc	r30, r20
    4b36:	f5 0b       	sbc	r31, r21

00004b38 <__udivmodsi4_ep>:
    4b38:	66 1f       	adc	r22, r22
    4b3a:	77 1f       	adc	r23, r23
    4b3c:	88 1f       	adc	r24, r24
    4b3e:	99 1f       	adc	r25, r25
    4b40:	1a 94       	dec	r1
    4b42:	69 f7       	brne	.-38     	; 0x4b1e <__udivmodsi4_loop>
    4b44:	60 95       	com	r22
    4b46:	70 95       	com	r23
    4b48:	80 95       	com	r24
    4b4a:	90 95       	com	r25
    4b4c:	9b 01       	movw	r18, r22
    4b4e:	ac 01       	movw	r20, r24
    4b50:	bd 01       	movw	r22, r26
    4b52:	cf 01       	movw	r24, r30
    4b54:	08 95       	ret

00004b56 <__prologue_saves__>:
    4b56:	2f 92       	push	r2
    4b58:	3f 92       	push	r3
    4b5a:	4f 92       	push	r4
    4b5c:	5f 92       	push	r5
    4b5e:	6f 92       	push	r6
    4b60:	7f 92       	push	r7
    4b62:	8f 92       	push	r8
    4b64:	9f 92       	push	r9
    4b66:	af 92       	push	r10
    4b68:	bf 92       	push	r11
    4b6a:	cf 92       	push	r12
    4b6c:	df 92       	push	r13
    4b6e:	ef 92       	push	r14
    4b70:	ff 92       	push	r15
    4b72:	0f 93       	push	r16
    4b74:	1f 93       	push	r17
    4b76:	cf 93       	push	r28
    4b78:	df 93       	push	r29
    4b7a:	cd b7       	in	r28, 0x3d	; 61
    4b7c:	de b7       	in	r29, 0x3e	; 62
    4b7e:	ca 1b       	sub	r28, r26
    4b80:	db 0b       	sbc	r29, r27
    4b82:	0f b6       	in	r0, 0x3f	; 63
    4b84:	f8 94       	cli
    4b86:	de bf       	out	0x3e, r29	; 62
    4b88:	0f be       	out	0x3f, r0	; 63
    4b8a:	cd bf       	out	0x3d, r28	; 61
    4b8c:	09 94       	ijmp

00004b8e <__epilogue_restores__>:
    4b8e:	2a 88       	ldd	r2, Y+18	; 0x12
    4b90:	39 88       	ldd	r3, Y+17	; 0x11
    4b92:	48 88       	ldd	r4, Y+16	; 0x10
    4b94:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b96:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b98:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ba0:	b9 84       	ldd	r11, Y+9	; 0x09
    4ba2:	c8 84       	ldd	r12, Y+8	; 0x08
    4ba4:	df 80       	ldd	r13, Y+7	; 0x07
    4ba6:	ee 80       	ldd	r14, Y+6	; 0x06
    4ba8:	fd 80       	ldd	r15, Y+5	; 0x05
    4baa:	0c 81       	ldd	r16, Y+4	; 0x04
    4bac:	1b 81       	ldd	r17, Y+3	; 0x03
    4bae:	aa 81       	ldd	r26, Y+2	; 0x02
    4bb0:	b9 81       	ldd	r27, Y+1	; 0x01
    4bb2:	ce 0f       	add	r28, r30
    4bb4:	d1 1d       	adc	r29, r1
    4bb6:	0f b6       	in	r0, 0x3f	; 63
    4bb8:	f8 94       	cli
    4bba:	de bf       	out	0x3e, r29	; 62
    4bbc:	0f be       	out	0x3f, r0	; 63
    4bbe:	cd bf       	out	0x3d, r28	; 61
    4bc0:	ed 01       	movw	r28, r26
    4bc2:	08 95       	ret

00004bc4 <_exit>:
    4bc4:	f8 94       	cli

00004bc6 <__stop_program>:
    4bc6:	ff cf       	rjmp	.-2      	; 0x4bc6 <__stop_program>
